// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: bans.sql

package postgres

import (
	"context"
)

const createAccountBan = `-- name: CreateAccountBan :exec

INSERT INTO account_bans(
        disabled, trader_key, expiry_height, duration)
VALUES ($1, $2, $3, $4)
`

type CreateAccountBanParams struct {
	Disabled     bool
	TraderKey    []byte
	ExpiryHeight int64
	Duration     int64
}

// - Account ban Queries ---
func (q *Queries) CreateAccountBan(ctx context.Context, arg CreateAccountBanParams) error {
	_, err := q.db.Exec(ctx, createAccountBan,
		arg.Disabled,
		arg.TraderKey,
		arg.ExpiryHeight,
		arg.Duration,
	)
	return err
}

const createNodeBan = `-- name: CreateNodeBan :exec

INSERT INTO node_bans(
        disabled, node_key, expiry_height, duration) 
VALUES ($1, $2, $3, $4)
`

type CreateNodeBanParams struct {
	Disabled     bool
	NodeKey      []byte
	ExpiryHeight int64
	Duration     int64
}

// - Node ban Queries ---
func (q *Queries) CreateNodeBan(ctx context.Context, arg CreateNodeBanParams) error {
	_, err := q.db.Exec(ctx, createNodeBan,
		arg.Disabled,
		arg.NodeKey,
		arg.ExpiryHeight,
		arg.Duration,
	)
	return err
}

const disableAccountBan = `-- name: DisableAccountBan :execrows
UPDATE account_bans 
SET disabled=TRUE
WHERE trader_key=$1
`

func (q *Queries) DisableAccountBan(ctx context.Context, traderKey []byte) (int64, error) {
	result, err := q.db.Exec(ctx, disableAccountBan, traderKey)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const disableNodeBan = `-- name: DisableNodeBan :execrows
UPDATE node_bans 
SET disabled=TRUE
WHERE node_key=$1
`

func (q *Queries) DisableNodeBan(ctx context.Context, nodeKey []byte) (int64, error) {
	result, err := q.db.Exec(ctx, disableNodeBan, nodeKey)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAccountBan = `-- name: GetAccountBan :one
SELECT id, disabled, trader_key, expiry_height, duration 
FROM account_bans
WHERE trader_key=$1 AND expiry_height > $2 AND NOT disabled
`

type GetAccountBanParams struct {
	TraderKey    []byte
	ExpiryHeight int64
}

func (q *Queries) GetAccountBan(ctx context.Context, arg GetAccountBanParams) (AccountBan, error) {
	row := q.db.QueryRow(ctx, getAccountBan, arg.TraderKey, arg.ExpiryHeight)
	var i AccountBan
	err := row.Scan(
		&i.ID,
		&i.Disabled,
		&i.TraderKey,
		&i.ExpiryHeight,
		&i.Duration,
	)
	return i, err
}

const getAllAccountBans = `-- name: GetAllAccountBans :many
SELECT id, disabled, trader_key, expiry_height, duration 
FROM account_bans
`

func (q *Queries) GetAllAccountBans(ctx context.Context) ([]AccountBan, error) {
	rows, err := q.db.Query(ctx, getAllAccountBans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountBan
	for rows.Next() {
		var i AccountBan
		if err := rows.Scan(
			&i.ID,
			&i.Disabled,
			&i.TraderKey,
			&i.ExpiryHeight,
			&i.Duration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAccountBansByTraderKey = `-- name: GetAllAccountBansByTraderKey :many
SELECT id, disabled, trader_key, expiry_height, duration 
FROM account_bans
WHERE trader_key=$1
`

func (q *Queries) GetAllAccountBansByTraderKey(ctx context.Context, traderKey []byte) ([]AccountBan, error) {
	rows, err := q.db.Query(ctx, getAllAccountBansByTraderKey, traderKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountBan
	for rows.Next() {
		var i AccountBan
		if err := rows.Scan(
			&i.ID,
			&i.Disabled,
			&i.TraderKey,
			&i.ExpiryHeight,
			&i.Duration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllActiveAccountBans = `-- name: GetAllActiveAccountBans :many
SELECT id, disabled, trader_key, expiry_height, duration 
FROM account_bans
WHERE expiry_height > $1 AND NOT disabled
`

func (q *Queries) GetAllActiveAccountBans(ctx context.Context, expiryHeight int64) ([]AccountBan, error) {
	rows, err := q.db.Query(ctx, getAllActiveAccountBans, expiryHeight)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountBan
	for rows.Next() {
		var i AccountBan
		if err := rows.Scan(
			&i.ID,
			&i.Disabled,
			&i.TraderKey,
			&i.ExpiryHeight,
			&i.Duration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllActiveNodeBans = `-- name: GetAllActiveNodeBans :many
SELECT id, disabled, node_key, expiry_height, duration 
FROM node_bans
WHERE expiry_height > $1 AND NOT disabled
`

func (q *Queries) GetAllActiveNodeBans(ctx context.Context, expiryHeight int64) ([]NodeBan, error) {
	rows, err := q.db.Query(ctx, getAllActiveNodeBans, expiryHeight)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NodeBan
	for rows.Next() {
		var i NodeBan
		if err := rows.Scan(
			&i.ID,
			&i.Disabled,
			&i.NodeKey,
			&i.ExpiryHeight,
			&i.Duration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllNodeBans = `-- name: GetAllNodeBans :many
SELECT id, disabled, node_key, expiry_height, duration 
FROM node_bans
`

func (q *Queries) GetAllNodeBans(ctx context.Context) ([]NodeBan, error) {
	rows, err := q.db.Query(ctx, getAllNodeBans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NodeBan
	for rows.Next() {
		var i NodeBan
		if err := rows.Scan(
			&i.ID,
			&i.Disabled,
			&i.NodeKey,
			&i.ExpiryHeight,
			&i.Duration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllNodeBansByNodeKey = `-- name: GetAllNodeBansByNodeKey :many
SELECT id, disabled, node_key, expiry_height, duration 
FROM node_bans
WHERE node_key=$1
`

func (q *Queries) GetAllNodeBansByNodeKey(ctx context.Context, nodeKey []byte) ([]NodeBan, error) {
	rows, err := q.db.Query(ctx, getAllNodeBansByNodeKey, nodeKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NodeBan
	for rows.Next() {
		var i NodeBan
		if err := rows.Scan(
			&i.ID,
			&i.Disabled,
			&i.NodeKey,
			&i.ExpiryHeight,
			&i.Duration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNodeBan = `-- name: GetNodeBan :one
SELECT id, disabled, node_key, expiry_height, duration 
FROM node_bans 
WHERE node_key=$1 AND expiry_height > $2 AND NOT disabled
`

type GetNodeBanParams struct {
	NodeKey      []byte
	ExpiryHeight int64
}

func (q *Queries) GetNodeBan(ctx context.Context, arg GetNodeBanParams) (NodeBan, error) {
	row := q.db.QueryRow(ctx, getNodeBan, arg.NodeKey, arg.ExpiryHeight)
	var i NodeBan
	err := row.Scan(
		&i.ID,
		&i.Disabled,
		&i.NodeKey,
		&i.ExpiryHeight,
		&i.Duration,
	)
	return i, err
}

const updateAccountBan = `-- name: UpdateAccountBan :exec
UPDATE account_bans SET 
        disabled=$2, expiry_height=$3, duration=$4
WHERE id=$1
`

type UpdateAccountBanParams struct {
	ID           int64
	Disabled     bool
	ExpiryHeight int64
	Duration     int64
}

func (q *Queries) UpdateAccountBan(ctx context.Context, arg UpdateAccountBanParams) error {
	_, err := q.db.Exec(ctx, updateAccountBan,
		arg.ID,
		arg.Disabled,
		arg.ExpiryHeight,
		arg.Duration,
	)
	return err
}

const updateNodeBan = `-- name: UpdateNodeBan :exec
UPDATE node_bans SET 
        disabled=$2, expiry_height=$3, duration=$4
WHERE id=$1
`

type UpdateNodeBanParams struct {
	ID           int64
	Disabled     bool
	ExpiryHeight int64
	Duration     int64
}

func (q *Queries) UpdateNodeBan(ctx context.Context, arg UpdateNodeBanParams) error {
	_, err := q.db.Exec(ctx, updateNodeBan,
		arg.ID,
		arg.Disabled,
		arg.ExpiryHeight,
		arg.Duration,
	)
	return err
}
