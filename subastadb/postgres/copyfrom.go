// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: copyfrom.go

package postgres

import (
	"context"
)

// iteratorForCreateOrderAllowedNodeIds implements pgx.CopyFromSource.
type iteratorForCreateOrderAllowedNodeIds struct {
	rows                 []CreateOrderAllowedNodeIdsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateOrderAllowedNodeIds) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateOrderAllowedNodeIds) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Nonce,
		r.rows[0].NodeKey,
		r.rows[0].Allowed,
	}, nil
}

func (r iteratorForCreateOrderAllowedNodeIds) Err() error {
	return nil
}

//- Order allowed node ids Queries ---
func (q *Queries) CreateOrderAllowedNodeIds(ctx context.Context, arg []CreateOrderAllowedNodeIdsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"order_allowed_node_ids"}, []string{"nonce", "node_key", "allowed"}, &iteratorForCreateOrderAllowedNodeIds{rows: arg})
}

// iteratorForCreateOrderNetworkAddress implements pgx.CopyFromSource.
type iteratorForCreateOrderNetworkAddress struct {
	rows                 []CreateOrderNetworkAddressParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateOrderNetworkAddress) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateOrderNetworkAddress) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Nonce,
		r.rows[0].Network,
		r.rows[0].Address,
	}, nil
}

func (r iteratorForCreateOrderNetworkAddress) Err() error {
	return nil
}

//- Order network addresses Queries ---
func (q *Queries) CreateOrderNetworkAddress(ctx context.Context, arg []CreateOrderNetworkAddressParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"order_node_network_addresses"}, []string{"nonce", "network", "address"}, &iteratorForCreateOrderNetworkAddress{rows: arg})
}
