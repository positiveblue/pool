// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: lease_durations.sql

package postgres

import (
	"context"
)

const deleteLeaseDuration = `-- name: DeleteLeaseDuration :execrows
DELETE 
FROM lease_durations
WHERE duration=$1
`

func (q *Queries) DeleteLeaseDuration(ctx context.Context, duration int64) (int64, error) {
	result, err := q.db.Exec(ctx, deleteLeaseDuration, duration)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getLeaseDuration = `-- name: GetLeaseDuration :one
SELECT duration, state
FROM lease_durations
WHERE duration=$1
`

func (q *Queries) GetLeaseDuration(ctx context.Context, duration int64) (LeaseDuration, error) {
	row := q.db.QueryRow(ctx, getLeaseDuration, duration)
	var i LeaseDuration
	err := row.Scan(&i.Duration, &i.State)
	return i, err
}

const getLeaseDurations = `-- name: GetLeaseDurations :many
SELECT duration, state
FROM lease_durations
ORDER BY duration
LIMIT NULLIF($2::int, 0) OFFSET $1
`

type GetLeaseDurationsParams struct {
	OffsetParam int32
	LimitParam  int32
}

func (q *Queries) GetLeaseDurations(ctx context.Context, arg GetLeaseDurationsParams) ([]LeaseDuration, error) {
	rows, err := q.db.Query(ctx, getLeaseDurations, arg.OffsetParam, arg.LimitParam)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LeaseDuration
	for rows.Next() {
		var i LeaseDuration
		if err := rows.Scan(&i.Duration, &i.State); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertLeaseDuration = `-- name: UpsertLeaseDuration :exec

INSERT INTO lease_durations(
        duration, state
) VALUES ($1, $2) 
ON CONFLICT (duration)
DO UPDATE SET 
    state=$2
`

type UpsertLeaseDurationParams struct {
	Duration int64
	State    int16
}

//- Lease duration Queries ---
func (q *Queries) UpsertLeaseDuration(ctx context.Context, arg UpsertLeaseDurationParams) error {
	_, err := q.db.Exec(ctx, upsertLeaseDuration, arg.Duration, arg.State)
	return err
}
