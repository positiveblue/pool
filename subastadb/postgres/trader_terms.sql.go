// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: trader_terms.sql

package postgres

import (
	"context"
	"database/sql"
)

const deleteTraderTerms = `-- name: DeleteTraderTerms :execrows
DELETE
FROM tarder_terms
WHERE token_id=$1
`

func (q *Queries) DeleteTraderTerms(ctx context.Context, tokenID []byte) (int64, error) {
	result, err := q.db.Exec(ctx, deleteTraderTerms, tokenID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getTraderTerms = `-- name: GetTraderTerms :many
SELECT token_id, base_fee, fee_rate
FROM tarder_terms
ORDER BY token_id
LIMIT NULLIF($2::int, 0) OFFSET $1
`

type GetTraderTermsParams struct {
	OffsetParam int32
	LimitParam  int32
}

func (q *Queries) GetTraderTerms(ctx context.Context, arg GetTraderTermsParams) ([]TarderTerm, error) {
	rows, err := q.db.Query(ctx, getTraderTerms, arg.OffsetParam, arg.LimitParam)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TarderTerm
	for rows.Next() {
		var i TarderTerm
		if err := rows.Scan(&i.TokenID, &i.BaseFee, &i.FeeRate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTraderTermsByTokenID = `-- name: GetTraderTermsByTokenID :one
SELECT token_id, base_fee, fee_rate
FROM tarder_terms
WHERE token_id=$1
`

func (q *Queries) GetTraderTermsByTokenID(ctx context.Context, tokenID []byte) (TarderTerm, error) {
	row := q.db.QueryRow(ctx, getTraderTermsByTokenID, tokenID)
	var i TarderTerm
	err := row.Scan(&i.TokenID, &i.BaseFee, &i.FeeRate)
	return i, err
}

const upsertTraderTerms = `-- name: UpsertTraderTerms :exec

INSERT INTO tarder_terms(token_id, base_fee, fee_rate) 
VALUES ($1, $2, $3)
ON CONFLICT (token_id) DO UPDATE
SET base_fee=$2, fee_rate=$3
`

type UpsertTraderTermsParams struct {
	TokenID []byte
	BaseFee sql.NullInt64
	FeeRate sql.NullInt64
}

// - Trader Terms Queries ---
func (q *Queries) UpsertTraderTerms(ctx context.Context, arg UpsertTraderTermsParams) error {
	_, err := q.db.Exec(ctx, upsertTraderTerms, arg.TokenID, arg.BaseFee, arg.FeeRate)
	return err
}
