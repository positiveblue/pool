// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: lifteime_packages.sql

package postgres

import (
	"context"
)

const deleteLifetimePackage = `-- name: DeleteLifetimePackage :execrows
DELETE 
FROM lifetime_packages
WHERE channel_point_string = $1
`

func (q *Queries) DeleteLifetimePackage(ctx context.Context, channelPointString string) (int64, error) {
	result, err := q.db.Exec(ctx, deleteLifetimePackage, channelPointString)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getLifetimePackage = `-- name: GetLifetimePackage :one
SELECT channel_point_string, channel_point_hash, channel_point_index, channel_script, height_hint, maturity_height, version, ask_account_key, bid_account_key, ask_node_key, bid_node_key, ask_payment_base_point, bid_payment_base_point 
FROM lifetime_packages
WHERE channel_point_string = $1
`

func (q *Queries) GetLifetimePackage(ctx context.Context, channelPointString string) (LifetimePackage, error) {
	row := q.db.QueryRow(ctx, getLifetimePackage, channelPointString)
	var i LifetimePackage
	err := row.Scan(
		&i.ChannelPointString,
		&i.ChannelPointHash,
		&i.ChannelPointIndex,
		&i.ChannelScript,
		&i.HeightHint,
		&i.MaturityHeight,
		&i.Version,
		&i.AskAccountKey,
		&i.BidAccountKey,
		&i.AskNodeKey,
		&i.BidNodeKey,
		&i.AskPaymentBasePoint,
		&i.BidPaymentBasePoint,
	)
	return i, err
}

const getLifetimePackages = `-- name: GetLifetimePackages :many
SELECT channel_point_string, channel_point_hash, channel_point_index, channel_script, height_hint, maturity_height, version, ask_account_key, bid_account_key, ask_node_key, bid_node_key, ask_payment_base_point, bid_payment_base_point 
FROM lifetime_packages
ORDER BY channel_point_string
LIMIT NULLIF($2::int, 0) OFFSET $1
`

type GetLifetimePackagesParams struct {
	OffsetParam int32
	LimitParam  int32
}

func (q *Queries) GetLifetimePackages(ctx context.Context, arg GetLifetimePackagesParams) ([]LifetimePackage, error) {
	rows, err := q.db.Query(ctx, getLifetimePackages, arg.OffsetParam, arg.LimitParam)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LifetimePackage
	for rows.Next() {
		var i LifetimePackage
		if err := rows.Scan(
			&i.ChannelPointString,
			&i.ChannelPointHash,
			&i.ChannelPointIndex,
			&i.ChannelScript,
			&i.HeightHint,
			&i.MaturityHeight,
			&i.Version,
			&i.AskAccountKey,
			&i.BidAccountKey,
			&i.AskNodeKey,
			&i.BidNodeKey,
			&i.AskPaymentBasePoint,
			&i.BidPaymentBasePoint,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertLifetimePackage = `-- name: UpsertLifetimePackage :exec

INSERT INTO lifetime_packages(
        channel_point_string, channel_point_hash, channel_point_index,
        channel_script, height_hint, maturity_height, version, ask_account_key,
        bid_account_key, ask_node_key, bid_node_key, ask_payment_base_point, 
        bid_payment_base_point)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
ON CONFLICT (channel_point_string)
DO UPDATE SET 
        channel_script=$4, height_hint=$5, maturity_height=$6, version=$7,
        ask_account_key=$8, bid_account_key=$9, ask_node_key=$10, 
        bid_node_key=$11, ask_payment_base_point=$12, 
        bid_payment_base_point=$13
`

type UpsertLifetimePackageParams struct {
	ChannelPointString  string
	ChannelPointHash    []byte
	ChannelPointIndex   int64
	ChannelScript       []byte
	HeightHint          int64
	MaturityHeight      int64
	Version             int16
	AskAccountKey       []byte
	BidAccountKey       []byte
	AskNodeKey          []byte
	BidNodeKey          []byte
	AskPaymentBasePoint []byte
	BidPaymentBasePoint []byte
}

//- Lifetime pakages Queries ---
func (q *Queries) UpsertLifetimePackage(ctx context.Context, arg UpsertLifetimePackageParams) error {
	_, err := q.db.Exec(ctx, upsertLifetimePackage,
		arg.ChannelPointString,
		arg.ChannelPointHash,
		arg.ChannelPointIndex,
		arg.ChannelScript,
		arg.HeightHint,
		arg.MaturityHeight,
		arg.Version,
		arg.AskAccountKey,
		arg.BidAccountKey,
		arg.AskNodeKey,
		arg.BidNodeKey,
		arg.AskPaymentBasePoint,
		arg.BidPaymentBasePoint,
	)
	return err
}
