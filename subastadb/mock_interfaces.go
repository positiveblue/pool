// Code generated by MockGen. DO NOT EDIT.
// Source: subastadb/interface.go

// Package subastadb is a generated GoMock package.
package subastadb

import (
	context "context"
	reflect "reflect"

	v2 "github.com/btcsuite/btcd/btcec/v2"
	gomock "github.com/golang/mock/gomock"
	lsat "github.com/lightninglabs/aperture/lsat"
	order "github.com/lightninglabs/pool/order"
	account "github.com/lightninglabs/subasta/account"
	ban "github.com/lightninglabs/subasta/ban"
	chanenforcement "github.com/lightninglabs/subasta/chanenforcement"
	order0 "github.com/lightninglabs/subasta/order"
	ratings "github.com/lightninglabs/subasta/ratings"
	traderterms "github.com/lightninglabs/subasta/traderterms"
)

// MockLeaseDurationStore is a mock of LeaseDurationStore interface.
type MockLeaseDurationStore struct {
	ctrl     *gomock.Controller
	recorder *MockLeaseDurationStoreMockRecorder
}

// MockLeaseDurationStoreMockRecorder is the mock recorder for MockLeaseDurationStore.
type MockLeaseDurationStoreMockRecorder struct {
	mock *MockLeaseDurationStore
}

// NewMockLeaseDurationStore creates a new mock instance.
func NewMockLeaseDurationStore(ctrl *gomock.Controller) *MockLeaseDurationStore {
	mock := &MockLeaseDurationStore{ctrl: ctrl}
	mock.recorder = &MockLeaseDurationStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaseDurationStore) EXPECT() *MockLeaseDurationStoreMockRecorder {
	return m.recorder
}

// LeaseDurations mocks base method.
func (m *MockLeaseDurationStore) LeaseDurations(ctx context.Context) (map[uint32]order0.DurationBucketState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaseDurations", ctx)
	ret0, _ := ret[0].(map[uint32]order0.DurationBucketState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaseDurations indicates an expected call of LeaseDurations.
func (mr *MockLeaseDurationStoreMockRecorder) LeaseDurations(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaseDurations", reflect.TypeOf((*MockLeaseDurationStore)(nil).LeaseDurations), ctx)
}

// RemoveLeaseDuration mocks base method.
func (m *MockLeaseDurationStore) RemoveLeaseDuration(ctx context.Context, duration uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLeaseDuration", ctx, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLeaseDuration indicates an expected call of RemoveLeaseDuration.
func (mr *MockLeaseDurationStoreMockRecorder) RemoveLeaseDuration(ctx, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLeaseDuration", reflect.TypeOf((*MockLeaseDurationStore)(nil).RemoveLeaseDuration), ctx, duration)
}

// StoreLeaseDuration mocks base method.
func (m *MockLeaseDurationStore) StoreLeaseDuration(ctx context.Context, duration uint32, marketState order0.DurationBucketState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreLeaseDuration", ctx, duration, marketState)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreLeaseDuration indicates an expected call of StoreLeaseDuration.
func (mr *MockLeaseDurationStoreMockRecorder) StoreLeaseDuration(ctx, duration, marketState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreLeaseDuration", reflect.TypeOf((*MockLeaseDurationStore)(nil).StoreLeaseDuration), ctx, duration, marketState)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Account mocks base method.
func (m *MockStore) Account(arg0 context.Context, arg1 *v2.PublicKey, arg2 bool) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account", arg0, arg1, arg2)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Account indicates an expected call of Account.
func (mr *MockStoreMockRecorder) Account(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockStore)(nil).Account), arg0, arg1, arg2)
}

// Accounts mocks base method.
func (m *MockStore) Accounts(arg0 context.Context) ([]*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accounts", arg0)
	ret0, _ := ret[0].([]*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accounts indicates an expected call of Accounts.
func (mr *MockStoreMockRecorder) Accounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accounts", reflect.TypeOf((*MockStore)(nil).Accounts), arg0)
}

// AllTraderTerms mocks base method.
func (m *MockStore) AllTraderTerms(ctx context.Context) ([]*traderterms.Custom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllTraderTerms", ctx)
	ret0, _ := ret[0].([]*traderterms.Custom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllTraderTerms indicates an expected call of AllTraderTerms.
func (mr *MockStoreMockRecorder) AllTraderTerms(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllTraderTerms", reflect.TypeOf((*MockStore)(nil).AllTraderTerms), ctx)
}

// BanAccount mocks base method.
func (m *MockStore) BanAccount(arg0 context.Context, arg1 *v2.PublicKey, arg2 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BanAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BanAccount indicates an expected call of BanAccount.
func (mr *MockStoreMockRecorder) BanAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BanAccount", reflect.TypeOf((*MockStore)(nil).BanAccount), arg0, arg1, arg2)
}

// BatchConfirmed mocks base method.
func (m *MockStore) BatchConfirmed(arg0 context.Context, arg1 order.BatchID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchConfirmed", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchConfirmed indicates an expected call of BatchConfirmed.
func (mr *MockStoreMockRecorder) BatchConfirmed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchConfirmed", reflect.TypeOf((*MockStore)(nil).BatchConfirmed), arg0, arg1)
}

// BatchKey mocks base method.
func (m *MockStore) BatchKey(arg0 context.Context) (*v2.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchKey", arg0)
	ret0, _ := ret[0].(*v2.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchKey indicates an expected call of BatchKey.
func (mr *MockStoreMockRecorder) BatchKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchKey", reflect.TypeOf((*MockStore)(nil).BatchKey), arg0)
}

// CommitAccountDiff mocks base method.
func (m *MockStore) CommitAccountDiff(arg0 context.Context, arg1 *v2.PublicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitAccountDiff", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitAccountDiff indicates an expected call of CommitAccountDiff.
func (mr *MockStoreMockRecorder) CommitAccountDiff(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitAccountDiff", reflect.TypeOf((*MockStore)(nil).CommitAccountDiff), arg0, arg1)
}

// CompleteReservation mocks base method.
func (m *MockStore) CompleteReservation(arg0 context.Context, arg1 *account.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteReservation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteReservation indicates an expected call of CompleteReservation.
func (mr *MockStoreMockRecorder) CompleteReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteReservation", reflect.TypeOf((*MockStore)(nil).CompleteReservation), arg0, arg1)
}

// ConfirmBatch mocks base method.
func (m *MockStore) ConfirmBatch(ctx context.Context, batchID order.BatchID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmBatch", ctx, batchID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmBatch indicates an expected call of ConfirmBatch.
func (mr *MockStoreMockRecorder) ConfirmBatch(ctx, batchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmBatch", reflect.TypeOf((*MockStore)(nil).ConfirmBatch), ctx, batchID)
}

// DelTraderTerms mocks base method.
func (m *MockStore) DelTraderTerms(ctx context.Context, traderID lsat.TokenID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelTraderTerms", ctx, traderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelTraderTerms indicates an expected call of DelTraderTerms.
func (mr *MockStoreMockRecorder) DelTraderTerms(ctx, traderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelTraderTerms", reflect.TypeOf((*MockStore)(nil).DelTraderTerms), ctx, traderID)
}

// DeleteLifetimePackage mocks base method.
func (m *MockStore) DeleteLifetimePackage(ctx context.Context, pkg *chanenforcement.LifetimePackage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLifetimePackage", ctx, pkg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLifetimePackage indicates an expected call of DeleteLifetimePackage.
func (mr *MockStoreMockRecorder) DeleteLifetimePackage(ctx, pkg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLifetimePackage", reflect.TypeOf((*MockStore)(nil).DeleteLifetimePackage), ctx, pkg)
}

// EnforceLifetimeViolation mocks base method.
func (m *MockStore) EnforceLifetimeViolation(ctx context.Context, pkg *chanenforcement.LifetimePackage, height uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnforceLifetimeViolation", ctx, pkg, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnforceLifetimeViolation indicates an expected call of EnforceLifetimeViolation.
func (mr *MockStoreMockRecorder) EnforceLifetimeViolation(ctx, pkg, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnforceLifetimeViolation", reflect.TypeOf((*MockStore)(nil).EnforceLifetimeViolation), ctx, pkg, height)
}

// FetchAuctioneerAccount mocks base method.
func (m *MockStore) FetchAuctioneerAccount(arg0 context.Context) (*account.Auctioneer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAuctioneerAccount", arg0)
	ret0, _ := ret[0].(*account.Auctioneer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAuctioneerAccount indicates an expected call of FetchAuctioneerAccount.
func (mr *MockStoreMockRecorder) FetchAuctioneerAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAuctioneerAccount", reflect.TypeOf((*MockStore)(nil).FetchAuctioneerAccount), arg0)
}

// GetArchivedOrders mocks base method.
func (m *MockStore) GetArchivedOrders(arg0 context.Context) ([]order0.ServerOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchivedOrders", arg0)
	ret0, _ := ret[0].([]order0.ServerOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchivedOrders indicates an expected call of GetArchivedOrders.
func (mr *MockStoreMockRecorder) GetArchivedOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchivedOrders", reflect.TypeOf((*MockStore)(nil).GetArchivedOrders), arg0)
}

// GetBatchSnapshot mocks base method.
func (m *MockStore) GetBatchSnapshot(arg0 context.Context, arg1 order.BatchID) (*BatchSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchSnapshot", arg0, arg1)
	ret0, _ := ret[0].(*BatchSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchSnapshot indicates an expected call of GetBatchSnapshot.
func (mr *MockStoreMockRecorder) GetBatchSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchSnapshot", reflect.TypeOf((*MockStore)(nil).GetBatchSnapshot), arg0, arg1)
}

// GetOrder mocks base method.
func (m *MockStore) GetOrder(arg0 context.Context, arg1 order.Nonce) (order0.ServerOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(order0.ServerOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockStoreMockRecorder) GetOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockStore)(nil).GetOrder), arg0, arg1)
}

// GetOrders mocks base method.
func (m *MockStore) GetOrders(arg0 context.Context) ([]order0.ServerOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0)
	ret0, _ := ret[0].([]order0.ServerOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockStoreMockRecorder) GetOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockStore)(nil).GetOrders), arg0)
}

// GetTraderTerms mocks base method.
func (m *MockStore) GetTraderTerms(ctx context.Context, traderID lsat.TokenID) (*traderterms.Custom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraderTerms", ctx, traderID)
	ret0, _ := ret[0].(*traderterms.Custom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraderTerms indicates an expected call of GetTraderTerms.
func (mr *MockStoreMockRecorder) GetTraderTerms(ctx, traderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraderTerms", reflect.TypeOf((*MockStore)(nil).GetTraderTerms), ctx, traderID)
}

// HasReservation mocks base method.
func (m *MockStore) HasReservation(arg0 context.Context, arg1 lsat.TokenID) (*account.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasReservation", arg0, arg1)
	ret0, _ := ret[0].(*account.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasReservation indicates an expected call of HasReservation.
func (mr *MockStoreMockRecorder) HasReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasReservation", reflect.TypeOf((*MockStore)(nil).HasReservation), arg0, arg1)
}

// HasReservationForKey mocks base method.
func (m *MockStore) HasReservationForKey(arg0 context.Context, arg1 *v2.PublicKey) (*account.Reservation, *lsat.TokenID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasReservationForKey", arg0, arg1)
	ret0, _ := ret[0].(*account.Reservation)
	ret1, _ := ret[1].(*lsat.TokenID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// HasReservationForKey indicates an expected call of HasReservationForKey.
func (mr *MockStoreMockRecorder) HasReservationForKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasReservationForKey", reflect.TypeOf((*MockStore)(nil).HasReservationForKey), arg0, arg1)
}

// Init mocks base method.
func (m *MockStore) Init(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockStoreMockRecorder) Init(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockStore)(nil).Init), ctx)
}

// IsAccountBanned mocks base method.
func (m *MockStore) IsAccountBanned(arg0 context.Context, arg1 *v2.PublicKey, arg2 uint32) (bool, uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAccountBanned", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsAccountBanned indicates an expected call of IsAccountBanned.
func (mr *MockStoreMockRecorder) IsAccountBanned(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAccountBanned", reflect.TypeOf((*MockStore)(nil).IsAccountBanned), arg0, arg1, arg2)
}

// IsTraderBanned mocks base method.
func (m *MockStore) IsTraderBanned(arg0 context.Context, arg1, arg2 [33]byte, arg3 uint32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTraderBanned", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTraderBanned indicates an expected call of IsTraderBanned.
func (mr *MockStoreMockRecorder) IsTraderBanned(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTraderBanned", reflect.TypeOf((*MockStore)(nil).IsTraderBanned), arg0, arg1, arg2, arg3)
}

// LeaseDurations mocks base method.
func (m *MockStore) LeaseDurations(ctx context.Context) (map[uint32]order0.DurationBucketState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaseDurations", ctx)
	ret0, _ := ret[0].(map[uint32]order0.DurationBucketState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaseDurations indicates an expected call of LeaseDurations.
func (mr *MockStoreMockRecorder) LeaseDurations(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaseDurations", reflect.TypeOf((*MockStore)(nil).LeaseDurations), ctx)
}

// LifetimePackages mocks base method.
func (m *MockStore) LifetimePackages(ctx context.Context) ([]*chanenforcement.LifetimePackage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifetimePackages", ctx)
	ret0, _ := ret[0].([]*chanenforcement.LifetimePackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifetimePackages indicates an expected call of LifetimePackages.
func (mr *MockStoreMockRecorder) LifetimePackages(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifetimePackages", reflect.TypeOf((*MockStore)(nil).LifetimePackages), ctx)
}

// PersistBatchResult mocks base method.
func (m *MockStore) PersistBatchResult(arg0 context.Context, arg1 []order.Nonce, arg2 [][]order0.Modifier, arg3 []*v2.PublicKey, arg4 [][]account.Modifier, arg5 *account.Auctioneer, arg6 order.BatchID, arg7 *BatchSnapshot, arg8 *v2.PublicKey, arg9 []*chanenforcement.LifetimePackage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistBatchResult", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistBatchResult indicates an expected call of PersistBatchResult.
func (mr *MockStoreMockRecorder) PersistBatchResult(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistBatchResult", reflect.TypeOf((*MockStore)(nil).PersistBatchResult), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
}

// PutTraderTerms mocks base method.
func (m *MockStore) PutTraderTerms(ctx context.Context, terms *traderterms.Custom) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTraderTerms", ctx, terms)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutTraderTerms indicates an expected call of PutTraderTerms.
func (mr *MockStoreMockRecorder) PutTraderTerms(ctx, terms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTraderTerms", reflect.TypeOf((*MockStore)(nil).PutTraderTerms), ctx, terms)
}

// RemoveLeaseDuration mocks base method.
func (m *MockStore) RemoveLeaseDuration(ctx context.Context, duration uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLeaseDuration", ctx, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLeaseDuration indicates an expected call of RemoveLeaseDuration.
func (mr *MockStoreMockRecorder) RemoveLeaseDuration(ctx, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLeaseDuration", reflect.TypeOf((*MockStore)(nil).RemoveLeaseDuration), ctx, duration)
}

// ReserveAccount mocks base method.
func (m *MockStore) ReserveAccount(arg0 context.Context, arg1 lsat.TokenID, arg2 *account.Reservation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveAccount indicates an expected call of ReserveAccount.
func (mr *MockStoreMockRecorder) ReserveAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveAccount", reflect.TypeOf((*MockStore)(nil).ReserveAccount), arg0, arg1, arg2)
}

// StoreAccountDiff mocks base method.
func (m *MockStore) StoreAccountDiff(arg0 context.Context, arg1 *v2.PublicKey, arg2 []account.Modifier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAccountDiff", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreAccountDiff indicates an expected call of StoreAccountDiff.
func (mr *MockStoreMockRecorder) StoreAccountDiff(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAccountDiff", reflect.TypeOf((*MockStore)(nil).StoreAccountDiff), arg0, arg1, arg2)
}

// StoreLeaseDuration mocks base method.
func (m *MockStore) StoreLeaseDuration(ctx context.Context, duration uint32, marketState order0.DurationBucketState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreLeaseDuration", ctx, duration, marketState)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreLeaseDuration indicates an expected call of StoreLeaseDuration.
func (mr *MockStoreMockRecorder) StoreLeaseDuration(ctx, duration, marketState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreLeaseDuration", reflect.TypeOf((*MockStore)(nil).StoreLeaseDuration), ctx, duration, marketState)
}

// StoreLifetimePackage mocks base method.
func (m *MockStore) StoreLifetimePackage(ctx context.Context, pkg *chanenforcement.LifetimePackage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreLifetimePackage", ctx, pkg)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreLifetimePackage indicates an expected call of StoreLifetimePackage.
func (mr *MockStoreMockRecorder) StoreLifetimePackage(ctx, pkg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreLifetimePackage", reflect.TypeOf((*MockStore)(nil).StoreLifetimePackage), ctx, pkg)
}

// SubmitOrder mocks base method.
func (m *MockStore) SubmitOrder(arg0 context.Context, arg1 order0.ServerOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitOrder indicates an expected call of SubmitOrder.
func (mr *MockStoreMockRecorder) SubmitOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitOrder", reflect.TypeOf((*MockStore)(nil).SubmitOrder), arg0, arg1)
}

// UpdateAccount mocks base method.
func (m *MockStore) UpdateAccount(arg0 context.Context, arg1 *account.Account, arg2 ...account.Modifier) (*account.Account, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccount", varargs...)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockStoreMockRecorder) UpdateAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockStore)(nil).UpdateAccount), varargs...)
}

// UpdateAuctioneerAccount mocks base method.
func (m *MockStore) UpdateAuctioneerAccount(arg0 context.Context, arg1 *account.Auctioneer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuctioneerAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuctioneerAccount indicates an expected call of UpdateAuctioneerAccount.
func (mr *MockStoreMockRecorder) UpdateAuctioneerAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuctioneerAccount", reflect.TypeOf((*MockStore)(nil).UpdateAuctioneerAccount), arg0, arg1)
}

// UpdateOrder mocks base method.
func (m *MockStore) UpdateOrder(arg0 context.Context, arg1 order.Nonce, arg2 ...order0.Modifier) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrder", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockStoreMockRecorder) UpdateOrder(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockStore)(nil).UpdateOrder), varargs...)
}

// MockAdminStore is a mock of AdminStore interface.
type MockAdminStore struct {
	ctrl     *gomock.Controller
	recorder *MockAdminStoreMockRecorder
}

// MockAdminStoreMockRecorder is the mock recorder for MockAdminStore.
type MockAdminStoreMockRecorder struct {
	mock *MockAdminStore
}

// NewMockAdminStore creates a new mock instance.
func NewMockAdminStore(ctrl *gomock.Controller) *MockAdminStore {
	mock := &MockAdminStore{ctrl: ctrl}
	mock.recorder = &MockAdminStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminStore) EXPECT() *MockAdminStoreMockRecorder {
	return m.recorder
}

// Account mocks base method.
func (m *MockAdminStore) Account(arg0 context.Context, arg1 *v2.PublicKey, arg2 bool) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account", arg0, arg1, arg2)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Account indicates an expected call of Account.
func (mr *MockAdminStoreMockRecorder) Account(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockAdminStore)(nil).Account), arg0, arg1, arg2)
}

// Accounts mocks base method.
func (m *MockAdminStore) Accounts(arg0 context.Context) ([]*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accounts", arg0)
	ret0, _ := ret[0].([]*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accounts indicates an expected call of Accounts.
func (mr *MockAdminStoreMockRecorder) Accounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accounts", reflect.TypeOf((*MockAdminStore)(nil).Accounts), arg0)
}

// AllTraderTerms mocks base method.
func (m *MockAdminStore) AllTraderTerms(ctx context.Context) ([]*traderterms.Custom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllTraderTerms", ctx)
	ret0, _ := ret[0].([]*traderterms.Custom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllTraderTerms indicates an expected call of AllTraderTerms.
func (mr *MockAdminStoreMockRecorder) AllTraderTerms(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllTraderTerms", reflect.TypeOf((*MockAdminStore)(nil).AllTraderTerms), ctx)
}

// BanAccount mocks base method.
func (m *MockAdminStore) BanAccount(arg0 context.Context, arg1 *v2.PublicKey, arg2 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BanAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BanAccount indicates an expected call of BanAccount.
func (mr *MockAdminStoreMockRecorder) BanAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BanAccount", reflect.TypeOf((*MockAdminStore)(nil).BanAccount), arg0, arg1, arg2)
}

// BatchConfirmed mocks base method.
func (m *MockAdminStore) BatchConfirmed(arg0 context.Context, arg1 order.BatchID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchConfirmed", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchConfirmed indicates an expected call of BatchConfirmed.
func (mr *MockAdminStoreMockRecorder) BatchConfirmed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchConfirmed", reflect.TypeOf((*MockAdminStore)(nil).BatchConfirmed), arg0, arg1)
}

// BatchKey mocks base method.
func (m *MockAdminStore) BatchKey(arg0 context.Context) (*v2.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchKey", arg0)
	ret0, _ := ret[0].(*v2.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchKey indicates an expected call of BatchKey.
func (mr *MockAdminStoreMockRecorder) BatchKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchKey", reflect.TypeOf((*MockAdminStore)(nil).BatchKey), arg0)
}

// Batches mocks base method.
func (m *MockAdminStore) Batches(ctx context.Context) (map[order.BatchID]*BatchSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Batches", ctx)
	ret0, _ := ret[0].(map[order.BatchID]*BatchSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Batches indicates an expected call of Batches.
func (mr *MockAdminStoreMockRecorder) Batches(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Batches", reflect.TypeOf((*MockAdminStore)(nil).Batches), ctx)
}

// CommitAccountDiff mocks base method.
func (m *MockAdminStore) CommitAccountDiff(arg0 context.Context, arg1 *v2.PublicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitAccountDiff", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitAccountDiff indicates an expected call of CommitAccountDiff.
func (mr *MockAdminStoreMockRecorder) CommitAccountDiff(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitAccountDiff", reflect.TypeOf((*MockAdminStore)(nil).CommitAccountDiff), arg0, arg1)
}

// CompleteReservation mocks base method.
func (m *MockAdminStore) CompleteReservation(arg0 context.Context, arg1 *account.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteReservation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteReservation indicates an expected call of CompleteReservation.
func (mr *MockAdminStoreMockRecorder) CompleteReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteReservation", reflect.TypeOf((*MockAdminStore)(nil).CompleteReservation), arg0, arg1)
}

// ConfirmBatch mocks base method.
func (m *MockAdminStore) ConfirmBatch(ctx context.Context, batchID order.BatchID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmBatch", ctx, batchID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmBatch indicates an expected call of ConfirmBatch.
func (mr *MockAdminStoreMockRecorder) ConfirmBatch(ctx, batchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmBatch", reflect.TypeOf((*MockAdminStore)(nil).ConfirmBatch), ctx, batchID)
}

// DelTraderTerms mocks base method.
func (m *MockAdminStore) DelTraderTerms(ctx context.Context, traderID lsat.TokenID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelTraderTerms", ctx, traderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelTraderTerms indicates an expected call of DelTraderTerms.
func (mr *MockAdminStoreMockRecorder) DelTraderTerms(ctx, traderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelTraderTerms", reflect.TypeOf((*MockAdminStore)(nil).DelTraderTerms), ctx, traderID)
}

// DeleteAccountDiff mocks base method.
func (m *MockAdminStore) DeleteAccountDiff(ctx context.Context, accountKey *v2.PublicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountDiff", ctx, accountKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountDiff indicates an expected call of DeleteAccountDiff.
func (mr *MockAdminStoreMockRecorder) DeleteAccountDiff(ctx, accountKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountDiff", reflect.TypeOf((*MockAdminStore)(nil).DeleteAccountDiff), ctx, accountKey)
}

// DeleteLifetimePackage mocks base method.
func (m *MockAdminStore) DeleteLifetimePackage(ctx context.Context, pkg *chanenforcement.LifetimePackage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLifetimePackage", ctx, pkg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLifetimePackage indicates an expected call of DeleteLifetimePackage.
func (mr *MockAdminStoreMockRecorder) DeleteLifetimePackage(ctx, pkg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLifetimePackage", reflect.TypeOf((*MockAdminStore)(nil).DeleteLifetimePackage), ctx, pkg)
}

// EnforceLifetimeViolation mocks base method.
func (m *MockAdminStore) EnforceLifetimeViolation(ctx context.Context, pkg *chanenforcement.LifetimePackage, height uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnforceLifetimeViolation", ctx, pkg, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnforceLifetimeViolation indicates an expected call of EnforceLifetimeViolation.
func (mr *MockAdminStoreMockRecorder) EnforceLifetimeViolation(ctx, pkg, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnforceLifetimeViolation", reflect.TypeOf((*MockAdminStore)(nil).EnforceLifetimeViolation), ctx, pkg, height)
}

// FetchAuctioneerAccount mocks base method.
func (m *MockAdminStore) FetchAuctioneerAccount(arg0 context.Context) (*account.Auctioneer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAuctioneerAccount", arg0)
	ret0, _ := ret[0].(*account.Auctioneer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAuctioneerAccount indicates an expected call of FetchAuctioneerAccount.
func (mr *MockAdminStoreMockRecorder) FetchAuctioneerAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAuctioneerAccount", reflect.TypeOf((*MockAdminStore)(nil).FetchAuctioneerAccount), arg0)
}

// GetArchivedOrders mocks base method.
func (m *MockAdminStore) GetArchivedOrders(arg0 context.Context) ([]order0.ServerOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchivedOrders", arg0)
	ret0, _ := ret[0].([]order0.ServerOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchivedOrders indicates an expected call of GetArchivedOrders.
func (mr *MockAdminStoreMockRecorder) GetArchivedOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchivedOrders", reflect.TypeOf((*MockAdminStore)(nil).GetArchivedOrders), arg0)
}

// GetBatchSnapshot mocks base method.
func (m *MockAdminStore) GetBatchSnapshot(arg0 context.Context, arg1 order.BatchID) (*BatchSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchSnapshot", arg0, arg1)
	ret0, _ := ret[0].(*BatchSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchSnapshot indicates an expected call of GetBatchSnapshot.
func (mr *MockAdminStoreMockRecorder) GetBatchSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchSnapshot", reflect.TypeOf((*MockAdminStore)(nil).GetBatchSnapshot), arg0, arg1)
}

// GetOrder mocks base method.
func (m *MockAdminStore) GetOrder(arg0 context.Context, arg1 order.Nonce) (order0.ServerOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(order0.ServerOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockAdminStoreMockRecorder) GetOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockAdminStore)(nil).GetOrder), arg0, arg1)
}

// GetOrders mocks base method.
func (m *MockAdminStore) GetOrders(arg0 context.Context) ([]order0.ServerOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0)
	ret0, _ := ret[0].([]order0.ServerOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockAdminStoreMockRecorder) GetOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockAdminStore)(nil).GetOrders), arg0)
}

// GetTraderTerms mocks base method.
func (m *MockAdminStore) GetTraderTerms(ctx context.Context, traderID lsat.TokenID) (*traderterms.Custom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraderTerms", ctx, traderID)
	ret0, _ := ret[0].(*traderterms.Custom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraderTerms indicates an expected call of GetTraderTerms.
func (mr *MockAdminStoreMockRecorder) GetTraderTerms(ctx, traderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraderTerms", reflect.TypeOf((*MockAdminStore)(nil).GetTraderTerms), ctx, traderID)
}

// HasReservation mocks base method.
func (m *MockAdminStore) HasReservation(arg0 context.Context, arg1 lsat.TokenID) (*account.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasReservation", arg0, arg1)
	ret0, _ := ret[0].(*account.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasReservation indicates an expected call of HasReservation.
func (mr *MockAdminStoreMockRecorder) HasReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasReservation", reflect.TypeOf((*MockAdminStore)(nil).HasReservation), arg0, arg1)
}

// HasReservationForKey mocks base method.
func (m *MockAdminStore) HasReservationForKey(arg0 context.Context, arg1 *v2.PublicKey) (*account.Reservation, *lsat.TokenID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasReservationForKey", arg0, arg1)
	ret0, _ := ret[0].(*account.Reservation)
	ret1, _ := ret[1].(*lsat.TokenID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// HasReservationForKey indicates an expected call of HasReservationForKey.
func (mr *MockAdminStoreMockRecorder) HasReservationForKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasReservationForKey", reflect.TypeOf((*MockAdminStore)(nil).HasReservationForKey), arg0, arg1)
}

// Init mocks base method.
func (m *MockAdminStore) Init(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockAdminStoreMockRecorder) Init(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockAdminStore)(nil).Init), ctx)
}

// IsAccountBanned mocks base method.
func (m *MockAdminStore) IsAccountBanned(arg0 context.Context, arg1 *v2.PublicKey, arg2 uint32) (bool, uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAccountBanned", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsAccountBanned indicates an expected call of IsAccountBanned.
func (mr *MockAdminStoreMockRecorder) IsAccountBanned(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAccountBanned", reflect.TypeOf((*MockAdminStore)(nil).IsAccountBanned), arg0, arg1, arg2)
}

// IsTraderBanned mocks base method.
func (m *MockAdminStore) IsTraderBanned(arg0 context.Context, arg1, arg2 [33]byte, arg3 uint32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTraderBanned", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTraderBanned indicates an expected call of IsTraderBanned.
func (mr *MockAdminStoreMockRecorder) IsTraderBanned(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTraderBanned", reflect.TypeOf((*MockAdminStore)(nil).IsTraderBanned), arg0, arg1, arg2, arg3)
}

// LeaseDurations mocks base method.
func (m *MockAdminStore) LeaseDurations(ctx context.Context) (map[uint32]order0.DurationBucketState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaseDurations", ctx)
	ret0, _ := ret[0].(map[uint32]order0.DurationBucketState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaseDurations indicates an expected call of LeaseDurations.
func (mr *MockAdminStoreMockRecorder) LeaseDurations(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaseDurations", reflect.TypeOf((*MockAdminStore)(nil).LeaseDurations), ctx)
}

// LifetimePackages mocks base method.
func (m *MockAdminStore) LifetimePackages(ctx context.Context) ([]*chanenforcement.LifetimePackage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifetimePackages", ctx)
	ret0, _ := ret[0].([]*chanenforcement.LifetimePackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifetimePackages indicates an expected call of LifetimePackages.
func (mr *MockAdminStoreMockRecorder) LifetimePackages(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifetimePackages", reflect.TypeOf((*MockAdminStore)(nil).LifetimePackages), ctx)
}

// ListBannedAccounts mocks base method.
func (m *MockAdminStore) ListBannedAccounts(ctx context.Context) (map[[33]byte]*ban.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBannedAccounts", ctx)
	ret0, _ := ret[0].(map[[33]byte]*ban.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBannedAccounts indicates an expected call of ListBannedAccounts.
func (mr *MockAdminStoreMockRecorder) ListBannedAccounts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBannedAccounts", reflect.TypeOf((*MockAdminStore)(nil).ListBannedAccounts), ctx)
}

// ListBannedNodes mocks base method.
func (m *MockAdminStore) ListBannedNodes(ctx context.Context) (map[[33]byte]*ban.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBannedNodes", ctx)
	ret0, _ := ret[0].(map[[33]byte]*ban.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBannedNodes indicates an expected call of ListBannedNodes.
func (mr *MockAdminStoreMockRecorder) ListBannedNodes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBannedNodes", reflect.TypeOf((*MockAdminStore)(nil).ListBannedNodes), ctx)
}

// MirrorToSQL mocks base method.
func (m *MockAdminStore) MirrorToSQL(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MirrorToSQL", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// MirrorToSQL indicates an expected call of MirrorToSQL.
func (mr *MockAdminStoreMockRecorder) MirrorToSQL(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MirrorToSQL", reflect.TypeOf((*MockAdminStore)(nil).MirrorToSQL), ctx)
}

// NodeRatings mocks base method.
func (m *MockAdminStore) NodeRatings(ctx context.Context) (ratings.NodeRatingsMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeRatings", ctx)
	ret0, _ := ret[0].(ratings.NodeRatingsMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeRatings indicates an expected call of NodeRatings.
func (mr *MockAdminStoreMockRecorder) NodeRatings(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeRatings", reflect.TypeOf((*MockAdminStore)(nil).NodeRatings), ctx)
}

// PersistBatchResult mocks base method.
func (m *MockAdminStore) PersistBatchResult(arg0 context.Context, arg1 []order.Nonce, arg2 [][]order0.Modifier, arg3 []*v2.PublicKey, arg4 [][]account.Modifier, arg5 *account.Auctioneer, arg6 order.BatchID, arg7 *BatchSnapshot, arg8 *v2.PublicKey, arg9 []*chanenforcement.LifetimePackage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistBatchResult", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistBatchResult indicates an expected call of PersistBatchResult.
func (mr *MockAdminStoreMockRecorder) PersistBatchResult(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistBatchResult", reflect.TypeOf((*MockAdminStore)(nil).PersistBatchResult), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
}

// PutTraderTerms mocks base method.
func (m *MockAdminStore) PutTraderTerms(ctx context.Context, terms *traderterms.Custom) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTraderTerms", ctx, terms)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutTraderTerms indicates an expected call of PutTraderTerms.
func (mr *MockAdminStoreMockRecorder) PutTraderTerms(ctx, terms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTraderTerms", reflect.TypeOf((*MockAdminStore)(nil).PutTraderTerms), ctx, terms)
}

// RemoveAccountBan mocks base method.
func (m *MockAdminStore) RemoveAccountBan(ctx context.Context, acctKey *v2.PublicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccountBan", ctx, acctKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAccountBan indicates an expected call of RemoveAccountBan.
func (mr *MockAdminStoreMockRecorder) RemoveAccountBan(ctx, acctKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccountBan", reflect.TypeOf((*MockAdminStore)(nil).RemoveAccountBan), ctx, acctKey)
}

// RemoveLeaseDuration mocks base method.
func (m *MockAdminStore) RemoveLeaseDuration(ctx context.Context, duration uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLeaseDuration", ctx, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLeaseDuration indicates an expected call of RemoveLeaseDuration.
func (mr *MockAdminStoreMockRecorder) RemoveLeaseDuration(ctx, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLeaseDuration", reflect.TypeOf((*MockAdminStore)(nil).RemoveLeaseDuration), ctx, duration)
}

// RemoveNodeBan mocks base method.
func (m *MockAdminStore) RemoveNodeBan(ctx context.Context, nodeKey *v2.PublicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNodeBan", ctx, nodeKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNodeBan indicates an expected call of RemoveNodeBan.
func (mr *MockAdminStoreMockRecorder) RemoveNodeBan(ctx, nodeKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNodeBan", reflect.TypeOf((*MockAdminStore)(nil).RemoveNodeBan), ctx, nodeKey)
}

// RemoveReservation mocks base method.
func (m *MockAdminStore) RemoveReservation(ctx context.Context, id lsat.TokenID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReservation", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReservation indicates an expected call of RemoveReservation.
func (mr *MockAdminStoreMockRecorder) RemoveReservation(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReservation", reflect.TypeOf((*MockAdminStore)(nil).RemoveReservation), ctx, id)
}

// ReserveAccount mocks base method.
func (m *MockAdminStore) ReserveAccount(arg0 context.Context, arg1 lsat.TokenID, arg2 *account.Reservation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveAccount indicates an expected call of ReserveAccount.
func (mr *MockAdminStoreMockRecorder) ReserveAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveAccount", reflect.TypeOf((*MockAdminStore)(nil).ReserveAccount), arg0, arg1, arg2)
}

// SetAccountBanInfo mocks base method.
func (m *MockAdminStore) SetAccountBanInfo(ctx context.Context, accountKey *v2.PublicKey, currentHeight, duration uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccountBanInfo", ctx, accountKey, currentHeight, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccountBanInfo indicates an expected call of SetAccountBanInfo.
func (mr *MockAdminStoreMockRecorder) SetAccountBanInfo(ctx, accountKey, currentHeight, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountBanInfo", reflect.TypeOf((*MockAdminStore)(nil).SetAccountBanInfo), ctx, accountKey, currentHeight, duration)
}

// SetNodeBanInfo mocks base method.
func (m *MockAdminStore) SetNodeBanInfo(ctx context.Context, nodeKey *v2.PublicKey, currentHeight, duration uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNodeBanInfo", ctx, nodeKey, currentHeight, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNodeBanInfo indicates an expected call of SetNodeBanInfo.
func (mr *MockAdminStoreMockRecorder) SetNodeBanInfo(ctx, nodeKey, currentHeight, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNodeBanInfo", reflect.TypeOf((*MockAdminStore)(nil).SetNodeBanInfo), ctx, nodeKey, currentHeight, duration)
}

// StoreAccountDiff mocks base method.
func (m *MockAdminStore) StoreAccountDiff(arg0 context.Context, arg1 *v2.PublicKey, arg2 []account.Modifier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAccountDiff", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreAccountDiff indicates an expected call of StoreAccountDiff.
func (mr *MockAdminStoreMockRecorder) StoreAccountDiff(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAccountDiff", reflect.TypeOf((*MockAdminStore)(nil).StoreAccountDiff), arg0, arg1, arg2)
}

// StoreLeaseDuration mocks base method.
func (m *MockAdminStore) StoreLeaseDuration(ctx context.Context, duration uint32, marketState order0.DurationBucketState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreLeaseDuration", ctx, duration, marketState)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreLeaseDuration indicates an expected call of StoreLeaseDuration.
func (mr *MockAdminStoreMockRecorder) StoreLeaseDuration(ctx, duration, marketState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreLeaseDuration", reflect.TypeOf((*MockAdminStore)(nil).StoreLeaseDuration), ctx, duration, marketState)
}

// StoreLifetimePackage mocks base method.
func (m *MockAdminStore) StoreLifetimePackage(ctx context.Context, pkg *chanenforcement.LifetimePackage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreLifetimePackage", ctx, pkg)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreLifetimePackage indicates an expected call of StoreLifetimePackage.
func (mr *MockAdminStoreMockRecorder) StoreLifetimePackage(ctx, pkg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreLifetimePackage", reflect.TypeOf((*MockAdminStore)(nil).StoreLifetimePackage), ctx, pkg)
}

// SubmitOrder mocks base method.
func (m *MockAdminStore) SubmitOrder(arg0 context.Context, arg1 order0.ServerOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitOrder indicates an expected call of SubmitOrder.
func (mr *MockAdminStoreMockRecorder) SubmitOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitOrder", reflect.TypeOf((*MockAdminStore)(nil).SubmitOrder), arg0, arg1)
}

// UpdateAccount mocks base method.
func (m *MockAdminStore) UpdateAccount(arg0 context.Context, arg1 *account.Account, arg2 ...account.Modifier) (*account.Account, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccount", varargs...)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockAdminStoreMockRecorder) UpdateAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockAdminStore)(nil).UpdateAccount), varargs...)
}

// UpdateAccountDiff mocks base method.
func (m *MockAdminStore) UpdateAccountDiff(ctx context.Context, accountKey *v2.PublicKey, modifiers []account.Modifier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountDiff", ctx, accountKey, modifiers)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountDiff indicates an expected call of UpdateAccountDiff.
func (mr *MockAdminStoreMockRecorder) UpdateAccountDiff(ctx, accountKey, modifiers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountDiff", reflect.TypeOf((*MockAdminStore)(nil).UpdateAccountDiff), ctx, accountKey, modifiers)
}

// UpdateAuctioneerAccount mocks base method.
func (m *MockAdminStore) UpdateAuctioneerAccount(arg0 context.Context, arg1 *account.Auctioneer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuctioneerAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuctioneerAccount indicates an expected call of UpdateAuctioneerAccount.
func (mr *MockAdminStoreMockRecorder) UpdateAuctioneerAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuctioneerAccount", reflect.TypeOf((*MockAdminStore)(nil).UpdateAuctioneerAccount), arg0, arg1)
}

// UpdateOrder mocks base method.
func (m *MockAdminStore) UpdateOrder(arg0 context.Context, arg1 order.Nonce, arg2 ...order0.Modifier) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrder", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockAdminStoreMockRecorder) UpdateOrder(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockAdminStore)(nil).UpdateOrder), varargs...)
}
