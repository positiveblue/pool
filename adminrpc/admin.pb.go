// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.6.1
// source: admin.proto

package adminrpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	auctioneerrpc "github.com/lightninglabs/pool/auctioneerrpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{0}
}

type EmptyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyResponse) Reset() {
	*x = EmptyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponse) ProtoMessage() {}

func (x *EmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponse.ProtoReflect.Descriptor instead.
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{1}
}

type MasterAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//OutPoint is the outpoint of the master account. If this is a zero outpoint,
	//then no account exists yet.
	Outpoint *OutPoint `protobuf:"bytes,1,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	//
	//Balance is the current balance of the master account.
	Balance int64 `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
	//
	//AuctioneerKey is the base key for the auctioneer, this is a static parameter
	//that's created when the system is initialized.
	KeyDescriptor *KeyDescriptor `protobuf:"bytes,3,opt,name=key_descriptor,json=keyDescriptor,proto3" json:"key_descriptor,omitempty"`
	//
	//BatchKey is the current batch key for the auctioneer's account, this will be
	//incremented by one each batch.
	BatchKey []byte `protobuf:"bytes,4,opt,name=batch_key,json=batchKey,proto3" json:"batch_key,omitempty"`
	// Whether the master account is pending its confirmation.
	Pending bool `protobuf:"varint,5,opt,name=pending,proto3" json:"pending,omitempty"`
}

func (x *MasterAccountResponse) Reset() {
	*x = MasterAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterAccountResponse) ProtoMessage() {}

func (x *MasterAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterAccountResponse.ProtoReflect.Descriptor instead.
func (*MasterAccountResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{2}
}

func (x *MasterAccountResponse) GetOutpoint() *OutPoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

func (x *MasterAccountResponse) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *MasterAccountResponse) GetKeyDescriptor() *KeyDescriptor {
	if x != nil {
		return x.KeyDescriptor
	}
	return nil
}

func (x *MasterAccountResponse) GetBatchKey() []byte {
	if x != nil {
		return x.BatchKey
	}
	return nil
}

func (x *MasterAccountResponse) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

type ConnectedTradersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//A map of all connected trader streams. The key is the hex-encoded LSAT ID
	//of a connected stream and the content is a list of all account keys that
	//trader connection has sent subscriptions for.
	Streams map[string]*PubKeyList `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConnectedTradersResponse) Reset() {
	*x = ConnectedTradersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectedTradersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectedTradersResponse) ProtoMessage() {}

func (x *ConnectedTradersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectedTradersResponse.ProtoReflect.Descriptor instead.
func (*ConnectedTradersResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{3}
}

func (x *ConnectedTradersResponse) GetStreams() map[string]*PubKeyList {
	if x != nil {
		return x.Streams
	}
	return nil
}

type PubKeyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The raw bytes of the key being identified.
	RawKeyBytes [][]byte `protobuf:"bytes,1,rep,name=raw_key_bytes,json=rawKeyBytes,proto3" json:"raw_key_bytes,omitempty"`
}

func (x *PubKeyList) Reset() {
	*x = PubKeyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubKeyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubKeyList) ProtoMessage() {}

func (x *PubKeyList) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubKeyList.ProtoReflect.Descriptor instead.
func (*PubKeyList) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{4}
}

func (x *PubKeyList) GetRawKeyBytes() [][]byte {
	if x != nil {
		return x.RawKeyBytes
	}
	return nil
}

type OutPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//Raw bytes representing the transaction id.
	Txid []byte `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	//
	//The index of the output on the transaction.
	OutputIndex uint32 `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
}

func (x *OutPoint) Reset() {
	*x = OutPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutPoint) ProtoMessage() {}

func (x *OutPoint) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutPoint.ProtoReflect.Descriptor instead.
func (*OutPoint) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{5}
}

func (x *OutPoint) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *OutPoint) GetOutputIndex() uint32 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

type KeyLocator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The family of key being identified.
	KeyFamily int32 `protobuf:"varint,1,opt,name=key_family,json=keyFamily,proto3" json:"key_family,omitempty"`
	// The precise index of the key being identified.
	KeyIndex int32 `protobuf:"varint,2,opt,name=key_index,json=keyIndex,proto3" json:"key_index,omitempty"`
}

func (x *KeyLocator) Reset() {
	*x = KeyLocator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyLocator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyLocator) ProtoMessage() {}

func (x *KeyLocator) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyLocator.ProtoReflect.Descriptor instead.
func (*KeyLocator) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{6}
}

func (x *KeyLocator) GetKeyFamily() int32 {
	if x != nil {
		return x.KeyFamily
	}
	return 0
}

func (x *KeyLocator) GetKeyIndex() int32 {
	if x != nil {
		return x.KeyIndex
	}
	return 0
}

type KeyDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The raw bytes of the key being identified.
	RawKeyBytes []byte `protobuf:"bytes,1,opt,name=raw_key_bytes,json=rawKeyBytes,proto3" json:"raw_key_bytes,omitempty"`
	//
	//The key locator that identifies which key to use for signing.
	KeyLoc *KeyLocator `protobuf:"bytes,2,opt,name=key_loc,json=keyLoc,proto3" json:"key_loc,omitempty"`
}

func (x *KeyDescriptor) Reset() {
	*x = KeyDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyDescriptor) ProtoMessage() {}

func (x *KeyDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyDescriptor.ProtoReflect.Descriptor instead.
func (*KeyDescriptor) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{7}
}

func (x *KeyDescriptor) GetRawKeyBytes() []byte {
	if x != nil {
		return x.RawKeyBytes
	}
	return nil
}

func (x *KeyDescriptor) GetKeyLoc() *KeyLocator {
	if x != nil {
		return x.KeyLoc
	}
	return nil
}

type ListOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicate whether all archived or all open orders should be returned.
	Archived bool `protobuf:"varint,1,opt,name=archived,proto3" json:"archived,omitempty"`
}

func (x *ListOrdersRequest) Reset() {
	*x = ListOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrdersRequest) ProtoMessage() {}

func (x *ListOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrdersRequest.ProtoReflect.Descriptor instead.
func (*ListOrdersRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{8}
}

func (x *ListOrdersRequest) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

type ListOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asks []*ServerAsk `protobuf:"bytes,1,rep,name=asks,proto3" json:"asks,omitempty"`
	Bids []*ServerBid `protobuf:"bytes,2,rep,name=bids,proto3" json:"bids,omitempty"`
}

func (x *ListOrdersResponse) Reset() {
	*x = ListOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrdersResponse) ProtoMessage() {}

func (x *ListOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrdersResponse.ProtoReflect.Descriptor instead.
func (*ListOrdersResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{9}
}

func (x *ListOrdersResponse) GetAsks() []*ServerAsk {
	if x != nil {
		return x.Asks
	}
	return nil
}

func (x *ListOrdersResponse) GetBids() []*ServerBid {
	if x != nil {
		return x.Bids
	}
	return nil
}

type ServerAsk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The common fields shared between both ask and bid order types.
	Details *auctioneerrpc.ServerOrder `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	//
	//The number of blocks the liquidity provider is willing to provide the
	//channel funds for.
	LeaseDurationBlocks uint32 `protobuf:"varint,2,opt,name=lease_duration_blocks,json=leaseDurationBlocks,proto3" json:"lease_duration_blocks,omitempty"`
	//
	//The version of the order format that is used. Will be increased once new
	//features are added.
	Version uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	//
	//The state the order currently is in.
	State auctioneerrpc.OrderState `protobuf:"varint,4,opt,name=state,proto3,enum=poolrpc.OrderState" json:"state,omitempty"`
	//
	//The user agent string this order was submitted with.
	UserAgent string `protobuf:"bytes,5,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
}

func (x *ServerAsk) Reset() {
	*x = ServerAsk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerAsk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerAsk) ProtoMessage() {}

func (x *ServerAsk) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerAsk.ProtoReflect.Descriptor instead.
func (*ServerAsk) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{10}
}

func (x *ServerAsk) GetDetails() *auctioneerrpc.ServerOrder {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ServerAsk) GetLeaseDurationBlocks() uint32 {
	if x != nil {
		return x.LeaseDurationBlocks
	}
	return 0
}

func (x *ServerAsk) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ServerAsk) GetState() auctioneerrpc.OrderState {
	if x != nil {
		return x.State
	}
	return auctioneerrpc.OrderState_ORDER_SUBMITTED
}

func (x *ServerAsk) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

type ServerBid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The common fields shared between both ask and bid order types.
	Details *auctioneerrpc.ServerOrder `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	//
	//Required number of blocks that a channel opened as a result of this bid
	//should be kept open.
	LeaseDurationBlocks uint32 `protobuf:"varint,2,opt,name=lease_duration_blocks,json=leaseDurationBlocks,proto3" json:"lease_duration_blocks,omitempty"`
	//
	//The version of the order format that is used. Will be increased once new
	//features are added.
	Version uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	//
	//The state the order currently is in.
	State auctioneerrpc.OrderState `protobuf:"varint,4,opt,name=state,proto3,enum=poolrpc.OrderState" json:"state,omitempty"`
	//
	//The minimum node tier this order should be matched with. Only asks backed by
	//a node this tier or higher will be eligible for matching with this bid.
	MinNodeTier auctioneerrpc.NodeTier `protobuf:"varint,5,opt,name=min_node_tier,json=minNodeTier,proto3,enum=poolrpc.NodeTier" json:"min_node_tier,omitempty"`
	//
	//The user agent string this order was submitted with.
	UserAgent string `protobuf:"bytes,6,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	//
	//The initial self balance that was chosen by the user for this bid.
	SelfChanBalance uint64 `protobuf:"varint,7,opt,name=self_chan_balance,json=selfChanBalance,proto3" json:"self_chan_balance,omitempty"`
	//
	//Whether this bid was submitted as a sidecar order.
	IsSidecar bool `protobuf:"varint,8,opt,name=is_sidecar,json=isSidecar,proto3" json:"is_sidecar,omitempty"`
}

func (x *ServerBid) Reset() {
	*x = ServerBid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerBid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerBid) ProtoMessage() {}

func (x *ServerBid) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerBid.ProtoReflect.Descriptor instead.
func (*ServerBid) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{11}
}

func (x *ServerBid) GetDetails() *auctioneerrpc.ServerOrder {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ServerBid) GetLeaseDurationBlocks() uint32 {
	if x != nil {
		return x.LeaseDurationBlocks
	}
	return 0
}

func (x *ServerBid) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ServerBid) GetState() auctioneerrpc.OrderState {
	if x != nil {
		return x.State
	}
	return auctioneerrpc.OrderState_ORDER_SUBMITTED
}

func (x *ServerBid) GetMinNodeTier() auctioneerrpc.NodeTier {
	if x != nil {
		return x.MinNodeTier
	}
	return auctioneerrpc.NodeTier_TIER_DEFAULT
}

func (x *ServerBid) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *ServerBid) GetSelfChanBalance() uint64 {
	if x != nil {
		return x.SelfChanBalance
	}
	return 0
}

func (x *ServerBid) GetIsSidecar() bool {
	if x != nil {
		return x.IsSidecar
	}
	return false
}

type AccountDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifying key of the account to retrieve.
	AccountKey []byte `protobuf:"bytes,1,opt,name=account_key,json=accountKey,proto3" json:"account_key,omitempty"`
	//
	//Whether the account diff, if any, should be retrieved instead of the main
	//account state.
	IncludeDiff bool `protobuf:"varint,2,opt,name=include_diff,json=includeDiff,proto3" json:"include_diff,omitempty"`
}

func (x *AccountDetailsRequest) Reset() {
	*x = AccountDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountDetailsRequest) ProtoMessage() {}

func (x *AccountDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountDetailsRequest.ProtoReflect.Descriptor instead.
func (*AccountDetailsRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{12}
}

func (x *AccountDetailsRequest) GetAccountKey() []byte {
	if x != nil {
		return x.AccountKey
	}
	return nil
}

func (x *AccountDetailsRequest) GetIncludeDiff() bool {
	if x != nil {
		return x.IncludeDiff
	}
	return false
}

type EditAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifying key of the account to edit details of.
	AccountKey []byte `protobuf:"bytes,1,opt,name=account_key,json=accountKey,proto3" json:"account_key,omitempty"`
	//
	//Whether the account diff, if any, should be edited instead of the main
	//account state.
	EditDiff bool `protobuf:"varint,2,opt,name=edit_diff,json=editDiff,proto3" json:"edit_diff,omitempty"`
	// The new value of the account.
	Value uint64 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	//
	//Determines how many times we should rotate the account's current batch key.
	//Negative integers decrement the key, while positive increments it.
	RotateBatchKey int32 `protobuf:"varint,4,opt,name=rotate_batch_key,json=rotateBatchKey,proto3" json:"rotate_batch_key,omitempty"`
	// The new outpoint of the account.
	Outpoint *OutPoint `protobuf:"bytes,5,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	// The new latest transaction of the account.
	LatestTx []byte `protobuf:"bytes,6,opt,name=latest_tx,json=latestTx,proto3" json:"latest_tx,omitempty"`
}

func (x *EditAccountRequest) Reset() {
	*x = EditAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditAccountRequest) ProtoMessage() {}

func (x *EditAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditAccountRequest.ProtoReflect.Descriptor instead.
func (*EditAccountRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{13}
}

func (x *EditAccountRequest) GetAccountKey() []byte {
	if x != nil {
		return x.AccountKey
	}
	return nil
}

func (x *EditAccountRequest) GetEditDiff() bool {
	if x != nil {
		return x.EditDiff
	}
	return false
}

func (x *EditAccountRequest) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *EditAccountRequest) GetRotateBatchKey() int32 {
	if x != nil {
		return x.RotateBatchKey
	}
	return 0
}

func (x *EditAccountRequest) GetOutpoint() *OutPoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

func (x *EditAccountRequest) GetLatestTx() []byte {
	if x != nil {
		return x.LatestTx
	}
	return nil
}

type DeleteAccountDiffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifying key of the account to delete the staged diff of.
	AccountKey []byte `protobuf:"bytes,1,opt,name=account_key,json=accountKey,proto3" json:"account_key,omitempty"`
}

func (x *DeleteAccountDiffRequest) Reset() {
	*x = DeleteAccountDiffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccountDiffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountDiffRequest) ProtoMessage() {}

func (x *DeleteAccountDiffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountDiffRequest.ProtoReflect.Descriptor instead.
func (*DeleteAccountDiffRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteAccountDiffRequest) GetAccountKey() []byte {
	if x != nil {
		return x.AccountKey
	}
	return nil
}

type ListAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (x *ListAccountsResponse) Reset() {
	*x = ListAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsResponse) ProtoMessage() {}

func (x *ListAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsResponse.ProtoReflect.Descriptor instead.
func (*ListAccountsResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{15}
}

func (x *ListAccountsResponse) GetAccounts() []*Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The value of the account in satoshis. Must match the amount of the
	//account_point output.
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	//
	//The block height at which the account should expire.
	Expiry uint32 `protobuf:"varint,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
	//
	//The trader's account key.
	TraderKey []byte `protobuf:"bytes,3,opt,name=trader_key,json=traderKey,proto3" json:"trader_key,omitempty"`
	//
	//The long term auctioneer's account key.
	AuctioneerKey []byte `protobuf:"bytes,4,opt,name=auctioneer_key,json=auctioneerKey,proto3" json:"auctioneer_key,omitempty"`
	//
	//The current batch key used to create the account output.
	BatchKey []byte `protobuf:"bytes,5,opt,name=batch_key,json=batchKey,proto3" json:"batch_key,omitempty"`
	//
	//The current state of the account as the auctioneer sees it.
	State auctioneerrpc.AuctionAccountState `protobuf:"varint,6,opt,name=state,proto3,enum=poolrpc.AuctionAccountState" json:"state,omitempty"`
	//
	//The block height of the last change to the account's output. Can be used to
	//scan the chain for the output's spend state more efficiently.
	HeightHint uint32 `protobuf:"varint,7,opt,name=height_hint,json=heightHint,proto3" json:"height_hint,omitempty"`
	//
	//Transaction output of the account. Depending on the state of the account,
	//this output might have been spent.
	Outpoint string `protobuf:"bytes,8,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	//
	//The latest transaction of an account. This is only known by the auctioneer
	//after the account has met its initial funding confirmation.
	LatestTx []byte `protobuf:"bytes,9,opt,name=latest_tx,json=latestTx,proto3" json:"latest_tx,omitempty"`
	//
	//The user agent string this order was submitted with.
	UserAgent string `protobuf:"bytes,10,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{16}
}

func (x *Account) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Account) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *Account) GetTraderKey() []byte {
	if x != nil {
		return x.TraderKey
	}
	return nil
}

func (x *Account) GetAuctioneerKey() []byte {
	if x != nil {
		return x.AuctioneerKey
	}
	return nil
}

func (x *Account) GetBatchKey() []byte {
	if x != nil {
		return x.BatchKey
	}
	return nil
}

func (x *Account) GetState() auctioneerrpc.AuctionAccountState {
	if x != nil {
		return x.State
	}
	return auctioneerrpc.AuctionAccountState_STATE_PENDING_OPEN
}

func (x *Account) GetHeightHint() uint32 {
	if x != nil {
		return x.HeightHint
	}
	return 0
}

func (x *Account) GetOutpoint() string {
	if x != nil {
		return x.Outpoint
	}
	return ""
}

func (x *Account) GetLatestTx() []byte {
	if x != nil {
		return x.LatestTx
	}
	return nil
}

func (x *Account) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

type AuctionStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the current pending batch.
	PendingBatchId []byte `protobuf:"bytes,1,opt,name=pending_batch_id,json=pendingBatchId,proto3" json:"pending_batch_id,omitempty"`
	// The ID of the current, not yet published batch.
	CurrentBatchId []byte `protobuf:"bytes,2,opt,name=current_batch_id,json=currentBatchId,proto3" json:"current_batch_id,omitempty"`
	// The ID of the last published batch.
	LastBatchId []byte `protobuf:"bytes,3,opt,name=last_batch_id,json=lastBatchId,proto3" json:"last_batch_id,omitempty"`
	//
	//Indicates whether timed ticks are currently being used to start new batches.
	//If this is false, it means batch execution has been paused.
	BatchTickerActive bool `protobuf:"varint,4,opt,name=batch_ticker_active,json=batchTickerActive,proto3" json:"batch_ticker_active,omitempty"`
	//
	//The unix timestamp of the last timed tick. This doesn't necessarily mean
	//that the tick also resulted in a batch being executed, for example if the
	//batch ticker was paused at the time of the timed tick.
	LastTimedTick uint64 `protobuf:"varint,5,opt,name=last_timed_tick,json=lastTimedTick,proto3" json:"last_timed_tick,omitempty"`
	//
	//The number of seconds it will approximately take until the next timed tick
	//is fired. The tick will be fired in any case but it might not result in a
	//batch being executed if batch execution is currently paused.
	SecondsToNextTick uint64 `protobuf:"varint,6,opt,name=seconds_to_next_tick,json=secondsToNextTick,proto3" json:"seconds_to_next_tick,omitempty"`
	//
	//The string representation of the current auctioneer's state.
	AuctionState string `protobuf:"bytes,7,opt,name=auction_state,json=auctionState,proto3" json:"auction_state,omitempty"`
	//
	//The set of lease durations the market is currently accepting and the state
	//the duration buckets currently are in.
	LeaseDurationBuckets map[uint32]auctioneerrpc.DurationBucketState `protobuf:"bytes,8,rep,name=lease_duration_buckets,json=leaseDurationBuckets,proto3" json:"lease_duration_buckets,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=poolrpc.DurationBucketState"`
	//
	//The current server state as exposed through the k8s status endpoint.
	ServerState string `protobuf:"bytes,9,opt,name=server_state,json=serverState,proto3" json:"server_state,omitempty"`
}

func (x *AuctionStatusResponse) Reset() {
	*x = AuctionStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuctionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuctionStatusResponse) ProtoMessage() {}

func (x *AuctionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuctionStatusResponse.ProtoReflect.Descriptor instead.
func (*AuctionStatusResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{17}
}

func (x *AuctionStatusResponse) GetPendingBatchId() []byte {
	if x != nil {
		return x.PendingBatchId
	}
	return nil
}

func (x *AuctionStatusResponse) GetCurrentBatchId() []byte {
	if x != nil {
		return x.CurrentBatchId
	}
	return nil
}

func (x *AuctionStatusResponse) GetLastBatchId() []byte {
	if x != nil {
		return x.LastBatchId
	}
	return nil
}

func (x *AuctionStatusResponse) GetBatchTickerActive() bool {
	if x != nil {
		return x.BatchTickerActive
	}
	return false
}

func (x *AuctionStatusResponse) GetLastTimedTick() uint64 {
	if x != nil {
		return x.LastTimedTick
	}
	return 0
}

func (x *AuctionStatusResponse) GetSecondsToNextTick() uint64 {
	if x != nil {
		return x.SecondsToNextTick
	}
	return 0
}

func (x *AuctionStatusResponse) GetAuctionState() string {
	if x != nil {
		return x.AuctionState
	}
	return ""
}

func (x *AuctionStatusResponse) GetLeaseDurationBuckets() map[uint32]auctioneerrpc.DurationBucketState {
	if x != nil {
		return x.LeaseDurationBuckets
	}
	return nil
}

func (x *AuctionStatusResponse) GetServerState() string {
	if x != nil {
		return x.ServerState
	}
	return ""
}

type ListBatchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//A list of all batch IDs known to exist, listed in ascending order (oldest
	//batch first) with the last item being the current, not yet published batch.
	Batches [][]byte `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches,omitempty"`
}

func (x *ListBatchesResponse) Reset() {
	*x = ListBatchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBatchesResponse) ProtoMessage() {}

func (x *ListBatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBatchesResponse.ProtoReflect.Descriptor instead.
func (*ListBatchesResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{18}
}

func (x *ListBatchesResponse) GetBatches() [][]byte {
	if x != nil {
		return x.Batches
	}
	return nil
}

type FeeReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The diffs of all accounts involved in the batch.
	AccountDiffs map[string]*AccountDiff `protobuf:"bytes,1,rep,name=account_diffs,json=accountDiffs,proto3" json:"account_diffs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The total number of satoshis we earned as the auctioneer.
	AuctioneerFeesAccrued uint64 `protobuf:"varint,2,opt,name=auctioneer_fees_accrued,json=auctioneerFeesAccrued,proto3" json:"auctioneer_fees_accrued,omitempty"`
}

func (x *FeeReport) Reset() {
	*x = FeeReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeReport) ProtoMessage() {}

func (x *FeeReport) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeReport.ProtoReflect.Descriptor instead.
func (*FeeReport) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{19}
}

func (x *FeeReport) GetAccountDiffs() map[string]*AccountDiff {
	if x != nil {
		return x.AccountDiffs
	}
	return nil
}

func (x *FeeReport) GetAuctioneerFeesAccrued() uint64 {
	if x != nil {
		return x.AuctioneerFeesAccrued
	}
	return 0
}

type AccountDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The account key this diff refers to.
	AccountKey []byte `protobuf:"bytes,1,opt,name=account_key,json=accountKey,proto3" json:"account_key,omitempty"`
	// The balance the trader account started with.
	StartingBalance uint64 `protobuf:"varint,2,opt,name=starting_balance,json=startingBalance,proto3" json:"starting_balance,omitempty"`
	// The ending balance of the trader's account.
	EndingBalance uint64 `protobuf:"varint,3,opt,name=ending_balance,json=endingBalance,proto3" json:"ending_balance,omitempty"`
	// The total amount of fees a trader paid to the venue.
	TotalExecFeesPaid uint64 `protobuf:"varint,4,opt,name=total_exec_fees_paid,json=totalExecFeesPaid,proto3" json:"total_exec_fees_paid,omitempty"`
	//
	//The total amount of fees the trader paid to purchase any channels in this
	//batch.
	TotalTakerFeesPaid uint64 `protobuf:"varint,5,opt,name=total_taker_fees_paid,json=totalTakerFeesPaid,proto3" json:"total_taker_fees_paid,omitempty"`
	//
	//The total amount of fees the trader gained by selling channels in this
	//batch.
	TotalMakerFeesPaid uint64 `protobuf:"varint,6,opt,name=total_maker_fees_paid,json=totalMakerFeesPaid,proto3" json:"total_maker_fees_paid,omitempty"`
	//
	//The number of new channels that were created for one account in a batch.
	//This is needed to calculate the chain fees that need to be paid from that
	//account.
	NumChansCreated uint32 `protobuf:"varint,7,opt,name=num_chans_created,json=numChansCreated,proto3" json:"num_chans_created,omitempty"`
}

func (x *AccountDiff) Reset() {
	*x = AccountDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountDiff) ProtoMessage() {}

func (x *AccountDiff) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountDiff.ProtoReflect.Descriptor instead.
func (*AccountDiff) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{20}
}

func (x *AccountDiff) GetAccountKey() []byte {
	if x != nil {
		return x.AccountKey
	}
	return nil
}

func (x *AccountDiff) GetStartingBalance() uint64 {
	if x != nil {
		return x.StartingBalance
	}
	return 0
}

func (x *AccountDiff) GetEndingBalance() uint64 {
	if x != nil {
		return x.EndingBalance
	}
	return 0
}

func (x *AccountDiff) GetTotalExecFeesPaid() uint64 {
	if x != nil {
		return x.TotalExecFeesPaid
	}
	return 0
}

func (x *AccountDiff) GetTotalTakerFeesPaid() uint64 {
	if x != nil {
		return x.TotalTakerFeesPaid
	}
	return 0
}

func (x *AccountDiff) GetTotalMakerFeesPaid() uint64 {
	if x != nil {
		return x.TotalMakerFeesPaid
	}
	return 0
}

func (x *AccountDiff) GetNumChansCreated() uint32 {
	if x != nil {
		return x.NumChansCreated
	}
	return 0
}

type ListBansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//A map of all banned accounts, keyed by the trader's account key (hex
	//encoded).
	BannedAccounts map[string]*BanInfo `protobuf:"bytes,1,rep,name=banned_accounts,json=bannedAccounts,proto3" json:"banned_accounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//
	//A map of all banned nodes, keyed by the node's identity pubkey (hex
	//encoded).
	BannedNodes map[string]*BanInfo `protobuf:"bytes,2,rep,name=banned_nodes,json=bannedNodes,proto3" json:"banned_nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListBansResponse) Reset() {
	*x = ListBansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBansResponse) ProtoMessage() {}

func (x *ListBansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBansResponse.ProtoReflect.Descriptor instead.
func (*ListBansResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{21}
}

func (x *ListBansResponse) GetBannedAccounts() map[string]*BanInfo {
	if x != nil {
		return x.BannedAccounts
	}
	return nil
}

func (x *ListBansResponse) GetBannedNodes() map[string]*BanInfo {
	if x != nil {
		return x.BannedNodes
	}
	return nil
}

type BanInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The height at which the ban begins to apply.
	Height uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// The number of blocks the ban will last for once applied.
	Duration uint32 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *BanInfo) Reset() {
	*x = BanInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanInfo) ProtoMessage() {}

func (x *BanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanInfo.ProtoReflect.Descriptor instead.
func (*BanInfo) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{22}
}

func (x *BanInfo) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BanInfo) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type RemoveBanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Ban:
	//	*RemoveBanRequest_Account
	//	*RemoveBanRequest_Node
	Ban isRemoveBanRequest_Ban `protobuf_oneof:"ban"`
}

func (x *RemoveBanRequest) Reset() {
	*x = RemoveBanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBanRequest) ProtoMessage() {}

func (x *RemoveBanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBanRequest.ProtoReflect.Descriptor instead.
func (*RemoveBanRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{23}
}

func (m *RemoveBanRequest) GetBan() isRemoveBanRequest_Ban {
	if m != nil {
		return m.Ban
	}
	return nil
}

func (x *RemoveBanRequest) GetAccount() []byte {
	if x, ok := x.GetBan().(*RemoveBanRequest_Account); ok {
		return x.Account
	}
	return nil
}

func (x *RemoveBanRequest) GetNode() []byte {
	if x, ok := x.GetBan().(*RemoveBanRequest_Node); ok {
		return x.Node
	}
	return nil
}

type isRemoveBanRequest_Ban interface {
	isRemoveBanRequest_Ban()
}

type RemoveBanRequest_Account struct {
	// Remove the ban of an account, identified by the trader's account key.
	Account []byte `protobuf:"bytes,1,opt,name=account,proto3,oneof"`
}

type RemoveBanRequest_Node struct {
	// Remove the ban of a node, identified by the node's identity pubkey.
	Node []byte `protobuf:"bytes,2,opt,name=node,proto3,oneof"`
}

func (*RemoveBanRequest_Account) isRemoveBanRequest_Ban() {}

func (*RemoveBanRequest_Node) isRemoveBanRequest_Ban() {}

type BanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Ban:
	//	*BanRequest_Account
	//	*BanRequest_Node
	Ban isBanRequest_Ban `protobuf_oneof:"ban"`
	// The number of blocks the ban will last for once applied.
	Duration uint32 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *BanRequest) Reset() {
	*x = BanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanRequest) ProtoMessage() {}

func (x *BanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanRequest.ProtoReflect.Descriptor instead.
func (*BanRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{24}
}

func (m *BanRequest) GetBan() isBanRequest_Ban {
	if m != nil {
		return m.Ban
	}
	return nil
}

func (x *BanRequest) GetAccount() []byte {
	if x, ok := x.GetBan().(*BanRequest_Account); ok {
		return x.Account
	}
	return nil
}

func (x *BanRequest) GetNode() []byte {
	if x, ok := x.GetBan().(*BanRequest_Node); ok {
		return x.Node
	}
	return nil
}

func (x *BanRequest) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type isBanRequest_Ban interface {
	isBanRequest_Ban()
}

type BanRequest_Account struct {
	// Ban an account, identified by the trader's account key.
	Account []byte `protobuf:"bytes,1,opt,name=account,proto3,oneof"`
}

type BanRequest_Node struct {
	// Ban a node, identified by the node's identity pubkey.
	Node []byte `protobuf:"bytes,2,opt,name=node,proto3,oneof"`
}

func (*BanRequest_Account) isBanRequest_Ban() {}

func (*BanRequest_Node) isBanRequest_Ban() {}

type AdminMatchedOrderSnapshots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of matched order snapshots.
	Snapshots []*AdminMatchedOrderSnapshot `protobuf:"bytes,1,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
}

func (x *AdminMatchedOrderSnapshots) Reset() {
	*x = AdminMatchedOrderSnapshots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminMatchedOrderSnapshots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminMatchedOrderSnapshots) ProtoMessage() {}

func (x *AdminMatchedOrderSnapshots) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminMatchedOrderSnapshots.ProtoReflect.Descriptor instead.
func (*AdminMatchedOrderSnapshots) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{25}
}

func (x *AdminMatchedOrderSnapshots) GetSnapshots() []*AdminMatchedOrderSnapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

type AdminMatchedOrderSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full ask order that was matched.
	Ask *auctioneerrpc.ServerAsk `protobuf:"bytes,1,opt,name=ask,proto3" json:"ask,omitempty"`
	// The full bid order that was matched.
	Bid *auctioneerrpc.ServerBid `protobuf:"bytes,2,opt,name=bid,proto3" json:"bid,omitempty"`
	// The fixed rate premium that was matched, expressed in parts-ber-billion.
	MatchingRate uint32 `protobuf:"varint,3,opt,name=matching_rate,json=matchingRate,proto3" json:"matching_rate,omitempty"`
	// The total number of satoshis that were bought.
	TotalSatsCleared uint64 `protobuf:"varint,4,opt,name=total_sats_cleared,json=totalSatsCleared,proto3" json:"total_sats_cleared,omitempty"`
	// The total number of units that were matched.
	UnitsMatched uint32 `protobuf:"varint,5,opt,name=units_matched,json=unitsMatched,proto3" json:"units_matched,omitempty"`
}

func (x *AdminMatchedOrderSnapshot) Reset() {
	*x = AdminMatchedOrderSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminMatchedOrderSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminMatchedOrderSnapshot) ProtoMessage() {}

func (x *AdminMatchedOrderSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminMatchedOrderSnapshot.ProtoReflect.Descriptor instead.
func (*AdminMatchedOrderSnapshot) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{26}
}

func (x *AdminMatchedOrderSnapshot) GetAsk() *auctioneerrpc.ServerAsk {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *AdminMatchedOrderSnapshot) GetBid() *auctioneerrpc.ServerBid {
	if x != nil {
		return x.Bid
	}
	return nil
}

func (x *AdminMatchedOrderSnapshot) GetMatchingRate() uint32 {
	if x != nil {
		return x.MatchingRate
	}
	return 0
}

func (x *AdminMatchedOrderSnapshot) GetTotalSatsCleared() uint64 {
	if x != nil {
		return x.TotalSatsCleared
	}
	return 0
}

func (x *AdminMatchedOrderSnapshot) GetUnitsMatched() uint32 {
	if x != nil {
		return x.UnitsMatched
	}
	return 0
}

type AdminBatchSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the batch.
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// The unique identifier of the batch.
	BatchId []byte `protobuf:"bytes,2,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// The unique identifier of the prior batch.
	PrevBatchId []byte `protobuf:"bytes,3,opt,name=prev_batch_id,json=prevBatchId,proto3" json:"prev_batch_id,omitempty"`
	//
	//The uniform clearing price rate in parts per billion of the batch, mapped
	//to the duration of the sub batch.
	ClearingPriceRate map[uint32]uint32 `protobuf:"bytes,4,rep,name=clearing_price_rate,json=clearingPriceRate,proto3" json:"clearing_price_rate,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The map of all sub batch lease durations and the orders matched in them.
	MatchedOrders map[uint32]*AdminMatchedOrderSnapshots `protobuf:"bytes,5,rep,name=matched_orders,json=matchedOrders,proto3" json:"matched_orders,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The txid of the batch transaction.
	BatchTxId string `protobuf:"bytes,7,opt,name=batch_tx_id,json=batchTxId,proto3" json:"batch_tx_id,omitempty"`
	// The batch transaction including all witness data.
	BatchTx []byte `protobuf:"bytes,6,opt,name=batch_tx,json=batchTx,proto3" json:"batch_tx,omitempty"`
	// The unix timestamp in nanoseconds the batch was made.
	CreationTimestampNs uint64 `protobuf:"varint,8,opt,name=creation_timestamp_ns,json=creationTimestampNs,proto3" json:"creation_timestamp_ns,omitempty"`
}

func (x *AdminBatchSnapshotResponse) Reset() {
	*x = AdminBatchSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminBatchSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminBatchSnapshotResponse) ProtoMessage() {}

func (x *AdminBatchSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminBatchSnapshotResponse.ProtoReflect.Descriptor instead.
func (*AdminBatchSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{27}
}

func (x *AdminBatchSnapshotResponse) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *AdminBatchSnapshotResponse) GetBatchId() []byte {
	if x != nil {
		return x.BatchId
	}
	return nil
}

func (x *AdminBatchSnapshotResponse) GetPrevBatchId() []byte {
	if x != nil {
		return x.PrevBatchId
	}
	return nil
}

func (x *AdminBatchSnapshotResponse) GetClearingPriceRate() map[uint32]uint32 {
	if x != nil {
		return x.ClearingPriceRate
	}
	return nil
}

func (x *AdminBatchSnapshotResponse) GetMatchedOrders() map[uint32]*AdminMatchedOrderSnapshots {
	if x != nil {
		return x.MatchedOrders
	}
	return nil
}

func (x *AdminBatchSnapshotResponse) GetBatchTxId() string {
	if x != nil {
		return x.BatchTxId
	}
	return ""
}

func (x *AdminBatchSnapshotResponse) GetBatchTx() []byte {
	if x != nil {
		return x.BatchTx
	}
	return nil
}

func (x *AdminBatchSnapshotResponse) GetCreationTimestampNs() uint64 {
	if x != nil {
		return x.CreationTimestampNs
	}
	return 0
}

type RemoveReservationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reservation:
	//	*RemoveReservationRequest_TraderKey
	//	*RemoveReservationRequest_Lsat
	Reservation isRemoveReservationRequest_Reservation `protobuf_oneof:"reservation"`
}

func (x *RemoveReservationRequest) Reset() {
	*x = RemoveReservationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveReservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveReservationRequest) ProtoMessage() {}

func (x *RemoveReservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveReservationRequest.ProtoReflect.Descriptor instead.
func (*RemoveReservationRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{28}
}

func (m *RemoveReservationRequest) GetReservation() isRemoveReservationRequest_Reservation {
	if m != nil {
		return m.Reservation
	}
	return nil
}

func (x *RemoveReservationRequest) GetTraderKey() []byte {
	if x, ok := x.GetReservation().(*RemoveReservationRequest_TraderKey); ok {
		return x.TraderKey
	}
	return nil
}

func (x *RemoveReservationRequest) GetLsat() []byte {
	if x, ok := x.GetReservation().(*RemoveReservationRequest_Lsat); ok {
		return x.Lsat
	}
	return nil
}

type isRemoveReservationRequest_Reservation interface {
	isRemoveReservationRequest_Reservation()
}

type RemoveReservationRequest_TraderKey struct {
	//
	//Remove the reservation of an account, identified by the trader's account
	//key.
	TraderKey []byte `protobuf:"bytes,1,opt,name=trader_key,json=traderKey,proto3,oneof"`
}

type RemoveReservationRequest_Lsat struct {
	// Remove the reservation of an LSAT, identified by the LSAT's token ID.
	Lsat []byte `protobuf:"bytes,2,opt,name=lsat,proto3,oneof"`
}

func (*RemoveReservationRequest_TraderKey) isRemoveReservationRequest_Reservation() {}

func (*RemoveReservationRequest_Lsat) isRemoveReservationRequest_Reservation() {}

type FundingConflictsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//A map that is keyed by the hex encoded node ID of the reporting node and a
	//list of all conflicts that node reported.
	Conflicts map[string]*ConflictList `protobuf:"bytes,1,rep,name=conflicts,proto3" json:"conflicts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FundingConflictsResponse) Reset() {
	*x = FundingConflictsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundingConflictsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundingConflictsResponse) ProtoMessage() {}

func (x *FundingConflictsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundingConflictsResponse.ProtoReflect.Descriptor instead.
func (*FundingConflictsResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{29}
}

func (x *FundingConflictsResponse) GetConflicts() map[string]*ConflictList {
	if x != nil {
		return x.Conflicts
	}
	return nil
}

type ConflictList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of all reported conflicts.
	Conflicts []*Conflict `protobuf:"bytes,1,rep,name=conflicts,proto3" json:"conflicts,omitempty"`
}

func (x *ConflictList) Reset() {
	*x = ConflictList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConflictList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConflictList) ProtoMessage() {}

func (x *ConflictList) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConflictList.ProtoReflect.Descriptor instead.
func (*ConflictList) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{30}
}

func (x *ConflictList) GetConflicts() []*Conflict {
	if x != nil {
		return x.Conflicts
	}
	return nil
}

type Conflict struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hex encoded node ID of the subject of the report.
	Subject string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// The reported reason for the conflict.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// The unix timestamp in seconds of the time the conflict was reported.
	ReportTimestamp int64 `protobuf:"varint,3,opt,name=report_timestamp,json=reportTimestamp,proto3" json:"report_timestamp,omitempty"`
}

func (x *Conflict) Reset() {
	*x = Conflict{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conflict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conflict) ProtoMessage() {}

func (x *Conflict) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conflict.ProtoReflect.Descriptor instead.
func (*Conflict) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{31}
}

func (x *Conflict) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Conflict) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Conflict) GetReportTimestamp() int64 {
	if x != nil {
		return x.ReportTimestamp
	}
	return 0
}

type RatingQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node to query a rating for.
	NodeKey []byte `protobuf:"bytes,1,opt,name=node_key,json=nodeKey,proto3" json:"node_key,omitempty"`
}

func (x *RatingQueryRequest) Reset() {
	*x = RatingQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingQueryRequest) ProtoMessage() {}

func (x *RatingQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingQueryRequest.ProtoReflect.Descriptor instead.
func (*RatingQueryRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{32}
}

func (x *RatingQueryRequest) GetNodeKey() []byte {
	if x != nil {
		return x.NodeKey
	}
	return nil
}

type RatingQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node this rating belongs to.
	NodeKey []byte `protobuf:"bytes,1,opt,name=node_key,json=nodeKey,proto3" json:"node_key,omitempty"`
	// The ratings tier this node belongs to. zero means they aren't ranked.
	NodeTier uint32 `protobuf:"varint,2,opt,name=node_tier,json=nodeTier,proto3" json:"node_tier,omitempty"`
}

func (x *RatingQueryResponse) Reset() {
	*x = RatingQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingQueryResponse) ProtoMessage() {}

func (x *RatingQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingQueryResponse.ProtoReflect.Descriptor instead.
func (*RatingQueryResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{33}
}

func (x *RatingQueryResponse) GetNodeKey() []byte {
	if x != nil {
		return x.NodeKey
	}
	return nil
}

func (x *RatingQueryResponse) GetNodeTier() uint32 {
	if x != nil {
		return x.NodeTier
	}
	return 0
}

type ModifyRatingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node this rating belongs to.
	NodeKey []byte `protobuf:"bytes,1,opt,name=node_key,json=nodeKey,proto3" json:"node_key,omitempty"`
	// The new node tier this node should be placed in.
	NewNodeTier uint32 `protobuf:"varint,2,opt,name=new_node_tier,json=newNodeTier,proto3" json:"new_node_tier,omitempty"`
}

func (x *ModifyRatingRequest) Reset() {
	*x = ModifyRatingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyRatingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyRatingRequest) ProtoMessage() {}

func (x *ModifyRatingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyRatingRequest.ProtoReflect.Descriptor instead.
func (*ModifyRatingRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{34}
}

func (x *ModifyRatingRequest) GetNodeKey() []byte {
	if x != nil {
		return x.NodeKey
	}
	return nil
}

func (x *ModifyRatingRequest) GetNewNodeTier() uint32 {
	if x != nil {
		return x.NewNodeTier
	}
	return 0
}

type ModifyRatingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModifyRatingResponse) Reset() {
	*x = ModifyRatingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyRatingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyRatingResponse) ProtoMessage() {}

func (x *ModifyRatingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyRatingResponse.ProtoReflect.Descriptor instead.
func (*ModifyRatingResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{35}
}

type BumpBatchFeeRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request the next batch transaction to bump the effective fee rate of all
	// unconfirmed batches to a fee estimate for this confirmation target.
	ConfTarget uint32 `protobuf:"varint,1,opt,name=conf_target,json=confTarget,proto3" json:"conf_target,omitempty"`
	// Request the next batch transaction to bump the effective fee rate of all
	// unconfirmed batches to this exact fee rate.
	FeeRateSatPerKw uint32 `protobuf:"varint,2,opt,name=fee_rate_sat_per_kw,json=feeRateSatPerKw,proto3" json:"fee_rate_sat_per_kw,omitempty"`
}

func (x *BumpBatchFeeRateRequest) Reset() {
	*x = BumpBatchFeeRateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BumpBatchFeeRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BumpBatchFeeRateRequest) ProtoMessage() {}

func (x *BumpBatchFeeRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BumpBatchFeeRateRequest.ProtoReflect.Descriptor instead.
func (*BumpBatchFeeRateRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{36}
}

func (x *BumpBatchFeeRateRequest) GetConfTarget() uint32 {
	if x != nil {
		return x.ConfTarget
	}
	return 0
}

func (x *BumpBatchFeeRateRequest) GetFeeRateSatPerKw() uint32 {
	if x != nil {
		return x.FeeRateSatPerKw
	}
	return 0
}

type NodeRating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeKey  []byte `protobuf:"bytes,1,opt,name=node_key,json=nodeKey,proto3" json:"node_key,omitempty"`
	NodeTier uint32 `protobuf:"varint,2,opt,name=node_tier,json=nodeTier,proto3" json:"node_tier,omitempty"`
}

func (x *NodeRating) Reset() {
	*x = NodeRating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeRating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeRating) ProtoMessage() {}

func (x *NodeRating) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeRating.ProtoReflect.Descriptor instead.
func (*NodeRating) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{37}
}

func (x *NodeRating) GetNodeKey() []byte {
	if x != nil {
		return x.NodeKey
	}
	return nil
}

func (x *NodeRating) GetNodeTier() uint32 {
	if x != nil {
		return x.NodeTier
	}
	return 0
}

type ListNodeRatingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeRatings []*NodeRating `protobuf:"bytes,1,rep,name=node_ratings,json=nodeRatings,proto3" json:"node_ratings,omitempty"`
}

func (x *ListNodeRatingsResponse) Reset() {
	*x = ListNodeRatingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeRatingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeRatingsResponse) ProtoMessage() {}

func (x *ListNodeRatingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeRatingsResponse.ProtoReflect.Descriptor instead.
func (*ListNodeRatingsResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{38}
}

func (x *ListNodeRatingsResponse) GetNodeRatings() []*NodeRating {
	if x != nil {
		return x.NodeRatings
	}
	return nil
}

type LeaseDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration    uint32                            `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	BucketState auctioneerrpc.DurationBucketState `protobuf:"varint,2,opt,name=bucket_state,json=bucketState,proto3,enum=poolrpc.DurationBucketState" json:"bucket_state,omitempty"`
}

func (x *LeaseDuration) Reset() {
	*x = LeaseDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseDuration) ProtoMessage() {}

func (x *LeaseDuration) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseDuration.ProtoReflect.Descriptor instead.
func (*LeaseDuration) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{39}
}

func (x *LeaseDuration) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *LeaseDuration) GetBucketState() auctioneerrpc.DurationBucketState {
	if x != nil {
		return x.BucketState
	}
	return auctioneerrpc.DurationBucketState_NO_MARKET
}

type Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outpoint *OutPoint `protobuf:"bytes,1,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	Value    uint64    `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	PkScript string    `protobuf:"bytes,3,opt,name=pk_script,json=pkScript,proto3" json:"pk_script,omitempty"`
}

func (x *Input) Reset() {
	*x = Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input) ProtoMessage() {}

func (x *Input) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input.ProtoReflect.Descriptor instead.
func (*Input) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{40}
}

func (x *Input) GetOutpoint() *OutPoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

func (x *Input) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Input) GetPkScript() string {
	if x != nil {
		return x.PkScript
	}
	return ""
}

type Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Value   uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Output) Reset() {
	*x = Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{41}
}

func (x *Output) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Output) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type MoveFundsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs  []*Input  `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs []*Output `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *MoveFundsRequest) Reset() {
	*x = MoveFundsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveFundsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveFundsRequest) ProtoMessage() {}

func (x *MoveFundsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveFundsRequest.ProtoReflect.Descriptor instead.
func (*MoveFundsRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{42}
}

func (x *MoveFundsRequest) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *MoveFundsRequest) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type TraderTerms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LsatId  []byte `protobuf:"bytes,1,opt,name=lsat_id,json=lsatId,proto3" json:"lsat_id,omitempty"`
	BaseFee int64  `protobuf:"varint,2,opt,name=base_fee,json=baseFee,proto3" json:"base_fee,omitempty"`
	FeeRate int64  `protobuf:"varint,3,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
}

func (x *TraderTerms) Reset() {
	*x = TraderTerms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraderTerms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraderTerms) ProtoMessage() {}

func (x *TraderTerms) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraderTerms.ProtoReflect.Descriptor instead.
func (*TraderTerms) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{43}
}

func (x *TraderTerms) GetLsatId() []byte {
	if x != nil {
		return x.LsatId
	}
	return nil
}

func (x *TraderTerms) GetBaseFee() int64 {
	if x != nil {
		return x.BaseFee
	}
	return 0
}

func (x *TraderTerms) GetFeeRate() int64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

type ListTraderTermsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Terms []*TraderTerms `protobuf:"bytes,1,rep,name=terms,proto3" json:"terms,omitempty"`
}

func (x *ListTraderTermsResponse) Reset() {
	*x = ListTraderTermsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTraderTermsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTraderTermsResponse) ProtoMessage() {}

func (x *ListTraderTermsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTraderTermsResponse.ProtoReflect.Descriptor instead.
func (*ListTraderTermsResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{44}
}

func (x *ListTraderTermsResponse) GetTerms() []*TraderTerms {
	if x != nil {
		return x.Terms
	}
	return nil
}

type FinancialReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unix timestamp in seconds for the report's starting time.
	StartTimestamp int64 `protobuf:"varint,1,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// The unix timestamp in seconds for the report's ending time.
	EndTimestamp int64 `protobuf:"varint,2,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
}

func (x *FinancialReportRequest) Reset() {
	*x = FinancialReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialReportRequest) ProtoMessage() {}

func (x *FinancialReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialReportRequest.ProtoReflect.Descriptor instead.
func (*FinancialReportRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{45}
}

func (x *FinancialReportRequest) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *FinancialReportRequest) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

type BTCPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unix timestamp in seconds.
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The fiat price for the given currency for 1 BTC at the given timestamp.
	Price string `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	// The code of the currency that the price is quoted in.
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *BTCPrice) Reset() {
	*x = BTCPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCPrice) ProtoMessage() {}

func (x *BTCPrice) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCPrice.ProtoReflect.Descriptor instead.
func (*BTCPrice) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{46}
}

func (x *BTCPrice) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BTCPrice) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *BTCPrice) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type FinancialReportBatchEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the batch this entry refers to.
	BatchKey []byte `protobuf:"bytes,1,opt,name=batch_key,json=batchKey,proto3" json:"batch_key,omitempty"`
	// The unix timestamp in seconds at which the event occurred.
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The txid of the batch transaction.
	BatchTxId string `protobuf:"bytes,3,opt,name=batch_tx_id,json=batchTxId,proto3" json:"batch_tx_id,omitempty"`
	// The chain fees paid by this batch tx.
	BatchTxFees uint64 `protobuf:"varint,4,opt,name=batch_tx_fees,json=batchTxFees,proto3" json:"batch_tx_fees,omitempty"`
	// The total number of satoshis we earned as auctioneer fees.
	AccruedFees uint64 `protobuf:"varint,5,opt,name=accrued_fees,json=accruedFees,proto3" json:"accrued_fees,omitempty"`
	// The total number of satoshis that the participants of the batch paid.
	TraderChainFees uint64 `protobuf:"varint,6,opt,name=trader_chain_fees,json=traderChainFees,proto3" json:"trader_chain_fees,omitempty"`
	//
	//The net value earned during the execution of this batch.
	//It should match Accrued + TraderChain - BatchChain fees.
	ProfitInSats int64 `protobuf:"varint,7,opt,name=profit_in_sats,json=profitInSats,proto3" json:"profit_in_sats,omitempty"`
	// The net value earned during the execution of this batch in USD.
	ProfitInUsd string `protobuf:"bytes,8,opt,name=profit_in_usd,json=profitInUsd,proto3" json:"profit_in_usd,omitempty"`
	// The exchange value used for converting the profit values.
	BtcPrice *BTCPrice `protobuf:"bytes,9,opt,name=btc_price,json=btcPrice,proto3" json:"btc_price,omitempty"`
}

func (x *FinancialReportBatchEntry) Reset() {
	*x = FinancialReportBatchEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialReportBatchEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialReportBatchEntry) ProtoMessage() {}

func (x *FinancialReportBatchEntry) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialReportBatchEntry.ProtoReflect.Descriptor instead.
func (*FinancialReportBatchEntry) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{47}
}

func (x *FinancialReportBatchEntry) GetBatchKey() []byte {
	if x != nil {
		return x.BatchKey
	}
	return nil
}

func (x *FinancialReportBatchEntry) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *FinancialReportBatchEntry) GetBatchTxId() string {
	if x != nil {
		return x.BatchTxId
	}
	return ""
}

func (x *FinancialReportBatchEntry) GetBatchTxFees() uint64 {
	if x != nil {
		return x.BatchTxFees
	}
	return 0
}

func (x *FinancialReportBatchEntry) GetAccruedFees() uint64 {
	if x != nil {
		return x.AccruedFees
	}
	return 0
}

func (x *FinancialReportBatchEntry) GetTraderChainFees() uint64 {
	if x != nil {
		return x.TraderChainFees
	}
	return 0
}

func (x *FinancialReportBatchEntry) GetProfitInSats() int64 {
	if x != nil {
		return x.ProfitInSats
	}
	return 0
}

func (x *FinancialReportBatchEntry) GetProfitInUsd() string {
	if x != nil {
		return x.ProfitInUsd
	}
	return ""
}

func (x *FinancialReportBatchEntry) GetBtcPrice() *BTCPrice {
	if x != nil {
		return x.BtcPrice
	}
	return nil
}

type FinancialReportLSATEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unix timestamp in seconds at which the event occurred.
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The net value charged for this LSAT token.
	ProfitInSats int64 `protobuf:"varint,2,opt,name=profit_in_sats,json=profitInSats,proto3" json:"profit_in_sats,omitempty"`
	//
	//The net value earned during the execution of this batch in USD.
	ProfitInUsd string `protobuf:"bytes,3,opt,name=profit_in_usd,json=profitInUsd,proto3" json:"profit_in_usd,omitempty"`
	// The exchange value used for converting the profit values.
	BtcPrice *BTCPrice `protobuf:"bytes,4,opt,name=btc_price,json=btcPrice,proto3" json:"btc_price,omitempty"`
}

func (x *FinancialReportLSATEntry) Reset() {
	*x = FinancialReportLSATEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialReportLSATEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialReportLSATEntry) ProtoMessage() {}

func (x *FinancialReportLSATEntry) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialReportLSATEntry.ProtoReflect.Descriptor instead.
func (*FinancialReportLSATEntry) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{48}
}

func (x *FinancialReportLSATEntry) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *FinancialReportLSATEntry) GetProfitInSats() int64 {
	if x != nil {
		return x.ProfitInSats
	}
	return 0
}

func (x *FinancialReportLSATEntry) GetProfitInUsd() string {
	if x != nil {
		return x.ProfitInUsd
	}
	return ""
}

func (x *FinancialReportLSATEntry) GetBtcPrice() *BTCPrice {
	if x != nil {
		return x.BtcPrice
	}
	return nil
}

type FinancialReportSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unix timestamp in seconds for the report's creation time.
	CreationTimestamp int64 `protobuf:"varint,1,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	// The unix timestamp in seconds for the report's starting time.
	StartTimestamp int64 `protobuf:"varint,2,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// The unix timestamp in seconds for the report's ending time.
	EndTimestamp int64 `protobuf:"varint,3,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	// Full balance of the auctioneer at CreationTime.
	ClosingBalance int64 `protobuf:"varint,4,opt,name=closing_balance,json=closingBalance,proto3" json:"closing_balance,omitempty"`
	// Full balance of the auctioneer at CreationTime in USD.
	ClosingBalanceInUsd string `protobuf:"bytes,5,opt,name=closing_balance_in_usd,json=closingBalanceInUsd,proto3" json:"closing_balance_in_usd,omitempty"`
	// Total amount earned in fees.
	LeaseBatchFees int64 `protobuf:"varint,6,opt,name=lease_batch_fees,json=leaseBatchFees,proto3" json:"lease_batch_fees,omitempty"`
	// Total amount earned in fees in USD.
	LeaseBatchFeesInUsd string `protobuf:"bytes,7,opt,name=lease_batch_fees_in_usd,json=leaseBatchFeesInUsd,proto3" json:"lease_batch_fees_in_usd,omitempty"`
	// Total amount earned in LSAT tickets.
	Lsat int64 `protobuf:"varint,8,opt,name=lsat,proto3" json:"lsat,omitempty"`
	// Total amount earned in LSAT tickets in USD.
	LsatInUsd string `protobuf:"bytes,9,opt,name=lsat_in_usd,json=lsatInUsd,proto3" json:"lsat_in_usd,omitempty"`
	// The amount we paid in on-chain fees.
	ChainFees int64 `protobuf:"varint,10,opt,name=chain_fees,json=chainFees,proto3" json:"chain_fees,omitempty"`
	// The amount we paid in on-chain fees in USD.
	ChainFeesInUsd string `protobuf:"bytes,11,opt,name=chain_fees_in_usd,json=chainFeesInUsd,proto3" json:"chain_fees_in_usd,omitempty"`
	// Net revenue as gross revenue - direct costs.
	NetRevenue int64 `protobuf:"varint,12,opt,name=net_revenue,json=netRevenue,proto3" json:"net_revenue,omitempty"`
	// Net revenue in USD as gross revenue - direct costs.
	NetRevenueInUsd string `protobuf:"bytes,13,opt,name=net_revenue_in_usd,json=netRevenueInUsd,proto3" json:"net_revenue_in_usd,omitempty"`
}

func (x *FinancialReportSummary) Reset() {
	*x = FinancialReportSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialReportSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialReportSummary) ProtoMessage() {}

func (x *FinancialReportSummary) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialReportSummary.ProtoReflect.Descriptor instead.
func (*FinancialReportSummary) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{49}
}

func (x *FinancialReportSummary) GetCreationTimestamp() int64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

func (x *FinancialReportSummary) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *FinancialReportSummary) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *FinancialReportSummary) GetClosingBalance() int64 {
	if x != nil {
		return x.ClosingBalance
	}
	return 0
}

func (x *FinancialReportSummary) GetClosingBalanceInUsd() string {
	if x != nil {
		return x.ClosingBalanceInUsd
	}
	return ""
}

func (x *FinancialReportSummary) GetLeaseBatchFees() int64 {
	if x != nil {
		return x.LeaseBatchFees
	}
	return 0
}

func (x *FinancialReportSummary) GetLeaseBatchFeesInUsd() string {
	if x != nil {
		return x.LeaseBatchFeesInUsd
	}
	return ""
}

func (x *FinancialReportSummary) GetLsat() int64 {
	if x != nil {
		return x.Lsat
	}
	return 0
}

func (x *FinancialReportSummary) GetLsatInUsd() string {
	if x != nil {
		return x.LsatInUsd
	}
	return ""
}

func (x *FinancialReportSummary) GetChainFees() int64 {
	if x != nil {
		return x.ChainFees
	}
	return 0
}

func (x *FinancialReportSummary) GetChainFeesInUsd() string {
	if x != nil {
		return x.ChainFeesInUsd
	}
	return ""
}

func (x *FinancialReportSummary) GetNetRevenue() int64 {
	if x != nil {
		return x.NetRevenue
	}
	return 0
}

func (x *FinancialReportSummary) GetNetRevenueInUsd() string {
	if x != nil {
		return x.NetRevenueInUsd
	}
	return ""
}

type FinancialReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated, use summary.start_timestamp.
	StartTimestamp int64 `protobuf:"varint,1,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// Deprecated, use summary.end_timestamp.
	EndTimestamp int64 `protobuf:"varint,2,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	// The report batch entries.
	BatchEntries []*FinancialReportBatchEntry `protobuf:"bytes,3,rep,name=batch_entries,json=batchEntries,proto3" json:"batch_entries,omitempty"`
	// The report LSAT entries.
	LsatEntries []*FinancialReportLSATEntry `protobuf:"bytes,4,rep,name=lsat_entries,json=lsatEntries,proto3" json:"lsat_entries,omitempty"`
	// Report summary.
	Summary *FinancialReportSummary `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *FinancialReportResponse) Reset() {
	*x = FinancialReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialReportResponse) ProtoMessage() {}

func (x *FinancialReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialReportResponse.ProtoReflect.Descriptor instead.
func (*FinancialReportResponse) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{50}
}

func (x *FinancialReportResponse) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *FinancialReportResponse) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *FinancialReportResponse) GetBatchEntries() []*FinancialReportBatchEntry {
	if x != nil {
		return x.BatchEntries
	}
	return nil
}

func (x *FinancialReportResponse) GetLsatEntries() []*FinancialReportLSATEntry {
	if x != nil {
		return x.LsatEntries
	}
	return nil
}

func (x *FinancialReportResponse) GetSummary() *FinancialReportSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type SetStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	//The current server state to set for the k8s status endpoint.
	ServerState string `protobuf:"bytes,1,opt,name=server_state,json=serverState,proto3" json:"server_state,omitempty"`
}

func (x *SetStatusRequest) Reset() {
	*x = SetStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStatusRequest) ProtoMessage() {}

func (x *SetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStatusRequest.ProtoReflect.Descriptor instead.
func (*SetStatusRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{51}
}

func (x *SetStatusRequest) GetServerState() string {
	if x != nil {
		return x.ServerState
	}
	return ""
}

type SetLogLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The new log level to set for the server.
	LogLevel string `protobuf:"bytes,1,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
}

func (x *SetLogLevelRequest) Reset() {
	*x = SetLogLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLogLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLogLevelRequest) ProtoMessage() {}

func (x *SetLogLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLogLevelRequest.ProtoReflect.Descriptor instead.
func (*SetLogLevelRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{52}
}

func (x *SetLogLevelRequest) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

var File_admin_proto protoreflect.FileDescriptor

var file_admin_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x1a, 0x1e, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x65, 0x72, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x15, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e,
	0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0e,
	0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e,
	0x4b, 0x65, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x6b,
	0x65, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x22, 0xb7, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x1a, 0x50, 0x0a, 0x0c, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x30, 0x0a,
	0x0a, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x72,
	0x61, 0x77, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0b, 0x72, 0x61, 0x77, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22,
	0x41, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x48, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x62, 0x0a, 0x0d,
	0x4b, 0x65, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a,
	0x0d, 0x72, 0x61, 0x77, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x61, 0x77, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x2d, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65,
	0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x4c, 0x6f, 0x63,
	0x22, 0x2f, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x22, 0x66, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x73, 0x6b, 0x52, 0x04, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x27, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x42, 0x69, 0x64, 0x52, 0x04, 0x62, 0x69, 0x64, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x09, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x73, 0x6b, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22,
	0xd5, 0x02, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x69, 0x64, 0x12, 0x2e, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x6f,
	0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x65, 0x72,
	0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x61,
	0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x22, 0x5b, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x66,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x44, 0x69, 0x66, 0x66, 0x22, 0xdf, 0x01, 0x0a, 0x12, 0x45, 0x64, 0x69, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x64, 0x69, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x65, 0x64, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x08, 0x6f, 0x75, 0x74,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x54, 0x78, 0x22, 0x3b, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x22, 0x45, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xc7, 0x02, 0x0a, 0x07, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x65,
	0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x54, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x22, 0xb8, 0x04, 0x0a, 0x15, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x62, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x2f,
	0x0a, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x54, 0x6f, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x6f, 0x0a, 0x16, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x14, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x65, 0x0a, 0x19, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x2f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x22, 0xe7, 0x01, 0x0a, 0x09, 0x46, 0x65, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4a,
	0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63,
	0x2e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x61, 0x63,
	0x63, 0x72, 0x75, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x61, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x41, 0x63, 0x63, 0x72, 0x75,
	0x65, 0x64, 0x1a, 0x56, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x66,
	0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x02, 0x0a, 0x0b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x66, 0x65, 0x65, 0x73,
	0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x46, 0x65, 0x65, 0x73, 0x50, 0x61, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65,
	0x65, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x50, 0x61, 0x69,
	0x64, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73,
	0x50, 0x61, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x22, 0xe4, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x4e,
	0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x54,
	0x0a, 0x13, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70,
	0x63, 0x2e, 0x42, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x51, 0x0a, 0x10, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3d, 0x0a, 0x07, 0x42, 0x61, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x42, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x42, 0x05, 0x0a, 0x03,
	0x62, 0x61, 0x6e, 0x22, 0x61, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x05, 0x0a, 0x03, 0x62, 0x61, 0x6e, 0x22, 0x5f, 0x0a, 0x1a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x09, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x19, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x41, 0x73, 0x6b, 0x52, 0x03, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x03, 0x62,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x69, 0x64, 0x52, 0x03, 0x62, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x61, 0x74, 0x73, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x61, 0x74, 0x73, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x22, 0xdf, 0x04, 0x0a, 0x1a, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x6b, 0x0a, 0x13, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x5e,
	0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1e,
	0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x54, 0x78, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x54, 0x78, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x73, 0x1a, 0x44, 0x0a,
	0x16, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x66, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x60, 0x0a, 0x18, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x04, 0x6c, 0x73, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x73, 0x61, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc1, 0x01,
	0x0a, 0x18, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x1a, 0x54, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x40, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x73, 0x22, 0x67, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x2f, 0x0a, 0x12,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x4d, 0x0a,
	0x13, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x65, 0x72, 0x22, 0x54, 0x0a, 0x13,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x22,
	0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x69,
	0x65, 0x72, 0x22, 0x16, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x0a, 0x17, 0x42, 0x75,
	0x6d, 0x70, 0x42, 0x61, 0x74, 0x63, 0x68, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x13, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6b, 0x77, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x53, 0x61, 0x74, 0x50,
	0x65, 0x72, 0x4b, 0x77, 0x22, 0x44, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x6c,
	0x0a, 0x0d, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x6a, 0x0a, 0x05,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72,
	0x70, 0x63, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6f, 0x75, 0x74,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6b, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x38, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x67, 0x0a, 0x10, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70,
	0x63, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x2a, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x0b, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x73,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6c, 0x73, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x46, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d,
	0x73, 0x22, 0x66, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x5a, 0x0a, 0x08, 0x42, 0x54, 0x43,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xe4, 0x02, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4b, 0x65, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e,
	0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x54, 0x78, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x54, 0x78, 0x46, 0x65,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x5f, 0x66, 0x65,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x72, 0x75, 0x65,
	0x64, 0x46, 0x65, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x65, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73,
	0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x49, 0x6e, 0x53, 0x61, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x55, 0x73, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x62,
	0x74, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x54, 0x43, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x08, 0x62, 0x74, 0x63, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xb3, 0x01, 0x0a,
	0x18, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x53, 0x41, 0x54, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x53, 0x61, 0x74, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x55, 0x73,
	0x64, 0x12, 0x2f, 0x0a, 0x09, 0x62, 0x74, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e,
	0x42, 0x54, 0x43, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x08, 0x62, 0x74, 0x63, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x22, 0x9f, 0x04, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c,
	0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x55, 0x73, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x46, 0x65,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x17, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x46,
	0x65, 0x65, 0x73, 0x49, 0x6e, 0x55, 0x73, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x73, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x73, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0b,
	0x6c, 0x73, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x73, 0x61, 0x74, 0x49, 0x6e, 0x55, 0x73, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x65, 0x65,
	0x73, 0x49, 0x6e, 0x55, 0x73, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x74,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49,
	0x6e, 0x55, 0x73, 0x64, 0x22, 0xb4, 0x02, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x48,
	0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63,
	0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x6c, 0x73, 0x61, 0x74,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x53, 0x41, 0x54, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x6c, 0x73, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x3a, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x35, 0x0a, 0x10, 0x53,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x31, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0xac, 0x13, 0x0a, 0x0c, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x48, 0x0a, 0x0d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4e, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3c, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x16, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x10, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x0b, 0x45, 0x64, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x50, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x22, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69,
	0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x61, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x42, 0x61, 0x6e, 0x12, 0x1a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x41, 0x64,
	0x64, 0x42, 0x61, 0x6e, 0x12, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e,
	0x42, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x42, 0x75, 0x6d, 0x70,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x75, 0x6d, 0x70, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x12, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x4d,
	0x6f, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x0e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4c, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x54, 0x65,
	0x72, 0x6d, 0x73, 0x12, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x54, 0x65, 0x72,
	0x6d, 0x73, 0x12, 0x15, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x1a, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x15, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72,
	0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x1a, 0x17,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x08, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x16, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09,
	0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x0b, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x62, 0x73,
	0x2f, 0x73, 0x75, 0x62, 0x61, 0x73, 0x74, 0x61, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x72, 0x70,
	0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_admin_proto_rawDescOnce sync.Once
	file_admin_proto_rawDescData = file_admin_proto_rawDesc
)

func file_admin_proto_rawDescGZIP() []byte {
	file_admin_proto_rawDescOnce.Do(func() {
		file_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_proto_rawDescData)
	})
	return file_admin_proto_rawDescData
}

var file_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 61)
var file_admin_proto_goTypes = []interface{}{
	(*EmptyRequest)(nil),                       // 0: adminrpc.EmptyRequest
	(*EmptyResponse)(nil),                      // 1: adminrpc.EmptyResponse
	(*MasterAccountResponse)(nil),              // 2: adminrpc.MasterAccountResponse
	(*ConnectedTradersResponse)(nil),           // 3: adminrpc.ConnectedTradersResponse
	(*PubKeyList)(nil),                         // 4: adminrpc.PubKeyList
	(*OutPoint)(nil),                           // 5: adminrpc.OutPoint
	(*KeyLocator)(nil),                         // 6: adminrpc.KeyLocator
	(*KeyDescriptor)(nil),                      // 7: adminrpc.KeyDescriptor
	(*ListOrdersRequest)(nil),                  // 8: adminrpc.ListOrdersRequest
	(*ListOrdersResponse)(nil),                 // 9: adminrpc.ListOrdersResponse
	(*ServerAsk)(nil),                          // 10: adminrpc.ServerAsk
	(*ServerBid)(nil),                          // 11: adminrpc.ServerBid
	(*AccountDetailsRequest)(nil),              // 12: adminrpc.AccountDetailsRequest
	(*EditAccountRequest)(nil),                 // 13: adminrpc.EditAccountRequest
	(*DeleteAccountDiffRequest)(nil),           // 14: adminrpc.DeleteAccountDiffRequest
	(*ListAccountsResponse)(nil),               // 15: adminrpc.ListAccountsResponse
	(*Account)(nil),                            // 16: adminrpc.Account
	(*AuctionStatusResponse)(nil),              // 17: adminrpc.AuctionStatusResponse
	(*ListBatchesResponse)(nil),                // 18: adminrpc.ListBatchesResponse
	(*FeeReport)(nil),                          // 19: adminrpc.FeeReport
	(*AccountDiff)(nil),                        // 20: adminrpc.AccountDiff
	(*ListBansResponse)(nil),                   // 21: adminrpc.ListBansResponse
	(*BanInfo)(nil),                            // 22: adminrpc.BanInfo
	(*RemoveBanRequest)(nil),                   // 23: adminrpc.RemoveBanRequest
	(*BanRequest)(nil),                         // 24: adminrpc.BanRequest
	(*AdminMatchedOrderSnapshots)(nil),         // 25: adminrpc.AdminMatchedOrderSnapshots
	(*AdminMatchedOrderSnapshot)(nil),          // 26: adminrpc.AdminMatchedOrderSnapshot
	(*AdminBatchSnapshotResponse)(nil),         // 27: adminrpc.AdminBatchSnapshotResponse
	(*RemoveReservationRequest)(nil),           // 28: adminrpc.RemoveReservationRequest
	(*FundingConflictsResponse)(nil),           // 29: adminrpc.FundingConflictsResponse
	(*ConflictList)(nil),                       // 30: adminrpc.ConflictList
	(*Conflict)(nil),                           // 31: adminrpc.Conflict
	(*RatingQueryRequest)(nil),                 // 32: adminrpc.RatingQueryRequest
	(*RatingQueryResponse)(nil),                // 33: adminrpc.RatingQueryResponse
	(*ModifyRatingRequest)(nil),                // 34: adminrpc.ModifyRatingRequest
	(*ModifyRatingResponse)(nil),               // 35: adminrpc.ModifyRatingResponse
	(*BumpBatchFeeRateRequest)(nil),            // 36: adminrpc.BumpBatchFeeRateRequest
	(*NodeRating)(nil),                         // 37: adminrpc.NodeRating
	(*ListNodeRatingsResponse)(nil),            // 38: adminrpc.ListNodeRatingsResponse
	(*LeaseDuration)(nil),                      // 39: adminrpc.LeaseDuration
	(*Input)(nil),                              // 40: adminrpc.Input
	(*Output)(nil),                             // 41: adminrpc.Output
	(*MoveFundsRequest)(nil),                   // 42: adminrpc.MoveFundsRequest
	(*TraderTerms)(nil),                        // 43: adminrpc.TraderTerms
	(*ListTraderTermsResponse)(nil),            // 44: adminrpc.ListTraderTermsResponse
	(*FinancialReportRequest)(nil),             // 45: adminrpc.FinancialReportRequest
	(*BTCPrice)(nil),                           // 46: adminrpc.BTCPrice
	(*FinancialReportBatchEntry)(nil),          // 47: adminrpc.FinancialReportBatchEntry
	(*FinancialReportLSATEntry)(nil),           // 48: adminrpc.FinancialReportLSATEntry
	(*FinancialReportSummary)(nil),             // 49: adminrpc.FinancialReportSummary
	(*FinancialReportResponse)(nil),            // 50: adminrpc.FinancialReportResponse
	(*SetStatusRequest)(nil),                   // 51: adminrpc.SetStatusRequest
	(*SetLogLevelRequest)(nil),                 // 52: adminrpc.SetLogLevelRequest
	nil,                                        // 53: adminrpc.ConnectedTradersResponse.StreamsEntry
	nil,                                        // 54: adminrpc.AuctionStatusResponse.LeaseDurationBucketsEntry
	nil,                                        // 55: adminrpc.FeeReport.AccountDiffsEntry
	nil,                                        // 56: adminrpc.ListBansResponse.BannedAccountsEntry
	nil,                                        // 57: adminrpc.ListBansResponse.BannedNodesEntry
	nil,                                        // 58: adminrpc.AdminBatchSnapshotResponse.ClearingPriceRateEntry
	nil,                                        // 59: adminrpc.AdminBatchSnapshotResponse.MatchedOrdersEntry
	nil,                                        // 60: adminrpc.FundingConflictsResponse.ConflictsEntry
	(*auctioneerrpc.ServerOrder)(nil),          // 61: poolrpc.ServerOrder
	(auctioneerrpc.OrderState)(0),              // 62: poolrpc.OrderState
	(auctioneerrpc.NodeTier)(0),                // 63: poolrpc.NodeTier
	(auctioneerrpc.AuctionAccountState)(0),     // 64: poolrpc.AuctionAccountState
	(*auctioneerrpc.ServerAsk)(nil),            // 65: poolrpc.ServerAsk
	(*auctioneerrpc.ServerBid)(nil),            // 66: poolrpc.ServerBid
	(auctioneerrpc.DurationBucketState)(0),     // 67: poolrpc.DurationBucketState
	(*auctioneerrpc.BatchSnapshotRequest)(nil), // 68: poolrpc.BatchSnapshotRequest
}
var file_admin_proto_depIdxs = []int32{
	5,  // 0: adminrpc.MasterAccountResponse.outpoint:type_name -> adminrpc.OutPoint
	7,  // 1: adminrpc.MasterAccountResponse.key_descriptor:type_name -> adminrpc.KeyDescriptor
	53, // 2: adminrpc.ConnectedTradersResponse.streams:type_name -> adminrpc.ConnectedTradersResponse.StreamsEntry
	6,  // 3: adminrpc.KeyDescriptor.key_loc:type_name -> adminrpc.KeyLocator
	10, // 4: adminrpc.ListOrdersResponse.asks:type_name -> adminrpc.ServerAsk
	11, // 5: adminrpc.ListOrdersResponse.bids:type_name -> adminrpc.ServerBid
	61, // 6: adminrpc.ServerAsk.details:type_name -> poolrpc.ServerOrder
	62, // 7: adminrpc.ServerAsk.state:type_name -> poolrpc.OrderState
	61, // 8: adminrpc.ServerBid.details:type_name -> poolrpc.ServerOrder
	62, // 9: adminrpc.ServerBid.state:type_name -> poolrpc.OrderState
	63, // 10: adminrpc.ServerBid.min_node_tier:type_name -> poolrpc.NodeTier
	5,  // 11: adminrpc.EditAccountRequest.outpoint:type_name -> adminrpc.OutPoint
	16, // 12: adminrpc.ListAccountsResponse.accounts:type_name -> adminrpc.Account
	64, // 13: adminrpc.Account.state:type_name -> poolrpc.AuctionAccountState
	54, // 14: adminrpc.AuctionStatusResponse.lease_duration_buckets:type_name -> adminrpc.AuctionStatusResponse.LeaseDurationBucketsEntry
	55, // 15: adminrpc.FeeReport.account_diffs:type_name -> adminrpc.FeeReport.AccountDiffsEntry
	56, // 16: adminrpc.ListBansResponse.banned_accounts:type_name -> adminrpc.ListBansResponse.BannedAccountsEntry
	57, // 17: adminrpc.ListBansResponse.banned_nodes:type_name -> adminrpc.ListBansResponse.BannedNodesEntry
	26, // 18: adminrpc.AdminMatchedOrderSnapshots.snapshots:type_name -> adminrpc.AdminMatchedOrderSnapshot
	65, // 19: adminrpc.AdminMatchedOrderSnapshot.ask:type_name -> poolrpc.ServerAsk
	66, // 20: adminrpc.AdminMatchedOrderSnapshot.bid:type_name -> poolrpc.ServerBid
	58, // 21: adminrpc.AdminBatchSnapshotResponse.clearing_price_rate:type_name -> adminrpc.AdminBatchSnapshotResponse.ClearingPriceRateEntry
	59, // 22: adminrpc.AdminBatchSnapshotResponse.matched_orders:type_name -> adminrpc.AdminBatchSnapshotResponse.MatchedOrdersEntry
	60, // 23: adminrpc.FundingConflictsResponse.conflicts:type_name -> adminrpc.FundingConflictsResponse.ConflictsEntry
	31, // 24: adminrpc.ConflictList.conflicts:type_name -> adminrpc.Conflict
	37, // 25: adminrpc.ListNodeRatingsResponse.node_ratings:type_name -> adminrpc.NodeRating
	67, // 26: adminrpc.LeaseDuration.bucket_state:type_name -> poolrpc.DurationBucketState
	5,  // 27: adminrpc.Input.outpoint:type_name -> adminrpc.OutPoint
	40, // 28: adminrpc.MoveFundsRequest.inputs:type_name -> adminrpc.Input
	41, // 29: adminrpc.MoveFundsRequest.outputs:type_name -> adminrpc.Output
	43, // 30: adminrpc.ListTraderTermsResponse.terms:type_name -> adminrpc.TraderTerms
	46, // 31: adminrpc.FinancialReportBatchEntry.btc_price:type_name -> adminrpc.BTCPrice
	46, // 32: adminrpc.FinancialReportLSATEntry.btc_price:type_name -> adminrpc.BTCPrice
	47, // 33: adminrpc.FinancialReportResponse.batch_entries:type_name -> adminrpc.FinancialReportBatchEntry
	48, // 34: adminrpc.FinancialReportResponse.lsat_entries:type_name -> adminrpc.FinancialReportLSATEntry
	49, // 35: adminrpc.FinancialReportResponse.summary:type_name -> adminrpc.FinancialReportSummary
	4,  // 36: adminrpc.ConnectedTradersResponse.StreamsEntry.value:type_name -> adminrpc.PubKeyList
	67, // 37: adminrpc.AuctionStatusResponse.LeaseDurationBucketsEntry.value:type_name -> poolrpc.DurationBucketState
	20, // 38: adminrpc.FeeReport.AccountDiffsEntry.value:type_name -> adminrpc.AccountDiff
	22, // 39: adminrpc.ListBansResponse.BannedAccountsEntry.value:type_name -> adminrpc.BanInfo
	22, // 40: adminrpc.ListBansResponse.BannedNodesEntry.value:type_name -> adminrpc.BanInfo
	25, // 41: adminrpc.AdminBatchSnapshotResponse.MatchedOrdersEntry.value:type_name -> adminrpc.AdminMatchedOrderSnapshots
	30, // 42: adminrpc.FundingConflictsResponse.ConflictsEntry.value:type_name -> adminrpc.ConflictList
	0,  // 43: adminrpc.AuctionAdmin.MasterAccount:input_type -> adminrpc.EmptyRequest
	0,  // 44: adminrpc.AuctionAdmin.ConnectedTraders:input_type -> adminrpc.EmptyRequest
	0,  // 45: adminrpc.AuctionAdmin.BatchTick:input_type -> adminrpc.EmptyRequest
	0,  // 46: adminrpc.AuctionAdmin.PauseBatchTicker:input_type -> adminrpc.EmptyRequest
	0,  // 47: adminrpc.AuctionAdmin.ResumeBatchTicker:input_type -> adminrpc.EmptyRequest
	8,  // 48: adminrpc.AuctionAdmin.ListOrders:input_type -> adminrpc.ListOrdersRequest
	12, // 49: adminrpc.AuctionAdmin.AccountDetails:input_type -> adminrpc.AccountDetailsRequest
	0,  // 50: adminrpc.AuctionAdmin.ListAccounts:input_type -> adminrpc.EmptyRequest
	13, // 51: adminrpc.AuctionAdmin.EditAccount:input_type -> adminrpc.EditAccountRequest
	14, // 52: adminrpc.AuctionAdmin.DeleteAccountDiff:input_type -> adminrpc.DeleteAccountDiffRequest
	0,  // 53: adminrpc.AuctionAdmin.AuctionStatus:input_type -> adminrpc.EmptyRequest
	0,  // 54: adminrpc.AuctionAdmin.ListBatches:input_type -> adminrpc.EmptyRequest
	68, // 55: adminrpc.AuctionAdmin.BatchSnapshot:input_type -> poolrpc.BatchSnapshotRequest
	0,  // 56: adminrpc.AuctionAdmin.ListBans:input_type -> adminrpc.EmptyRequest
	23, // 57: adminrpc.AuctionAdmin.RemoveBan:input_type -> adminrpc.RemoveBanRequest
	24, // 58: adminrpc.AuctionAdmin.AddBan:input_type -> adminrpc.BanRequest
	28, // 59: adminrpc.AuctionAdmin.RemoveReservation:input_type -> adminrpc.RemoveReservationRequest
	0,  // 60: adminrpc.AuctionAdmin.FundingConflicts:input_type -> adminrpc.EmptyRequest
	0,  // 61: adminrpc.AuctionAdmin.ClearConflicts:input_type -> adminrpc.EmptyRequest
	36, // 62: adminrpc.AuctionAdmin.BumpBatchFeeRate:input_type -> adminrpc.BumpBatchFeeRateRequest
	32, // 63: adminrpc.AuctionAdmin.QueryNodeRating:input_type -> adminrpc.RatingQueryRequest
	34, // 64: adminrpc.AuctionAdmin.ModifyNodeRatings:input_type -> adminrpc.ModifyRatingRequest
	0,  // 65: adminrpc.AuctionAdmin.ListNodeRatings:input_type -> adminrpc.EmptyRequest
	39, // 66: adminrpc.AuctionAdmin.StoreLeaseDuration:input_type -> adminrpc.LeaseDuration
	39, // 67: adminrpc.AuctionAdmin.RemoveLeaseDuration:input_type -> adminrpc.LeaseDuration
	42, // 68: adminrpc.AuctionAdmin.MoveFunds:input_type -> adminrpc.MoveFundsRequest
	0,  // 69: adminrpc.AuctionAdmin.MirrorDatabase:input_type -> adminrpc.EmptyRequest
	0,  // 70: adminrpc.AuctionAdmin.ListTraderTerms:input_type -> adminrpc.EmptyRequest
	43, // 71: adminrpc.AuctionAdmin.StoreTraderTerms:input_type -> adminrpc.TraderTerms
	43, // 72: adminrpc.AuctionAdmin.RemoveTraderTerms:input_type -> adminrpc.TraderTerms
	45, // 73: adminrpc.AuctionAdmin.FinancialReport:input_type -> adminrpc.FinancialReportRequest
	0,  // 74: adminrpc.AuctionAdmin.Shutdown:input_type -> adminrpc.EmptyRequest
	51, // 75: adminrpc.AuctionAdmin.SetStatus:input_type -> adminrpc.SetStatusRequest
	52, // 76: adminrpc.AuctionAdmin.SetLogLevel:input_type -> adminrpc.SetLogLevelRequest
	2,  // 77: adminrpc.AuctionAdmin.MasterAccount:output_type -> adminrpc.MasterAccountResponse
	3,  // 78: adminrpc.AuctionAdmin.ConnectedTraders:output_type -> adminrpc.ConnectedTradersResponse
	1,  // 79: adminrpc.AuctionAdmin.BatchTick:output_type -> adminrpc.EmptyResponse
	1,  // 80: adminrpc.AuctionAdmin.PauseBatchTicker:output_type -> adminrpc.EmptyResponse
	1,  // 81: adminrpc.AuctionAdmin.ResumeBatchTicker:output_type -> adminrpc.EmptyResponse
	9,  // 82: adminrpc.AuctionAdmin.ListOrders:output_type -> adminrpc.ListOrdersResponse
	16, // 83: adminrpc.AuctionAdmin.AccountDetails:output_type -> adminrpc.Account
	15, // 84: adminrpc.AuctionAdmin.ListAccounts:output_type -> adminrpc.ListAccountsResponse
	16, // 85: adminrpc.AuctionAdmin.EditAccount:output_type -> adminrpc.Account
	1,  // 86: adminrpc.AuctionAdmin.DeleteAccountDiff:output_type -> adminrpc.EmptyResponse
	17, // 87: adminrpc.AuctionAdmin.AuctionStatus:output_type -> adminrpc.AuctionStatusResponse
	18, // 88: adminrpc.AuctionAdmin.ListBatches:output_type -> adminrpc.ListBatchesResponse
	27, // 89: adminrpc.AuctionAdmin.BatchSnapshot:output_type -> adminrpc.AdminBatchSnapshotResponse
	21, // 90: adminrpc.AuctionAdmin.ListBans:output_type -> adminrpc.ListBansResponse
	1,  // 91: adminrpc.AuctionAdmin.RemoveBan:output_type -> adminrpc.EmptyResponse
	1,  // 92: adminrpc.AuctionAdmin.AddBan:output_type -> adminrpc.EmptyResponse
	1,  // 93: adminrpc.AuctionAdmin.RemoveReservation:output_type -> adminrpc.EmptyResponse
	29, // 94: adminrpc.AuctionAdmin.FundingConflicts:output_type -> adminrpc.FundingConflictsResponse
	1,  // 95: adminrpc.AuctionAdmin.ClearConflicts:output_type -> adminrpc.EmptyResponse
	1,  // 96: adminrpc.AuctionAdmin.BumpBatchFeeRate:output_type -> adminrpc.EmptyResponse
	33, // 97: adminrpc.AuctionAdmin.QueryNodeRating:output_type -> adminrpc.RatingQueryResponse
	35, // 98: adminrpc.AuctionAdmin.ModifyNodeRatings:output_type -> adminrpc.ModifyRatingResponse
	38, // 99: adminrpc.AuctionAdmin.ListNodeRatings:output_type -> adminrpc.ListNodeRatingsResponse
	1,  // 100: adminrpc.AuctionAdmin.StoreLeaseDuration:output_type -> adminrpc.EmptyResponse
	1,  // 101: adminrpc.AuctionAdmin.RemoveLeaseDuration:output_type -> adminrpc.EmptyResponse
	1,  // 102: adminrpc.AuctionAdmin.MoveFunds:output_type -> adminrpc.EmptyResponse
	1,  // 103: adminrpc.AuctionAdmin.MirrorDatabase:output_type -> adminrpc.EmptyResponse
	44, // 104: adminrpc.AuctionAdmin.ListTraderTerms:output_type -> adminrpc.ListTraderTermsResponse
	1,  // 105: adminrpc.AuctionAdmin.StoreTraderTerms:output_type -> adminrpc.EmptyResponse
	1,  // 106: adminrpc.AuctionAdmin.RemoveTraderTerms:output_type -> adminrpc.EmptyResponse
	50, // 107: adminrpc.AuctionAdmin.FinancialReport:output_type -> adminrpc.FinancialReportResponse
	1,  // 108: adminrpc.AuctionAdmin.Shutdown:output_type -> adminrpc.EmptyResponse
	1,  // 109: adminrpc.AuctionAdmin.SetStatus:output_type -> adminrpc.EmptyResponse
	1,  // 110: adminrpc.AuctionAdmin.SetLogLevel:output_type -> adminrpc.EmptyResponse
	77, // [77:111] is the sub-list for method output_type
	43, // [43:77] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_admin_proto_init() }
func file_admin_proto_init() {
	if File_admin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectedTradersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubKeyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyLocator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerAsk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerBid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccountDiffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuctionStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBatchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminMatchedOrderSnapshots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminMatchedOrderSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminBatchSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveReservationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundingConflictsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConflictList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conflict); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyRatingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyRatingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BumpBatchFeeRateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeRating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeRatingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveFundsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraderTerms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTraderTermsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinancialReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinancialReportBatchEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinancialReportLSATEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinancialReportSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinancialReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLogLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_admin_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*RemoveBanRequest_Account)(nil),
		(*RemoveBanRequest_Node)(nil),
	}
	file_admin_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*BanRequest_Account)(nil),
		(*BanRequest_Node)(nil),
	}
	file_admin_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*RemoveReservationRequest_TraderKey)(nil),
		(*RemoveReservationRequest_Lsat)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   61,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_admin_proto_goTypes,
		DependencyIndexes: file_admin_proto_depIdxs,
		MessageInfos:      file_admin_proto_msgTypes,
	}.Build()
	File_admin_proto = out.File
	file_admin_proto_rawDesc = nil
	file_admin_proto_goTypes = nil
	file_admin_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuctionAdminClient is the client API for AuctionAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuctionAdminClient interface {
	MasterAccount(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*MasterAccountResponse, error)
	ConnectedTraders(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ConnectedTradersResponse, error)
	BatchTick(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	PauseBatchTicker(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ResumeBatchTicker(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
	AccountDetails(ctx context.Context, in *AccountDetailsRequest, opts ...grpc.CallOption) (*Account, error)
	ListAccounts(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	EditAccount(ctx context.Context, in *EditAccountRequest, opts ...grpc.CallOption) (*Account, error)
	DeleteAccountDiff(ctx context.Context, in *DeleteAccountDiffRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	AuctionStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AuctionStatusResponse, error)
	ListBatches(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListBatchesResponse, error)
	BatchSnapshot(ctx context.Context, in *auctioneerrpc.BatchSnapshotRequest, opts ...grpc.CallOption) (*AdminBatchSnapshotResponse, error)
	ListBans(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListBansResponse, error)
	RemoveBan(ctx context.Context, in *RemoveBanRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	AddBan(ctx context.Context, in *BanRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	RemoveReservation(ctx context.Context, in *RemoveReservationRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	FundingConflicts(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*FundingConflictsResponse, error)
	ClearConflicts(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	BumpBatchFeeRate(ctx context.Context, in *BumpBatchFeeRateRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	QueryNodeRating(ctx context.Context, in *RatingQueryRequest, opts ...grpc.CallOption) (*RatingQueryResponse, error)
	ModifyNodeRatings(ctx context.Context, in *ModifyRatingRequest, opts ...grpc.CallOption) (*ModifyRatingResponse, error)
	ListNodeRatings(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListNodeRatingsResponse, error)
	StoreLeaseDuration(ctx context.Context, in *LeaseDuration, opts ...grpc.CallOption) (*EmptyResponse, error)
	RemoveLeaseDuration(ctx context.Context, in *LeaseDuration, opts ...grpc.CallOption) (*EmptyResponse, error)
	MoveFunds(ctx context.Context, in *MoveFundsRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	MirrorDatabase(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ListTraderTerms(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListTraderTermsResponse, error)
	StoreTraderTerms(ctx context.Context, in *TraderTerms, opts ...grpc.CallOption) (*EmptyResponse, error)
	RemoveTraderTerms(ctx context.Context, in *TraderTerms, opts ...grpc.CallOption) (*EmptyResponse, error)
	FinancialReport(ctx context.Context, in *FinancialReportRequest, opts ...grpc.CallOption) (*FinancialReportResponse, error)
	Shutdown(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	SetStatus(ctx context.Context, in *SetStatusRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type auctionAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewAuctionAdminClient(cc grpc.ClientConnInterface) AuctionAdminClient {
	return &auctionAdminClient{cc}
}

func (c *auctionAdminClient) MasterAccount(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*MasterAccountResponse, error) {
	out := new(MasterAccountResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/MasterAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) ConnectedTraders(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ConnectedTradersResponse, error) {
	out := new(ConnectedTradersResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/ConnectedTraders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) BatchTick(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/BatchTick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) PauseBatchTicker(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/PauseBatchTicker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) ResumeBatchTicker(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/ResumeBatchTicker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/ListOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) AccountDetails(ctx context.Context, in *AccountDetailsRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/AccountDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) ListAccounts(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) EditAccount(ctx context.Context, in *EditAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/EditAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) DeleteAccountDiff(ctx context.Context, in *DeleteAccountDiffRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/DeleteAccountDiff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) AuctionStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AuctionStatusResponse, error) {
	out := new(AuctionStatusResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/AuctionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) ListBatches(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListBatchesResponse, error) {
	out := new(ListBatchesResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/ListBatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) BatchSnapshot(ctx context.Context, in *auctioneerrpc.BatchSnapshotRequest, opts ...grpc.CallOption) (*AdminBatchSnapshotResponse, error) {
	out := new(AdminBatchSnapshotResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/BatchSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) ListBans(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListBansResponse, error) {
	out := new(ListBansResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/ListBans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) RemoveBan(ctx context.Context, in *RemoveBanRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/RemoveBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) AddBan(ctx context.Context, in *BanRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/AddBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) RemoveReservation(ctx context.Context, in *RemoveReservationRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/RemoveReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) FundingConflicts(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*FundingConflictsResponse, error) {
	out := new(FundingConflictsResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/FundingConflicts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) ClearConflicts(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/ClearConflicts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) BumpBatchFeeRate(ctx context.Context, in *BumpBatchFeeRateRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/BumpBatchFeeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) QueryNodeRating(ctx context.Context, in *RatingQueryRequest, opts ...grpc.CallOption) (*RatingQueryResponse, error) {
	out := new(RatingQueryResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/QueryNodeRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) ModifyNodeRatings(ctx context.Context, in *ModifyRatingRequest, opts ...grpc.CallOption) (*ModifyRatingResponse, error) {
	out := new(ModifyRatingResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/ModifyNodeRatings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) ListNodeRatings(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListNodeRatingsResponse, error) {
	out := new(ListNodeRatingsResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/ListNodeRatings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) StoreLeaseDuration(ctx context.Context, in *LeaseDuration, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/StoreLeaseDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) RemoveLeaseDuration(ctx context.Context, in *LeaseDuration, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/RemoveLeaseDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) MoveFunds(ctx context.Context, in *MoveFundsRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/MoveFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) MirrorDatabase(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/MirrorDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) ListTraderTerms(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListTraderTermsResponse, error) {
	out := new(ListTraderTermsResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/ListTraderTerms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) StoreTraderTerms(ctx context.Context, in *TraderTerms, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/StoreTraderTerms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) RemoveTraderTerms(ctx context.Context, in *TraderTerms, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/RemoveTraderTerms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) FinancialReport(ctx context.Context, in *FinancialReportRequest, opts ...grpc.CallOption) (*FinancialReportResponse, error) {
	out := new(FinancialReportResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/FinancialReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) Shutdown(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) SetStatus(ctx context.Context, in *SetStatusRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/SetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/SetLogLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuctionAdminServer is the server API for AuctionAdmin service.
type AuctionAdminServer interface {
	MasterAccount(context.Context, *EmptyRequest) (*MasterAccountResponse, error)
	ConnectedTraders(context.Context, *EmptyRequest) (*ConnectedTradersResponse, error)
	BatchTick(context.Context, *EmptyRequest) (*EmptyResponse, error)
	PauseBatchTicker(context.Context, *EmptyRequest) (*EmptyResponse, error)
	ResumeBatchTicker(context.Context, *EmptyRequest) (*EmptyResponse, error)
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
	AccountDetails(context.Context, *AccountDetailsRequest) (*Account, error)
	ListAccounts(context.Context, *EmptyRequest) (*ListAccountsResponse, error)
	EditAccount(context.Context, *EditAccountRequest) (*Account, error)
	DeleteAccountDiff(context.Context, *DeleteAccountDiffRequest) (*EmptyResponse, error)
	AuctionStatus(context.Context, *EmptyRequest) (*AuctionStatusResponse, error)
	ListBatches(context.Context, *EmptyRequest) (*ListBatchesResponse, error)
	BatchSnapshot(context.Context, *auctioneerrpc.BatchSnapshotRequest) (*AdminBatchSnapshotResponse, error)
	ListBans(context.Context, *EmptyRequest) (*ListBansResponse, error)
	RemoveBan(context.Context, *RemoveBanRequest) (*EmptyResponse, error)
	AddBan(context.Context, *BanRequest) (*EmptyResponse, error)
	RemoveReservation(context.Context, *RemoveReservationRequest) (*EmptyResponse, error)
	FundingConflicts(context.Context, *EmptyRequest) (*FundingConflictsResponse, error)
	ClearConflicts(context.Context, *EmptyRequest) (*EmptyResponse, error)
	BumpBatchFeeRate(context.Context, *BumpBatchFeeRateRequest) (*EmptyResponse, error)
	QueryNodeRating(context.Context, *RatingQueryRequest) (*RatingQueryResponse, error)
	ModifyNodeRatings(context.Context, *ModifyRatingRequest) (*ModifyRatingResponse, error)
	ListNodeRatings(context.Context, *EmptyRequest) (*ListNodeRatingsResponse, error)
	StoreLeaseDuration(context.Context, *LeaseDuration) (*EmptyResponse, error)
	RemoveLeaseDuration(context.Context, *LeaseDuration) (*EmptyResponse, error)
	MoveFunds(context.Context, *MoveFundsRequest) (*EmptyResponse, error)
	MirrorDatabase(context.Context, *EmptyRequest) (*EmptyResponse, error)
	ListTraderTerms(context.Context, *EmptyRequest) (*ListTraderTermsResponse, error)
	StoreTraderTerms(context.Context, *TraderTerms) (*EmptyResponse, error)
	RemoveTraderTerms(context.Context, *TraderTerms) (*EmptyResponse, error)
	FinancialReport(context.Context, *FinancialReportRequest) (*FinancialReportResponse, error)
	Shutdown(context.Context, *EmptyRequest) (*EmptyResponse, error)
	SetStatus(context.Context, *SetStatusRequest) (*EmptyResponse, error)
	SetLogLevel(context.Context, *SetLogLevelRequest) (*EmptyResponse, error)
}

// UnimplementedAuctionAdminServer can be embedded to have forward compatible implementations.
type UnimplementedAuctionAdminServer struct {
}

func (*UnimplementedAuctionAdminServer) MasterAccount(context.Context, *EmptyRequest) (*MasterAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MasterAccount not implemented")
}
func (*UnimplementedAuctionAdminServer) ConnectedTraders(context.Context, *EmptyRequest) (*ConnectedTradersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectedTraders not implemented")
}
func (*UnimplementedAuctionAdminServer) BatchTick(context.Context, *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTick not implemented")
}
func (*UnimplementedAuctionAdminServer) PauseBatchTicker(context.Context, *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseBatchTicker not implemented")
}
func (*UnimplementedAuctionAdminServer) ResumeBatchTicker(context.Context, *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeBatchTicker not implemented")
}
func (*UnimplementedAuctionAdminServer) ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (*UnimplementedAuctionAdminServer) AccountDetails(context.Context, *AccountDetailsRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDetails not implemented")
}
func (*UnimplementedAuctionAdminServer) ListAccounts(context.Context, *EmptyRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (*UnimplementedAuctionAdminServer) EditAccount(context.Context, *EditAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAccount not implemented")
}
func (*UnimplementedAuctionAdminServer) DeleteAccountDiff(context.Context, *DeleteAccountDiffRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountDiff not implemented")
}
func (*UnimplementedAuctionAdminServer) AuctionStatus(context.Context, *EmptyRequest) (*AuctionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionStatus not implemented")
}
func (*UnimplementedAuctionAdminServer) ListBatches(context.Context, *EmptyRequest) (*ListBatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBatches not implemented")
}
func (*UnimplementedAuctionAdminServer) BatchSnapshot(context.Context, *auctioneerrpc.BatchSnapshotRequest) (*AdminBatchSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSnapshot not implemented")
}
func (*UnimplementedAuctionAdminServer) ListBans(context.Context, *EmptyRequest) (*ListBansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBans not implemented")
}
func (*UnimplementedAuctionAdminServer) RemoveBan(context.Context, *RemoveBanRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBan not implemented")
}
func (*UnimplementedAuctionAdminServer) AddBan(context.Context, *BanRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBan not implemented")
}
func (*UnimplementedAuctionAdminServer) RemoveReservation(context.Context, *RemoveReservationRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveReservation not implemented")
}
func (*UnimplementedAuctionAdminServer) FundingConflicts(context.Context, *EmptyRequest) (*FundingConflictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundingConflicts not implemented")
}
func (*UnimplementedAuctionAdminServer) ClearConflicts(context.Context, *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearConflicts not implemented")
}
func (*UnimplementedAuctionAdminServer) BumpBatchFeeRate(context.Context, *BumpBatchFeeRateRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BumpBatchFeeRate not implemented")
}
func (*UnimplementedAuctionAdminServer) QueryNodeRating(context.Context, *RatingQueryRequest) (*RatingQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNodeRating not implemented")
}
func (*UnimplementedAuctionAdminServer) ModifyNodeRatings(context.Context, *ModifyRatingRequest) (*ModifyRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyNodeRatings not implemented")
}
func (*UnimplementedAuctionAdminServer) ListNodeRatings(context.Context, *EmptyRequest) (*ListNodeRatingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeRatings not implemented")
}
func (*UnimplementedAuctionAdminServer) StoreLeaseDuration(context.Context, *LeaseDuration) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreLeaseDuration not implemented")
}
func (*UnimplementedAuctionAdminServer) RemoveLeaseDuration(context.Context, *LeaseDuration) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLeaseDuration not implemented")
}
func (*UnimplementedAuctionAdminServer) MoveFunds(context.Context, *MoveFundsRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFunds not implemented")
}
func (*UnimplementedAuctionAdminServer) MirrorDatabase(context.Context, *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MirrorDatabase not implemented")
}
func (*UnimplementedAuctionAdminServer) ListTraderTerms(context.Context, *EmptyRequest) (*ListTraderTermsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTraderTerms not implemented")
}
func (*UnimplementedAuctionAdminServer) StoreTraderTerms(context.Context, *TraderTerms) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreTraderTerms not implemented")
}
func (*UnimplementedAuctionAdminServer) RemoveTraderTerms(context.Context, *TraderTerms) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTraderTerms not implemented")
}
func (*UnimplementedAuctionAdminServer) FinancialReport(context.Context, *FinancialReportRequest) (*FinancialReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinancialReport not implemented")
}
func (*UnimplementedAuctionAdminServer) Shutdown(context.Context, *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (*UnimplementedAuctionAdminServer) SetStatus(context.Context, *SetStatusRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatus not implemented")
}
func (*UnimplementedAuctionAdminServer) SetLogLevel(context.Context, *SetLogLevelRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLogLevel not implemented")
}

func RegisterAuctionAdminServer(s *grpc.Server, srv AuctionAdminServer) {
	s.RegisterService(&_AuctionAdmin_serviceDesc, srv)
}

func _AuctionAdmin_MasterAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).MasterAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/MasterAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).MasterAccount(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_ConnectedTraders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).ConnectedTraders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/ConnectedTraders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).ConnectedTraders(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_BatchTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).BatchTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/BatchTick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).BatchTick(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_PauseBatchTicker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).PauseBatchTicker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/PauseBatchTicker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).PauseBatchTicker(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_ResumeBatchTicker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).ResumeBatchTicker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/ResumeBatchTicker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).ResumeBatchTicker(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/ListOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).ListOrders(ctx, req.(*ListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_AccountDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).AccountDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/AccountDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).AccountDetails(ctx, req.(*AccountDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).ListAccounts(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_EditAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).EditAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/EditAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).EditAccount(ctx, req.(*EditAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_DeleteAccountDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).DeleteAccountDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/DeleteAccountDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).DeleteAccountDiff(ctx, req.(*DeleteAccountDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_AuctionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).AuctionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/AuctionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).AuctionStatus(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_ListBatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).ListBatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/ListBatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).ListBatches(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_BatchSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(auctioneerrpc.BatchSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).BatchSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/BatchSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).BatchSnapshot(ctx, req.(*auctioneerrpc.BatchSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_ListBans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).ListBans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/ListBans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).ListBans(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_RemoveBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).RemoveBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/RemoveBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).RemoveBan(ctx, req.(*RemoveBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_AddBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).AddBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/AddBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).AddBan(ctx, req.(*BanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_RemoveReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).RemoveReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/RemoveReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).RemoveReservation(ctx, req.(*RemoveReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_FundingConflicts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).FundingConflicts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/FundingConflicts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).FundingConflicts(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_ClearConflicts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).ClearConflicts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/ClearConflicts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).ClearConflicts(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_BumpBatchFeeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BumpBatchFeeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).BumpBatchFeeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/BumpBatchFeeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).BumpBatchFeeRate(ctx, req.(*BumpBatchFeeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_QueryNodeRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).QueryNodeRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/QueryNodeRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).QueryNodeRating(ctx, req.(*RatingQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_ModifyNodeRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).ModifyNodeRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/ModifyNodeRatings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).ModifyNodeRatings(ctx, req.(*ModifyRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_ListNodeRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).ListNodeRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/ListNodeRatings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).ListNodeRatings(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_StoreLeaseDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaseDuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).StoreLeaseDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/StoreLeaseDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).StoreLeaseDuration(ctx, req.(*LeaseDuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_RemoveLeaseDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaseDuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).RemoveLeaseDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/RemoveLeaseDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).RemoveLeaseDuration(ctx, req.(*LeaseDuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_MoveFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).MoveFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/MoveFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).MoveFunds(ctx, req.(*MoveFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_MirrorDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).MirrorDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/MirrorDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).MirrorDatabase(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_ListTraderTerms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).ListTraderTerms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/ListTraderTerms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).ListTraderTerms(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_StoreTraderTerms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraderTerms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).StoreTraderTerms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/StoreTraderTerms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).StoreTraderTerms(ctx, req.(*TraderTerms))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_RemoveTraderTerms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraderTerms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).RemoveTraderTerms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/RemoveTraderTerms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).RemoveTraderTerms(ctx, req.(*TraderTerms))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_FinancialReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinancialReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).FinancialReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/FinancialReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).FinancialReport(ctx, req.(*FinancialReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).Shutdown(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/SetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).SetStatus(ctx, req.(*SetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_SetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).SetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/SetLogLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).SetLogLevel(ctx, req.(*SetLogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuctionAdmin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "adminrpc.AuctionAdmin",
	HandlerType: (*AuctionAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MasterAccount",
			Handler:    _AuctionAdmin_MasterAccount_Handler,
		},
		{
			MethodName: "ConnectedTraders",
			Handler:    _AuctionAdmin_ConnectedTraders_Handler,
		},
		{
			MethodName: "BatchTick",
			Handler:    _AuctionAdmin_BatchTick_Handler,
		},
		{
			MethodName: "PauseBatchTicker",
			Handler:    _AuctionAdmin_PauseBatchTicker_Handler,
		},
		{
			MethodName: "ResumeBatchTicker",
			Handler:    _AuctionAdmin_ResumeBatchTicker_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _AuctionAdmin_ListOrders_Handler,
		},
		{
			MethodName: "AccountDetails",
			Handler:    _AuctionAdmin_AccountDetails_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _AuctionAdmin_ListAccounts_Handler,
		},
		{
			MethodName: "EditAccount",
			Handler:    _AuctionAdmin_EditAccount_Handler,
		},
		{
			MethodName: "DeleteAccountDiff",
			Handler:    _AuctionAdmin_DeleteAccountDiff_Handler,
		},
		{
			MethodName: "AuctionStatus",
			Handler:    _AuctionAdmin_AuctionStatus_Handler,
		},
		{
			MethodName: "ListBatches",
			Handler:    _AuctionAdmin_ListBatches_Handler,
		},
		{
			MethodName: "BatchSnapshot",
			Handler:    _AuctionAdmin_BatchSnapshot_Handler,
		},
		{
			MethodName: "ListBans",
			Handler:    _AuctionAdmin_ListBans_Handler,
		},
		{
			MethodName: "RemoveBan",
			Handler:    _AuctionAdmin_RemoveBan_Handler,
		},
		{
			MethodName: "AddBan",
			Handler:    _AuctionAdmin_AddBan_Handler,
		},
		{
			MethodName: "RemoveReservation",
			Handler:    _AuctionAdmin_RemoveReservation_Handler,
		},
		{
			MethodName: "FundingConflicts",
			Handler:    _AuctionAdmin_FundingConflicts_Handler,
		},
		{
			MethodName: "ClearConflicts",
			Handler:    _AuctionAdmin_ClearConflicts_Handler,
		},
		{
			MethodName: "BumpBatchFeeRate",
			Handler:    _AuctionAdmin_BumpBatchFeeRate_Handler,
		},
		{
			MethodName: "QueryNodeRating",
			Handler:    _AuctionAdmin_QueryNodeRating_Handler,
		},
		{
			MethodName: "ModifyNodeRatings",
			Handler:    _AuctionAdmin_ModifyNodeRatings_Handler,
		},
		{
			MethodName: "ListNodeRatings",
			Handler:    _AuctionAdmin_ListNodeRatings_Handler,
		},
		{
			MethodName: "StoreLeaseDuration",
			Handler:    _AuctionAdmin_StoreLeaseDuration_Handler,
		},
		{
			MethodName: "RemoveLeaseDuration",
			Handler:    _AuctionAdmin_RemoveLeaseDuration_Handler,
		},
		{
			MethodName: "MoveFunds",
			Handler:    _AuctionAdmin_MoveFunds_Handler,
		},
		{
			MethodName: "MirrorDatabase",
			Handler:    _AuctionAdmin_MirrorDatabase_Handler,
		},
		{
			MethodName: "ListTraderTerms",
			Handler:    _AuctionAdmin_ListTraderTerms_Handler,
		},
		{
			MethodName: "StoreTraderTerms",
			Handler:    _AuctionAdmin_StoreTraderTerms_Handler,
		},
		{
			MethodName: "RemoveTraderTerms",
			Handler:    _AuctionAdmin_RemoveTraderTerms_Handler,
		},
		{
			MethodName: "FinancialReport",
			Handler:    _AuctionAdmin_FinancialReport_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _AuctionAdmin_Shutdown_Handler,
		},
		{
			MethodName: "SetStatus",
			Handler:    _AuctionAdmin_SetStatus_Handler,
		},
		{
			MethodName: "SetLogLevel",
			Handler:    _AuctionAdmin_SetLogLevel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}
