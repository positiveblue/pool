// Code generated by protoc-gen-go. DO NOT EDIT.
// source: admin.proto

package adminrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	poolrpc "github.com/lightninglabs/pool/poolrpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EmptyRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyRequest) Reset()         { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()    {}
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{0}
}

func (m *EmptyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyRequest.Unmarshal(m, b)
}
func (m *EmptyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyRequest.Marshal(b, m, deterministic)
}
func (m *EmptyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyRequest.Merge(m, src)
}
func (m *EmptyRequest) XXX_Size() int {
	return xxx_messageInfo_EmptyRequest.Size(m)
}
func (m *EmptyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyRequest proto.InternalMessageInfo

type EmptyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyResponse) Reset()         { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()    {}
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{1}
}

func (m *EmptyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyResponse.Unmarshal(m, b)
}
func (m *EmptyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyResponse.Marshal(b, m, deterministic)
}
func (m *EmptyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyResponse.Merge(m, src)
}
func (m *EmptyResponse) XXX_Size() int {
	return xxx_messageInfo_EmptyResponse.Size(m)
}
func (m *EmptyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyResponse proto.InternalMessageInfo

type MasterAccountResponse struct {
	//
	//OutPoint is the outpoint of the master account. If this is a zero outpoint,
	//then no account exists yet.
	Outpoint *OutPoint `protobuf:"bytes,1,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	//
	//Balance is the current balance of the master account.
	Balance int64 `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
	//
	//AuctioneerKey is the base key for the auctioneer, this is a static parameter
	//that's created when the system is initialized.
	KeyDescriptor *KeyDescriptor `protobuf:"bytes,3,opt,name=key_descriptor,json=keyDescriptor,proto3" json:"key_descriptor,omitempty"`
	//
	//BatchKey is the current batch key for the auctioneer's account, this will be
	//incremented by one each batch.
	BatchKey []byte `protobuf:"bytes,4,opt,name=batch_key,json=batchKey,proto3" json:"batch_key,omitempty"`
	// Whether the master account is pending its confirmation.
	Pending              bool     `protobuf:"varint,5,opt,name=pending,proto3" json:"pending,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MasterAccountResponse) Reset()         { *m = MasterAccountResponse{} }
func (m *MasterAccountResponse) String() string { return proto.CompactTextString(m) }
func (*MasterAccountResponse) ProtoMessage()    {}
func (*MasterAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{2}
}

func (m *MasterAccountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MasterAccountResponse.Unmarshal(m, b)
}
func (m *MasterAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MasterAccountResponse.Marshal(b, m, deterministic)
}
func (m *MasterAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MasterAccountResponse.Merge(m, src)
}
func (m *MasterAccountResponse) XXX_Size() int {
	return xxx_messageInfo_MasterAccountResponse.Size(m)
}
func (m *MasterAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MasterAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MasterAccountResponse proto.InternalMessageInfo

func (m *MasterAccountResponse) GetOutpoint() *OutPoint {
	if m != nil {
		return m.Outpoint
	}
	return nil
}

func (m *MasterAccountResponse) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *MasterAccountResponse) GetKeyDescriptor() *KeyDescriptor {
	if m != nil {
		return m.KeyDescriptor
	}
	return nil
}

func (m *MasterAccountResponse) GetBatchKey() []byte {
	if m != nil {
		return m.BatchKey
	}
	return nil
}

func (m *MasterAccountResponse) GetPending() bool {
	if m != nil {
		return m.Pending
	}
	return false
}

type ConnectedTradersResponse struct {
	//
	//A map of all connected trader streams. The key is the hex-encoded LSAT ID
	//of a connected stream and the content is a list of all account keys that
	//trader connection has sent subscriptions for.
	Streams              map[string]*PubKeyList `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ConnectedTradersResponse) Reset()         { *m = ConnectedTradersResponse{} }
func (m *ConnectedTradersResponse) String() string { return proto.CompactTextString(m) }
func (*ConnectedTradersResponse) ProtoMessage()    {}
func (*ConnectedTradersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{3}
}

func (m *ConnectedTradersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectedTradersResponse.Unmarshal(m, b)
}
func (m *ConnectedTradersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectedTradersResponse.Marshal(b, m, deterministic)
}
func (m *ConnectedTradersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectedTradersResponse.Merge(m, src)
}
func (m *ConnectedTradersResponse) XXX_Size() int {
	return xxx_messageInfo_ConnectedTradersResponse.Size(m)
}
func (m *ConnectedTradersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectedTradersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectedTradersResponse proto.InternalMessageInfo

func (m *ConnectedTradersResponse) GetStreams() map[string]*PubKeyList {
	if m != nil {
		return m.Streams
	}
	return nil
}

type PubKeyList struct {
	//
	//The raw bytes of the key being identified.
	RawKeyBytes          [][]byte `protobuf:"bytes,1,rep,name=raw_key_bytes,json=rawKeyBytes,proto3" json:"raw_key_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubKeyList) Reset()         { *m = PubKeyList{} }
func (m *PubKeyList) String() string { return proto.CompactTextString(m) }
func (*PubKeyList) ProtoMessage()    {}
func (*PubKeyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{4}
}

func (m *PubKeyList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubKeyList.Unmarshal(m, b)
}
func (m *PubKeyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubKeyList.Marshal(b, m, deterministic)
}
func (m *PubKeyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubKeyList.Merge(m, src)
}
func (m *PubKeyList) XXX_Size() int {
	return xxx_messageInfo_PubKeyList.Size(m)
}
func (m *PubKeyList) XXX_DiscardUnknown() {
	xxx_messageInfo_PubKeyList.DiscardUnknown(m)
}

var xxx_messageInfo_PubKeyList proto.InternalMessageInfo

func (m *PubKeyList) GetRawKeyBytes() [][]byte {
	if m != nil {
		return m.RawKeyBytes
	}
	return nil
}

type OutPoint struct {
	//
	//Raw bytes representing the transaction id.
	Txid []byte `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	//
	//The index of the output on the transaction.
	OutputIndex          uint32   `protobuf:"varint,2,opt,name=output_index,proto3" json:"output_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OutPoint) Reset()         { *m = OutPoint{} }
func (m *OutPoint) String() string { return proto.CompactTextString(m) }
func (*OutPoint) ProtoMessage()    {}
func (*OutPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{5}
}

func (m *OutPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutPoint.Unmarshal(m, b)
}
func (m *OutPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutPoint.Marshal(b, m, deterministic)
}
func (m *OutPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutPoint.Merge(m, src)
}
func (m *OutPoint) XXX_Size() int {
	return xxx_messageInfo_OutPoint.Size(m)
}
func (m *OutPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_OutPoint.DiscardUnknown(m)
}

var xxx_messageInfo_OutPoint proto.InternalMessageInfo

func (m *OutPoint) GetTxid() []byte {
	if m != nil {
		return m.Txid
	}
	return nil
}

func (m *OutPoint) GetOutputIndex() uint32 {
	if m != nil {
		return m.OutputIndex
	}
	return 0
}

type KeyLocator struct {
	// The family of key being identified.
	KeyFamily int32 `protobuf:"varint,1,opt,name=key_family,json=keyFamily,proto3" json:"key_family,omitempty"`
	// The precise index of the key being identified.
	KeyIndex             int32    `protobuf:"varint,2,opt,name=key_index,json=keyIndex,proto3" json:"key_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyLocator) Reset()         { *m = KeyLocator{} }
func (m *KeyLocator) String() string { return proto.CompactTextString(m) }
func (*KeyLocator) ProtoMessage()    {}
func (*KeyLocator) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{6}
}

func (m *KeyLocator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyLocator.Unmarshal(m, b)
}
func (m *KeyLocator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyLocator.Marshal(b, m, deterministic)
}
func (m *KeyLocator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyLocator.Merge(m, src)
}
func (m *KeyLocator) XXX_Size() int {
	return xxx_messageInfo_KeyLocator.Size(m)
}
func (m *KeyLocator) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyLocator.DiscardUnknown(m)
}

var xxx_messageInfo_KeyLocator proto.InternalMessageInfo

func (m *KeyLocator) GetKeyFamily() int32 {
	if m != nil {
		return m.KeyFamily
	}
	return 0
}

func (m *KeyLocator) GetKeyIndex() int32 {
	if m != nil {
		return m.KeyIndex
	}
	return 0
}

type KeyDescriptor struct {
	//
	//The raw bytes of the key being identified.
	RawKeyBytes []byte `protobuf:"bytes,1,opt,name=raw_key_bytes,json=rawKeyBytes,proto3" json:"raw_key_bytes,omitempty"`
	//
	//The key locator that identifies which key to use for signing.
	KeyLoc               *KeyLocator `protobuf:"bytes,2,opt,name=key_loc,json=keyLoc,proto3" json:"key_loc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *KeyDescriptor) Reset()         { *m = KeyDescriptor{} }
func (m *KeyDescriptor) String() string { return proto.CompactTextString(m) }
func (*KeyDescriptor) ProtoMessage()    {}
func (*KeyDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{7}
}

func (m *KeyDescriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyDescriptor.Unmarshal(m, b)
}
func (m *KeyDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyDescriptor.Marshal(b, m, deterministic)
}
func (m *KeyDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyDescriptor.Merge(m, src)
}
func (m *KeyDescriptor) XXX_Size() int {
	return xxx_messageInfo_KeyDescriptor.Size(m)
}
func (m *KeyDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_KeyDescriptor proto.InternalMessageInfo

func (m *KeyDescriptor) GetRawKeyBytes() []byte {
	if m != nil {
		return m.RawKeyBytes
	}
	return nil
}

func (m *KeyDescriptor) GetKeyLoc() *KeyLocator {
	if m != nil {
		return m.KeyLoc
	}
	return nil
}

type ListOrdersRequest struct {
	// Indicate whether all archived or all open orders should be returned.
	Archived             bool     `protobuf:"varint,1,opt,name=archived,proto3" json:"archived,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListOrdersRequest) Reset()         { *m = ListOrdersRequest{} }
func (m *ListOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*ListOrdersRequest) ProtoMessage()    {}
func (*ListOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{8}
}

func (m *ListOrdersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOrdersRequest.Unmarshal(m, b)
}
func (m *ListOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOrdersRequest.Marshal(b, m, deterministic)
}
func (m *ListOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOrdersRequest.Merge(m, src)
}
func (m *ListOrdersRequest) XXX_Size() int {
	return xxx_messageInfo_ListOrdersRequest.Size(m)
}
func (m *ListOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListOrdersRequest proto.InternalMessageInfo

func (m *ListOrdersRequest) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

type ListOrdersResponse struct {
	Asks                 []*poolrpc.ServerAsk `protobuf:"bytes,1,rep,name=asks,proto3" json:"asks,omitempty"`
	Bids                 []*poolrpc.ServerBid `protobuf:"bytes,2,rep,name=bids,proto3" json:"bids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListOrdersResponse) Reset()         { *m = ListOrdersResponse{} }
func (m *ListOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*ListOrdersResponse) ProtoMessage()    {}
func (*ListOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{9}
}

func (m *ListOrdersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOrdersResponse.Unmarshal(m, b)
}
func (m *ListOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOrdersResponse.Marshal(b, m, deterministic)
}
func (m *ListOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOrdersResponse.Merge(m, src)
}
func (m *ListOrdersResponse) XXX_Size() int {
	return xxx_messageInfo_ListOrdersResponse.Size(m)
}
func (m *ListOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListOrdersResponse proto.InternalMessageInfo

func (m *ListOrdersResponse) GetAsks() []*poolrpc.ServerAsk {
	if m != nil {
		return m.Asks
	}
	return nil
}

func (m *ListOrdersResponse) GetBids() []*poolrpc.ServerBid {
	if m != nil {
		return m.Bids
	}
	return nil
}

type AccountDetailsRequest struct {
	// The identifying key of the account to retrieve.
	AccountKey []byte `protobuf:"bytes,1,opt,name=account_key,json=accountKey,proto3" json:"account_key,omitempty"`
	//
	//Whether the account diff, if any, should be retrieved instead of the main
	//account state.
	IncludeDiff          bool     `protobuf:"varint,2,opt,name=include_diff,json=includeDiff,proto3" json:"include_diff,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountDetailsRequest) Reset()         { *m = AccountDetailsRequest{} }
func (m *AccountDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*AccountDetailsRequest) ProtoMessage()    {}
func (*AccountDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{10}
}

func (m *AccountDetailsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountDetailsRequest.Unmarshal(m, b)
}
func (m *AccountDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountDetailsRequest.Marshal(b, m, deterministic)
}
func (m *AccountDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountDetailsRequest.Merge(m, src)
}
func (m *AccountDetailsRequest) XXX_Size() int {
	return xxx_messageInfo_AccountDetailsRequest.Size(m)
}
func (m *AccountDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountDetailsRequest proto.InternalMessageInfo

func (m *AccountDetailsRequest) GetAccountKey() []byte {
	if m != nil {
		return m.AccountKey
	}
	return nil
}

func (m *AccountDetailsRequest) GetIncludeDiff() bool {
	if m != nil {
		return m.IncludeDiff
	}
	return false
}

type EditAccountRequest struct {
	// The identifying key of the account to edit details of.
	AccountKey []byte `protobuf:"bytes,1,opt,name=account_key,json=accountKey,proto3" json:"account_key,omitempty"`
	//
	//Whether the account diff, if any, should be edited instead of the main
	//account state.
	EditDiff bool `protobuf:"varint,2,opt,name=edit_diff,json=editDiff,proto3" json:"edit_diff,omitempty"`
	// The new value of the account.
	Value uint64 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	//
	//Determines how many times we should rotate the account's current batch key.
	//Negative integers decrement the key, while positive increments it.
	RotateBatchKey int32 `protobuf:"varint,4,opt,name=rotate_batch_key,json=rotateBatchKey,proto3" json:"rotate_batch_key,omitempty"`
	// The new outpoint of the account.
	Outpoint *OutPoint `protobuf:"bytes,5,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	// The new latest transaction of the account.
	LatestTx             []byte   `protobuf:"bytes,6,opt,name=latest_tx,json=latestTx,proto3" json:"latest_tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EditAccountRequest) Reset()         { *m = EditAccountRequest{} }
func (m *EditAccountRequest) String() string { return proto.CompactTextString(m) }
func (*EditAccountRequest) ProtoMessage()    {}
func (*EditAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{11}
}

func (m *EditAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EditAccountRequest.Unmarshal(m, b)
}
func (m *EditAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EditAccountRequest.Marshal(b, m, deterministic)
}
func (m *EditAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditAccountRequest.Merge(m, src)
}
func (m *EditAccountRequest) XXX_Size() int {
	return xxx_messageInfo_EditAccountRequest.Size(m)
}
func (m *EditAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EditAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EditAccountRequest proto.InternalMessageInfo

func (m *EditAccountRequest) GetAccountKey() []byte {
	if m != nil {
		return m.AccountKey
	}
	return nil
}

func (m *EditAccountRequest) GetEditDiff() bool {
	if m != nil {
		return m.EditDiff
	}
	return false
}

func (m *EditAccountRequest) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *EditAccountRequest) GetRotateBatchKey() int32 {
	if m != nil {
		return m.RotateBatchKey
	}
	return 0
}

func (m *EditAccountRequest) GetOutpoint() *OutPoint {
	if m != nil {
		return m.Outpoint
	}
	return nil
}

func (m *EditAccountRequest) GetLatestTx() []byte {
	if m != nil {
		return m.LatestTx
	}
	return nil
}

type DeleteAccountDiffRequest struct {
	// The identifying key of the account to delete the staged diff of.
	AccountKey           []byte   `protobuf:"bytes,1,opt,name=account_key,json=accountKey,proto3" json:"account_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAccountDiffRequest) Reset()         { *m = DeleteAccountDiffRequest{} }
func (m *DeleteAccountDiffRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAccountDiffRequest) ProtoMessage()    {}
func (*DeleteAccountDiffRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{12}
}

func (m *DeleteAccountDiffRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteAccountDiffRequest.Unmarshal(m, b)
}
func (m *DeleteAccountDiffRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteAccountDiffRequest.Marshal(b, m, deterministic)
}
func (m *DeleteAccountDiffRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAccountDiffRequest.Merge(m, src)
}
func (m *DeleteAccountDiffRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteAccountDiffRequest.Size(m)
}
func (m *DeleteAccountDiffRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAccountDiffRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAccountDiffRequest proto.InternalMessageInfo

func (m *DeleteAccountDiffRequest) GetAccountKey() []byte {
	if m != nil {
		return m.AccountKey
	}
	return nil
}

type ListAccountsResponse struct {
	Accounts             []*poolrpc.AuctionAccount `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ListAccountsResponse) Reset()         { *m = ListAccountsResponse{} }
func (m *ListAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*ListAccountsResponse) ProtoMessage()    {}
func (*ListAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{13}
}

func (m *ListAccountsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAccountsResponse.Unmarshal(m, b)
}
func (m *ListAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAccountsResponse.Marshal(b, m, deterministic)
}
func (m *ListAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccountsResponse.Merge(m, src)
}
func (m *ListAccountsResponse) XXX_Size() int {
	return xxx_messageInfo_ListAccountsResponse.Size(m)
}
func (m *ListAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccountsResponse proto.InternalMessageInfo

func (m *ListAccountsResponse) GetAccounts() []*poolrpc.AuctionAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type AuctionStatusResponse struct {
	// The ID of the current pending batch.
	PendingBatchId []byte `protobuf:"bytes,1,opt,name=pending_batch_id,json=pendingBatchId,proto3" json:"pending_batch_id,omitempty"`
	// The ID of the current, not yet published batch.
	CurrentBatchId []byte `protobuf:"bytes,2,opt,name=current_batch_id,json=currentBatchId,proto3" json:"current_batch_id,omitempty"`
	// The ID of the last published batch.
	LastBatchId []byte `protobuf:"bytes,3,opt,name=last_batch_id,json=lastBatchId,proto3" json:"last_batch_id,omitempty"`
	//
	//Indicates whether timed ticks are currently being used to start new batches.
	//If this is false, it means batch execution has been paused.
	BatchTickerActive bool `protobuf:"varint,4,opt,name=batch_ticker_active,json=batchTickerActive,proto3" json:"batch_ticker_active,omitempty"`
	//
	//The unix timestamp of the last timed tick. This doesn't necessarily mean
	//that the tick also resulted in a batch being executed, for example if the
	//batch ticker was paused at the time of the timed tick.
	LastTimedTick uint64 `protobuf:"varint,5,opt,name=last_timed_tick,json=lastTimedTick,proto3" json:"last_timed_tick,omitempty"`
	//
	//The number of seconds it will approximately take until the next timed tick
	//is fired. The tick will be fired in any case but it might not result in a
	//batch being executed if batch execution is currently paused.
	SecondsToNextTick uint64 `protobuf:"varint,6,opt,name=seconds_to_next_tick,json=secondsToNextTick,proto3" json:"seconds_to_next_tick,omitempty"`
	//
	//The string representation of the current auctioneer's state.
	AuctionState         string   `protobuf:"bytes,7,opt,name=auction_state,json=auctionState,proto3" json:"auction_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuctionStatusResponse) Reset()         { *m = AuctionStatusResponse{} }
func (m *AuctionStatusResponse) String() string { return proto.CompactTextString(m) }
func (*AuctionStatusResponse) ProtoMessage()    {}
func (*AuctionStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{14}
}

func (m *AuctionStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuctionStatusResponse.Unmarshal(m, b)
}
func (m *AuctionStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuctionStatusResponse.Marshal(b, m, deterministic)
}
func (m *AuctionStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionStatusResponse.Merge(m, src)
}
func (m *AuctionStatusResponse) XXX_Size() int {
	return xxx_messageInfo_AuctionStatusResponse.Size(m)
}
func (m *AuctionStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionStatusResponse proto.InternalMessageInfo

func (m *AuctionStatusResponse) GetPendingBatchId() []byte {
	if m != nil {
		return m.PendingBatchId
	}
	return nil
}

func (m *AuctionStatusResponse) GetCurrentBatchId() []byte {
	if m != nil {
		return m.CurrentBatchId
	}
	return nil
}

func (m *AuctionStatusResponse) GetLastBatchId() []byte {
	if m != nil {
		return m.LastBatchId
	}
	return nil
}

func (m *AuctionStatusResponse) GetBatchTickerActive() bool {
	if m != nil {
		return m.BatchTickerActive
	}
	return false
}

func (m *AuctionStatusResponse) GetLastTimedTick() uint64 {
	if m != nil {
		return m.LastTimedTick
	}
	return 0
}

func (m *AuctionStatusResponse) GetSecondsToNextTick() uint64 {
	if m != nil {
		return m.SecondsToNextTick
	}
	return 0
}

func (m *AuctionStatusResponse) GetAuctionState() string {
	if m != nil {
		return m.AuctionState
	}
	return ""
}

type ListBatchesResponse struct {
	//
	//A list of all batch IDs known to exist, listed in ascending order (oldest
	//batch first) with the last item being the current, not yet published batch.
	Batches              [][]byte `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListBatchesResponse) Reset()         { *m = ListBatchesResponse{} }
func (m *ListBatchesResponse) String() string { return proto.CompactTextString(m) }
func (*ListBatchesResponse) ProtoMessage()    {}
func (*ListBatchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{15}
}

func (m *ListBatchesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListBatchesResponse.Unmarshal(m, b)
}
func (m *ListBatchesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListBatchesResponse.Marshal(b, m, deterministic)
}
func (m *ListBatchesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBatchesResponse.Merge(m, src)
}
func (m *ListBatchesResponse) XXX_Size() int {
	return xxx_messageInfo_ListBatchesResponse.Size(m)
}
func (m *ListBatchesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBatchesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListBatchesResponse proto.InternalMessageInfo

func (m *ListBatchesResponse) GetBatches() [][]byte {
	if m != nil {
		return m.Batches
	}
	return nil
}

type FeeReport struct {
	// The diffs of all accounts involved in the batch.
	AccountDiffs map[string]*AccountDiff `protobuf:"bytes,1,rep,name=account_diffs,json=accountDiffs,proto3" json:"account_diffs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The total number of satoshis we earned as the auctioneer.
	AuctioneerFeesAccrued uint64   `protobuf:"varint,2,opt,name=auctioneer_fees_accrued,json=auctioneerFeesAccrued,proto3" json:"auctioneer_fees_accrued,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *FeeReport) Reset()         { *m = FeeReport{} }
func (m *FeeReport) String() string { return proto.CompactTextString(m) }
func (*FeeReport) ProtoMessage()    {}
func (*FeeReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{16}
}

func (m *FeeReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeeReport.Unmarshal(m, b)
}
func (m *FeeReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeeReport.Marshal(b, m, deterministic)
}
func (m *FeeReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeReport.Merge(m, src)
}
func (m *FeeReport) XXX_Size() int {
	return xxx_messageInfo_FeeReport.Size(m)
}
func (m *FeeReport) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeReport.DiscardUnknown(m)
}

var xxx_messageInfo_FeeReport proto.InternalMessageInfo

func (m *FeeReport) GetAccountDiffs() map[string]*AccountDiff {
	if m != nil {
		return m.AccountDiffs
	}
	return nil
}

func (m *FeeReport) GetAuctioneerFeesAccrued() uint64 {
	if m != nil {
		return m.AuctioneerFeesAccrued
	}
	return 0
}

type AccountDiff struct {
	// The account key this diff refers to.
	AccountKey []byte `protobuf:"bytes,1,opt,name=account_key,json=accountKey,proto3" json:"account_key,omitempty"`
	// The balance the trader account started with.
	StartingBalance uint64 `protobuf:"varint,2,opt,name=starting_balance,json=startingBalance,proto3" json:"starting_balance,omitempty"`
	// The ending balance of the trader's account.
	EndingBalance uint64 `protobuf:"varint,3,opt,name=ending_balance,json=endingBalance,proto3" json:"ending_balance,omitempty"`
	// The total amount of fees a trader paid to the venue.
	TotalExecFeesPaid uint64 `protobuf:"varint,4,opt,name=total_exec_fees_paid,json=totalExecFeesPaid,proto3" json:"total_exec_fees_paid,omitempty"`
	//
	//The total amount of fees the trader paid to purchase any channels in this
	//batch.
	TotalTakerFeesPaid uint64 `protobuf:"varint,5,opt,name=total_taker_fees_paid,json=totalTakerFeesPaid,proto3" json:"total_taker_fees_paid,omitempty"`
	//
	//The total amount of fees the trader gained by selling channels in this
	//batch.
	TotalMakerFeesPaid uint64 `protobuf:"varint,6,opt,name=total_maker_fees_paid,json=totalMakerFeesPaid,proto3" json:"total_maker_fees_paid,omitempty"`
	//
	//The number of new channels that were created for one account in a batch.
	//This is needed to calculate the chain fees that need to be paid from that
	//account.
	NumChansCreated      uint32   `protobuf:"varint,7,opt,name=num_chans_created,json=numChansCreated,proto3" json:"num_chans_created,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountDiff) Reset()         { *m = AccountDiff{} }
func (m *AccountDiff) String() string { return proto.CompactTextString(m) }
func (*AccountDiff) ProtoMessage()    {}
func (*AccountDiff) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{17}
}

func (m *AccountDiff) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountDiff.Unmarshal(m, b)
}
func (m *AccountDiff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountDiff.Marshal(b, m, deterministic)
}
func (m *AccountDiff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountDiff.Merge(m, src)
}
func (m *AccountDiff) XXX_Size() int {
	return xxx_messageInfo_AccountDiff.Size(m)
}
func (m *AccountDiff) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountDiff.DiscardUnknown(m)
}

var xxx_messageInfo_AccountDiff proto.InternalMessageInfo

func (m *AccountDiff) GetAccountKey() []byte {
	if m != nil {
		return m.AccountKey
	}
	return nil
}

func (m *AccountDiff) GetStartingBalance() uint64 {
	if m != nil {
		return m.StartingBalance
	}
	return 0
}

func (m *AccountDiff) GetEndingBalance() uint64 {
	if m != nil {
		return m.EndingBalance
	}
	return 0
}

func (m *AccountDiff) GetTotalExecFeesPaid() uint64 {
	if m != nil {
		return m.TotalExecFeesPaid
	}
	return 0
}

func (m *AccountDiff) GetTotalTakerFeesPaid() uint64 {
	if m != nil {
		return m.TotalTakerFeesPaid
	}
	return 0
}

func (m *AccountDiff) GetTotalMakerFeesPaid() uint64 {
	if m != nil {
		return m.TotalMakerFeesPaid
	}
	return 0
}

func (m *AccountDiff) GetNumChansCreated() uint32 {
	if m != nil {
		return m.NumChansCreated
	}
	return 0
}

type ListBansResponse struct {
	//
	//A map of all banned accounts, keyed by the trader's account key (hex
	//encoded).
	BannedAccounts map[string]*BanInfo `protobuf:"bytes,1,rep,name=banned_accounts,json=bannedAccounts,proto3" json:"banned_accounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//
	//A map of all banned nodes, keyed by the node's identity pubkey (hex
	//encoded).
	BannedNodes          map[string]*BanInfo `protobuf:"bytes,2,rep,name=banned_nodes,json=bannedNodes,proto3" json:"banned_nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ListBansResponse) Reset()         { *m = ListBansResponse{} }
func (m *ListBansResponse) String() string { return proto.CompactTextString(m) }
func (*ListBansResponse) ProtoMessage()    {}
func (*ListBansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{18}
}

func (m *ListBansResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListBansResponse.Unmarshal(m, b)
}
func (m *ListBansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListBansResponse.Marshal(b, m, deterministic)
}
func (m *ListBansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBansResponse.Merge(m, src)
}
func (m *ListBansResponse) XXX_Size() int {
	return xxx_messageInfo_ListBansResponse.Size(m)
}
func (m *ListBansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListBansResponse proto.InternalMessageInfo

func (m *ListBansResponse) GetBannedAccounts() map[string]*BanInfo {
	if m != nil {
		return m.BannedAccounts
	}
	return nil
}

func (m *ListBansResponse) GetBannedNodes() map[string]*BanInfo {
	if m != nil {
		return m.BannedNodes
	}
	return nil
}

type BanInfo struct {
	// The height at which the ban begins to apply.
	Height uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// The number of blocks the ban will last for once applied.
	Duration             uint32   `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BanInfo) Reset()         { *m = BanInfo{} }
func (m *BanInfo) String() string { return proto.CompactTextString(m) }
func (*BanInfo) ProtoMessage()    {}
func (*BanInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{19}
}

func (m *BanInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BanInfo.Unmarshal(m, b)
}
func (m *BanInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BanInfo.Marshal(b, m, deterministic)
}
func (m *BanInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BanInfo.Merge(m, src)
}
func (m *BanInfo) XXX_Size() int {
	return xxx_messageInfo_BanInfo.Size(m)
}
func (m *BanInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BanInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BanInfo proto.InternalMessageInfo

func (m *BanInfo) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BanInfo) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type RemoveBanRequest struct {
	// Types that are valid to be assigned to Ban:
	//	*RemoveBanRequest_Account
	//	*RemoveBanRequest_Node
	Ban                  isRemoveBanRequest_Ban `protobuf_oneof:"ban"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RemoveBanRequest) Reset()         { *m = RemoveBanRequest{} }
func (m *RemoveBanRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveBanRequest) ProtoMessage()    {}
func (*RemoveBanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{20}
}

func (m *RemoveBanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveBanRequest.Unmarshal(m, b)
}
func (m *RemoveBanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveBanRequest.Marshal(b, m, deterministic)
}
func (m *RemoveBanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveBanRequest.Merge(m, src)
}
func (m *RemoveBanRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveBanRequest.Size(m)
}
func (m *RemoveBanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveBanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveBanRequest proto.InternalMessageInfo

type isRemoveBanRequest_Ban interface {
	isRemoveBanRequest_Ban()
}

type RemoveBanRequest_Account struct {
	Account []byte `protobuf:"bytes,1,opt,name=account,proto3,oneof"`
}

type RemoveBanRequest_Node struct {
	Node []byte `protobuf:"bytes,2,opt,name=node,proto3,oneof"`
}

func (*RemoveBanRequest_Account) isRemoveBanRequest_Ban() {}

func (*RemoveBanRequest_Node) isRemoveBanRequest_Ban() {}

func (m *RemoveBanRequest) GetBan() isRemoveBanRequest_Ban {
	if m != nil {
		return m.Ban
	}
	return nil
}

func (m *RemoveBanRequest) GetAccount() []byte {
	if x, ok := m.GetBan().(*RemoveBanRequest_Account); ok {
		return x.Account
	}
	return nil
}

func (m *RemoveBanRequest) GetNode() []byte {
	if x, ok := m.GetBan().(*RemoveBanRequest_Node); ok {
		return x.Node
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RemoveBanRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RemoveBanRequest_Account)(nil),
		(*RemoveBanRequest_Node)(nil),
	}
}

type AdminMatchedOrderSnapshot struct {
	// The full ask order that was matched.
	Ask *poolrpc.ServerAsk `protobuf:"bytes,1,opt,name=ask,proto3" json:"ask,omitempty"`
	// The full bid order that was matched.
	Bid *poolrpc.ServerBid `protobuf:"bytes,2,opt,name=bid,proto3" json:"bid,omitempty"`
	// The fixed rate premium that was matched, expressed in parts-ber-billion.
	MatchingRate uint32 `protobuf:"varint,3,opt,name=matching_rate,json=matchingRate,proto3" json:"matching_rate,omitempty"`
	// The total number of satoshis that were bought.
	TotalSatsCleared uint64 `protobuf:"varint,4,opt,name=total_sats_cleared,json=totalSatsCleared,proto3" json:"total_sats_cleared,omitempty"`
	// The total number of units that were matched.
	UnitsMatched         uint32   `protobuf:"varint,5,opt,name=units_matched,json=unitsMatched,proto3" json:"units_matched,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdminMatchedOrderSnapshot) Reset()         { *m = AdminMatchedOrderSnapshot{} }
func (m *AdminMatchedOrderSnapshot) String() string { return proto.CompactTextString(m) }
func (*AdminMatchedOrderSnapshot) ProtoMessage()    {}
func (*AdminMatchedOrderSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{21}
}

func (m *AdminMatchedOrderSnapshot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdminMatchedOrderSnapshot.Unmarshal(m, b)
}
func (m *AdminMatchedOrderSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdminMatchedOrderSnapshot.Marshal(b, m, deterministic)
}
func (m *AdminMatchedOrderSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminMatchedOrderSnapshot.Merge(m, src)
}
func (m *AdminMatchedOrderSnapshot) XXX_Size() int {
	return xxx_messageInfo_AdminMatchedOrderSnapshot.Size(m)
}
func (m *AdminMatchedOrderSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminMatchedOrderSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_AdminMatchedOrderSnapshot proto.InternalMessageInfo

func (m *AdminMatchedOrderSnapshot) GetAsk() *poolrpc.ServerAsk {
	if m != nil {
		return m.Ask
	}
	return nil
}

func (m *AdminMatchedOrderSnapshot) GetBid() *poolrpc.ServerBid {
	if m != nil {
		return m.Bid
	}
	return nil
}

func (m *AdminMatchedOrderSnapshot) GetMatchingRate() uint32 {
	if m != nil {
		return m.MatchingRate
	}
	return 0
}

func (m *AdminMatchedOrderSnapshot) GetTotalSatsCleared() uint64 {
	if m != nil {
		return m.TotalSatsCleared
	}
	return 0
}

func (m *AdminMatchedOrderSnapshot) GetUnitsMatched() uint32 {
	if m != nil {
		return m.UnitsMatched
	}
	return 0
}

type AdminBatchSnapshotResponse struct {
	// The version of the batch.
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// The unique identifier of the batch.
	BatchId []byte `protobuf:"bytes,2,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// The unique identifier of the prior batch.
	PrevBatchId []byte `protobuf:"bytes,3,opt,name=prev_batch_id,json=prevBatchId,proto3" json:"prev_batch_id,omitempty"`
	// The uniform clearing price rate in parts per billion of the batch.
	ClearingPriceRate uint32 `protobuf:"varint,4,opt,name=clearing_price_rate,json=clearingPriceRate,proto3" json:"clearing_price_rate,omitempty"`
	// The set of all orders matched in the batch.
	MatchedOrders []*AdminMatchedOrderSnapshot `protobuf:"bytes,5,rep,name=matched_orders,json=matchedOrders,proto3" json:"matched_orders,omitempty"`
	// The txid of the batch transaction.
	BatchTxId string `protobuf:"bytes,7,opt,name=batch_tx_id,json=batchTxId,proto3" json:"batch_tx_id,omitempty"`
	// The batch transaction including all witness data.
	BatchTx              []byte   `protobuf:"bytes,6,opt,name=batch_tx,json=batchTx,proto3" json:"batch_tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdminBatchSnapshotResponse) Reset()         { *m = AdminBatchSnapshotResponse{} }
func (m *AdminBatchSnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*AdminBatchSnapshotResponse) ProtoMessage()    {}
func (*AdminBatchSnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{22}
}

func (m *AdminBatchSnapshotResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdminBatchSnapshotResponse.Unmarshal(m, b)
}
func (m *AdminBatchSnapshotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdminBatchSnapshotResponse.Marshal(b, m, deterministic)
}
func (m *AdminBatchSnapshotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminBatchSnapshotResponse.Merge(m, src)
}
func (m *AdminBatchSnapshotResponse) XXX_Size() int {
	return xxx_messageInfo_AdminBatchSnapshotResponse.Size(m)
}
func (m *AdminBatchSnapshotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminBatchSnapshotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AdminBatchSnapshotResponse proto.InternalMessageInfo

func (m *AdminBatchSnapshotResponse) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *AdminBatchSnapshotResponse) GetBatchId() []byte {
	if m != nil {
		return m.BatchId
	}
	return nil
}

func (m *AdminBatchSnapshotResponse) GetPrevBatchId() []byte {
	if m != nil {
		return m.PrevBatchId
	}
	return nil
}

func (m *AdminBatchSnapshotResponse) GetClearingPriceRate() uint32 {
	if m != nil {
		return m.ClearingPriceRate
	}
	return 0
}

func (m *AdminBatchSnapshotResponse) GetMatchedOrders() []*AdminMatchedOrderSnapshot {
	if m != nil {
		return m.MatchedOrders
	}
	return nil
}

func (m *AdminBatchSnapshotResponse) GetBatchTxId() string {
	if m != nil {
		return m.BatchTxId
	}
	return ""
}

func (m *AdminBatchSnapshotResponse) GetBatchTx() []byte {
	if m != nil {
		return m.BatchTx
	}
	return nil
}

type RemoveReservationRequest struct {
	// Types that are valid to be assigned to Reservation:
	//	*RemoveReservationRequest_TraderKey
	//	*RemoveReservationRequest_Lsat
	Reservation          isRemoveReservationRequest_Reservation `protobuf_oneof:"reservation"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *RemoveReservationRequest) Reset()         { *m = RemoveReservationRequest{} }
func (m *RemoveReservationRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveReservationRequest) ProtoMessage()    {}
func (*RemoveReservationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{23}
}

func (m *RemoveReservationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveReservationRequest.Unmarshal(m, b)
}
func (m *RemoveReservationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveReservationRequest.Marshal(b, m, deterministic)
}
func (m *RemoveReservationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveReservationRequest.Merge(m, src)
}
func (m *RemoveReservationRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveReservationRequest.Size(m)
}
func (m *RemoveReservationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveReservationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveReservationRequest proto.InternalMessageInfo

type isRemoveReservationRequest_Reservation interface {
	isRemoveReservationRequest_Reservation()
}

type RemoveReservationRequest_TraderKey struct {
	TraderKey []byte `protobuf:"bytes,1,opt,name=trader_key,json=traderKey,proto3,oneof"`
}

type RemoveReservationRequest_Lsat struct {
	Lsat []byte `protobuf:"bytes,2,opt,name=lsat,proto3,oneof"`
}

func (*RemoveReservationRequest_TraderKey) isRemoveReservationRequest_Reservation() {}

func (*RemoveReservationRequest_Lsat) isRemoveReservationRequest_Reservation() {}

func (m *RemoveReservationRequest) GetReservation() isRemoveReservationRequest_Reservation {
	if m != nil {
		return m.Reservation
	}
	return nil
}

func (m *RemoveReservationRequest) GetTraderKey() []byte {
	if x, ok := m.GetReservation().(*RemoveReservationRequest_TraderKey); ok {
		return x.TraderKey
	}
	return nil
}

func (m *RemoveReservationRequest) GetLsat() []byte {
	if x, ok := m.GetReservation().(*RemoveReservationRequest_Lsat); ok {
		return x.Lsat
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RemoveReservationRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RemoveReservationRequest_TraderKey)(nil),
		(*RemoveReservationRequest_Lsat)(nil),
	}
}

type FundingConflictsResponse struct {
	//
	//A map that is keyed by the hex encoded node ID of the reporting node and a
	//list of all conflicts that node reported.
	Conflicts            map[string]*ConflictList `protobuf:"bytes,1,rep,name=conflicts,proto3" json:"conflicts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *FundingConflictsResponse) Reset()         { *m = FundingConflictsResponse{} }
func (m *FundingConflictsResponse) String() string { return proto.CompactTextString(m) }
func (*FundingConflictsResponse) ProtoMessage()    {}
func (*FundingConflictsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{24}
}

func (m *FundingConflictsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FundingConflictsResponse.Unmarshal(m, b)
}
func (m *FundingConflictsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FundingConflictsResponse.Marshal(b, m, deterministic)
}
func (m *FundingConflictsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundingConflictsResponse.Merge(m, src)
}
func (m *FundingConflictsResponse) XXX_Size() int {
	return xxx_messageInfo_FundingConflictsResponse.Size(m)
}
func (m *FundingConflictsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FundingConflictsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FundingConflictsResponse proto.InternalMessageInfo

func (m *FundingConflictsResponse) GetConflicts() map[string]*ConflictList {
	if m != nil {
		return m.Conflicts
	}
	return nil
}

type ConflictList struct {
	// The list of all reported conflicts.
	Conflicts            []*Conflict `protobuf:"bytes,1,rep,name=conflicts,proto3" json:"conflicts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ConflictList) Reset()         { *m = ConflictList{} }
func (m *ConflictList) String() string { return proto.CompactTextString(m) }
func (*ConflictList) ProtoMessage()    {}
func (*ConflictList) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{25}
}

func (m *ConflictList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConflictList.Unmarshal(m, b)
}
func (m *ConflictList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConflictList.Marshal(b, m, deterministic)
}
func (m *ConflictList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConflictList.Merge(m, src)
}
func (m *ConflictList) XXX_Size() int {
	return xxx_messageInfo_ConflictList.Size(m)
}
func (m *ConflictList) XXX_DiscardUnknown() {
	xxx_messageInfo_ConflictList.DiscardUnknown(m)
}

var xxx_messageInfo_ConflictList proto.InternalMessageInfo

func (m *ConflictList) GetConflicts() []*Conflict {
	if m != nil {
		return m.Conflicts
	}
	return nil
}

type Conflict struct {
	// The hex encoded node ID of the subject of the report.
	Subject string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// The reported reason for the conflict.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// The unix timestamp in seconds of the time the conflict was reported.
	ReportTimestamp      int64    `protobuf:"varint,3,opt,name=report_timestamp,json=reportTimestamp,proto3" json:"report_timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Conflict) Reset()         { *m = Conflict{} }
func (m *Conflict) String() string { return proto.CompactTextString(m) }
func (*Conflict) ProtoMessage()    {}
func (*Conflict) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{26}
}

func (m *Conflict) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Conflict.Unmarshal(m, b)
}
func (m *Conflict) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Conflict.Marshal(b, m, deterministic)
}
func (m *Conflict) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Conflict.Merge(m, src)
}
func (m *Conflict) XXX_Size() int {
	return xxx_messageInfo_Conflict.Size(m)
}
func (m *Conflict) XXX_DiscardUnknown() {
	xxx_messageInfo_Conflict.DiscardUnknown(m)
}

var xxx_messageInfo_Conflict proto.InternalMessageInfo

func (m *Conflict) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *Conflict) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Conflict) GetReportTimestamp() int64 {
	if m != nil {
		return m.ReportTimestamp
	}
	return 0
}

type RatingQueryRequest struct {
	// The node to query a rating for.
	NodeKey              []byte   `protobuf:"bytes,1,opt,name=node_key,json=nodeKey,proto3" json:"node_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RatingQueryRequest) Reset()         { *m = RatingQueryRequest{} }
func (m *RatingQueryRequest) String() string { return proto.CompactTextString(m) }
func (*RatingQueryRequest) ProtoMessage()    {}
func (*RatingQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{27}
}

func (m *RatingQueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RatingQueryRequest.Unmarshal(m, b)
}
func (m *RatingQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RatingQueryRequest.Marshal(b, m, deterministic)
}
func (m *RatingQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RatingQueryRequest.Merge(m, src)
}
func (m *RatingQueryRequest) XXX_Size() int {
	return xxx_messageInfo_RatingQueryRequest.Size(m)
}
func (m *RatingQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RatingQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RatingQueryRequest proto.InternalMessageInfo

func (m *RatingQueryRequest) GetNodeKey() []byte {
	if m != nil {
		return m.NodeKey
	}
	return nil
}

type RatingQueryResponse struct {
	// The node this rating belongs to.
	NodeKey []byte `protobuf:"bytes,1,opt,name=node_key,json=nodeKey,proto3" json:"node_key,omitempty"`
	// The ratings tier this node belongs to. zero means they aren't ranked.
	NodeTier             uint32   `protobuf:"varint,2,opt,name=node_tier,json=nodeTier,proto3" json:"node_tier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RatingQueryResponse) Reset()         { *m = RatingQueryResponse{} }
func (m *RatingQueryResponse) String() string { return proto.CompactTextString(m) }
func (*RatingQueryResponse) ProtoMessage()    {}
func (*RatingQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{28}
}

func (m *RatingQueryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RatingQueryResponse.Unmarshal(m, b)
}
func (m *RatingQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RatingQueryResponse.Marshal(b, m, deterministic)
}
func (m *RatingQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RatingQueryResponse.Merge(m, src)
}
func (m *RatingQueryResponse) XXX_Size() int {
	return xxx_messageInfo_RatingQueryResponse.Size(m)
}
func (m *RatingQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RatingQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RatingQueryResponse proto.InternalMessageInfo

func (m *RatingQueryResponse) GetNodeKey() []byte {
	if m != nil {
		return m.NodeKey
	}
	return nil
}

func (m *RatingQueryResponse) GetNodeTier() uint32 {
	if m != nil {
		return m.NodeTier
	}
	return 0
}

type ModifyRatingRequest struct {
	// The node this rating belongs to.
	NodeKey []byte `protobuf:"bytes,1,opt,name=node_key,json=nodeKey,proto3" json:"node_key,omitempty"`
	// The new node tier this node should be placed in.
	NewNodeTier          uint32   `protobuf:"varint,2,opt,name=new_node_tier,json=newNodeTier,proto3" json:"new_node_tier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModifyRatingRequest) Reset()         { *m = ModifyRatingRequest{} }
func (m *ModifyRatingRequest) String() string { return proto.CompactTextString(m) }
func (*ModifyRatingRequest) ProtoMessage()    {}
func (*ModifyRatingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{29}
}

func (m *ModifyRatingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModifyRatingRequest.Unmarshal(m, b)
}
func (m *ModifyRatingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModifyRatingRequest.Marshal(b, m, deterministic)
}
func (m *ModifyRatingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifyRatingRequest.Merge(m, src)
}
func (m *ModifyRatingRequest) XXX_Size() int {
	return xxx_messageInfo_ModifyRatingRequest.Size(m)
}
func (m *ModifyRatingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifyRatingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ModifyRatingRequest proto.InternalMessageInfo

func (m *ModifyRatingRequest) GetNodeKey() []byte {
	if m != nil {
		return m.NodeKey
	}
	return nil
}

func (m *ModifyRatingRequest) GetNewNodeTier() uint32 {
	if m != nil {
		return m.NewNodeTier
	}
	return 0
}

type ModifyRatingResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModifyRatingResponse) Reset()         { *m = ModifyRatingResponse{} }
func (m *ModifyRatingResponse) String() string { return proto.CompactTextString(m) }
func (*ModifyRatingResponse) ProtoMessage()    {}
func (*ModifyRatingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{30}
}

func (m *ModifyRatingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModifyRatingResponse.Unmarshal(m, b)
}
func (m *ModifyRatingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModifyRatingResponse.Marshal(b, m, deterministic)
}
func (m *ModifyRatingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifyRatingResponse.Merge(m, src)
}
func (m *ModifyRatingResponse) XXX_Size() int {
	return xxx_messageInfo_ModifyRatingResponse.Size(m)
}
func (m *ModifyRatingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifyRatingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ModifyRatingResponse proto.InternalMessageInfo

type BumpBatchFeeRateRequest struct {
	// Request the next batch transaction to bump the effective fee rate of all
	// unconfirmed batches to a fee estimate for this confirmation target.
	ConfTarget uint32 `protobuf:"varint,1,opt,name=conf_target,json=confTarget,proto3" json:"conf_target,omitempty"`
	// Request the next batch transaction to bump the effective fee rate of all
	// unconfirmed batches to this exact fee rate.
	FeeRateSatPerKw      uint32   `protobuf:"varint,2,opt,name=fee_rate_sat_per_kw,json=feeRateSatPerKw,proto3" json:"fee_rate_sat_per_kw,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BumpBatchFeeRateRequest) Reset()         { *m = BumpBatchFeeRateRequest{} }
func (m *BumpBatchFeeRateRequest) String() string { return proto.CompactTextString(m) }
func (*BumpBatchFeeRateRequest) ProtoMessage()    {}
func (*BumpBatchFeeRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{31}
}

func (m *BumpBatchFeeRateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BumpBatchFeeRateRequest.Unmarshal(m, b)
}
func (m *BumpBatchFeeRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BumpBatchFeeRateRequest.Marshal(b, m, deterministic)
}
func (m *BumpBatchFeeRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BumpBatchFeeRateRequest.Merge(m, src)
}
func (m *BumpBatchFeeRateRequest) XXX_Size() int {
	return xxx_messageInfo_BumpBatchFeeRateRequest.Size(m)
}
func (m *BumpBatchFeeRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BumpBatchFeeRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BumpBatchFeeRateRequest proto.InternalMessageInfo

func (m *BumpBatchFeeRateRequest) GetConfTarget() uint32 {
	if m != nil {
		return m.ConfTarget
	}
	return 0
}

func (m *BumpBatchFeeRateRequest) GetFeeRateSatPerKw() uint32 {
	if m != nil {
		return m.FeeRateSatPerKw
	}
	return 0
}

type NodeRating struct {
	NodeKey              []byte   `protobuf:"bytes,1,opt,name=node_key,json=nodeKey,proto3" json:"node_key,omitempty"`
	NodeTier             uint32   `protobuf:"varint,2,opt,name=node_tier,json=nodeTier,proto3" json:"node_tier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeRating) Reset()         { *m = NodeRating{} }
func (m *NodeRating) String() string { return proto.CompactTextString(m) }
func (*NodeRating) ProtoMessage()    {}
func (*NodeRating) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{32}
}

func (m *NodeRating) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeRating.Unmarshal(m, b)
}
func (m *NodeRating) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeRating.Marshal(b, m, deterministic)
}
func (m *NodeRating) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeRating.Merge(m, src)
}
func (m *NodeRating) XXX_Size() int {
	return xxx_messageInfo_NodeRating.Size(m)
}
func (m *NodeRating) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeRating.DiscardUnknown(m)
}

var xxx_messageInfo_NodeRating proto.InternalMessageInfo

func (m *NodeRating) GetNodeKey() []byte {
	if m != nil {
		return m.NodeKey
	}
	return nil
}

func (m *NodeRating) GetNodeTier() uint32 {
	if m != nil {
		return m.NodeTier
	}
	return 0
}

type ListNodeRatingsResponse struct {
	NodeRatings          []*NodeRating `protobuf:"bytes,1,rep,name=node_ratings,json=nodeRatings,proto3" json:"node_ratings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListNodeRatingsResponse) Reset()         { *m = ListNodeRatingsResponse{} }
func (m *ListNodeRatingsResponse) String() string { return proto.CompactTextString(m) }
func (*ListNodeRatingsResponse) ProtoMessage()    {}
func (*ListNodeRatingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{33}
}

func (m *ListNodeRatingsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNodeRatingsResponse.Unmarshal(m, b)
}
func (m *ListNodeRatingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNodeRatingsResponse.Marshal(b, m, deterministic)
}
func (m *ListNodeRatingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNodeRatingsResponse.Merge(m, src)
}
func (m *ListNodeRatingsResponse) XXX_Size() int {
	return xxx_messageInfo_ListNodeRatingsResponse.Size(m)
}
func (m *ListNodeRatingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNodeRatingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNodeRatingsResponse proto.InternalMessageInfo

func (m *ListNodeRatingsResponse) GetNodeRatings() []*NodeRating {
	if m != nil {
		return m.NodeRatings
	}
	return nil
}

func init() {
	proto.RegisterType((*EmptyRequest)(nil), "adminrpc.EmptyRequest")
	proto.RegisterType((*EmptyResponse)(nil), "adminrpc.EmptyResponse")
	proto.RegisterType((*MasterAccountResponse)(nil), "adminrpc.MasterAccountResponse")
	proto.RegisterType((*ConnectedTradersResponse)(nil), "adminrpc.ConnectedTradersResponse")
	proto.RegisterMapType((map[string]*PubKeyList)(nil), "adminrpc.ConnectedTradersResponse.StreamsEntry")
	proto.RegisterType((*PubKeyList)(nil), "adminrpc.PubKeyList")
	proto.RegisterType((*OutPoint)(nil), "adminrpc.OutPoint")
	proto.RegisterType((*KeyLocator)(nil), "adminrpc.KeyLocator")
	proto.RegisterType((*KeyDescriptor)(nil), "adminrpc.KeyDescriptor")
	proto.RegisterType((*ListOrdersRequest)(nil), "adminrpc.ListOrdersRequest")
	proto.RegisterType((*ListOrdersResponse)(nil), "adminrpc.ListOrdersResponse")
	proto.RegisterType((*AccountDetailsRequest)(nil), "adminrpc.AccountDetailsRequest")
	proto.RegisterType((*EditAccountRequest)(nil), "adminrpc.EditAccountRequest")
	proto.RegisterType((*DeleteAccountDiffRequest)(nil), "adminrpc.DeleteAccountDiffRequest")
	proto.RegisterType((*ListAccountsResponse)(nil), "adminrpc.ListAccountsResponse")
	proto.RegisterType((*AuctionStatusResponse)(nil), "adminrpc.AuctionStatusResponse")
	proto.RegisterType((*ListBatchesResponse)(nil), "adminrpc.ListBatchesResponse")
	proto.RegisterType((*FeeReport)(nil), "adminrpc.FeeReport")
	proto.RegisterMapType((map[string]*AccountDiff)(nil), "adminrpc.FeeReport.AccountDiffsEntry")
	proto.RegisterType((*AccountDiff)(nil), "adminrpc.AccountDiff")
	proto.RegisterType((*ListBansResponse)(nil), "adminrpc.ListBansResponse")
	proto.RegisterMapType((map[string]*BanInfo)(nil), "adminrpc.ListBansResponse.BannedAccountsEntry")
	proto.RegisterMapType((map[string]*BanInfo)(nil), "adminrpc.ListBansResponse.BannedNodesEntry")
	proto.RegisterType((*BanInfo)(nil), "adminrpc.BanInfo")
	proto.RegisterType((*RemoveBanRequest)(nil), "adminrpc.RemoveBanRequest")
	proto.RegisterType((*AdminMatchedOrderSnapshot)(nil), "adminrpc.AdminMatchedOrderSnapshot")
	proto.RegisterType((*AdminBatchSnapshotResponse)(nil), "adminrpc.AdminBatchSnapshotResponse")
	proto.RegisterType((*RemoveReservationRequest)(nil), "adminrpc.RemoveReservationRequest")
	proto.RegisterType((*FundingConflictsResponse)(nil), "adminrpc.FundingConflictsResponse")
	proto.RegisterMapType((map[string]*ConflictList)(nil), "adminrpc.FundingConflictsResponse.ConflictsEntry")
	proto.RegisterType((*ConflictList)(nil), "adminrpc.ConflictList")
	proto.RegisterType((*Conflict)(nil), "adminrpc.Conflict")
	proto.RegisterType((*RatingQueryRequest)(nil), "adminrpc.RatingQueryRequest")
	proto.RegisterType((*RatingQueryResponse)(nil), "adminrpc.RatingQueryResponse")
	proto.RegisterType((*ModifyRatingRequest)(nil), "adminrpc.ModifyRatingRequest")
	proto.RegisterType((*ModifyRatingResponse)(nil), "adminrpc.ModifyRatingResponse")
	proto.RegisterType((*BumpBatchFeeRateRequest)(nil), "adminrpc.BumpBatchFeeRateRequest")
	proto.RegisterType((*NodeRating)(nil), "adminrpc.NodeRating")
	proto.RegisterType((*ListNodeRatingsResponse)(nil), "adminrpc.ListNodeRatingsResponse")
}

func init() { proto.RegisterFile("admin.proto", fileDescriptor_73a7fc70dcc2027c) }

var fileDescriptor_73a7fc70dcc2027c = []byte{
	// 2087 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x38, 0x49, 0x73, 0x1b, 0xc7,
	0xd5, 0x02, 0x09, 0x92, 0xc0, 0xc3, 0x42, 0xa0, 0x49, 0x8a, 0x30, 0xf4, 0xc9, 0x92, 0xc6, 0xcb,
	0xc7, 0xd8, 0x0a, 0x68, 0xcb, 0x55, 0x49, 0x2a, 0x8b, 0xcb, 0x04, 0x29, 0x85, 0x12, 0x2d, 0x8a,
	0x6e, 0xa2, 0x92, 0x43, 0x0e, 0x93, 0xc6, 0xcc, 0x83, 0x38, 0x01, 0x30, 0x83, 0xf4, 0xf4, 0x90,
	0xc0, 0x7f, 0xca, 0x3d, 0xa7, 0x1c, 0x52, 0xf9, 0x13, 0xb9, 0xe5, 0x92, 0xaa, 0xfc, 0x82, 0xdc,
	0x53, 0xdd, 0x3d, 0x8d, 0xe9, 0xc1, 0x62, 0x29, 0xf1, 0x6d, 0xfa, 0x6d, 0xfd, 0xfa, 0xed, 0x6f,
	0xa0, 0xc2, 0xfc, 0x71, 0x10, 0x76, 0x26, 0x3c, 0x12, 0x11, 0x29, 0xa9, 0x03, 0x9f, 0x78, 0xed,
	0xd6, 0x24, 0x8a, 0x46, 0x7c, 0xe2, 0x1d, 0xb3, 0xc4, 0x13, 0x41, 0x14, 0x22, 0x72, 0x4d, 0xe3,
	0xd4, 0xa1, 0xfa, 0x7c, 0x3c, 0x11, 0x33, 0x8a, 0x7f, 0x4c, 0x30, 0x16, 0xce, 0x2e, 0xd4, 0xd2,
	0x73, 0x3c, 0x89, 0xc2, 0x18, 0x9d, 0xbf, 0x17, 0xe0, 0xe0, 0x35, 0x8b, 0x05, 0xf2, 0x13, 0xcf,
	0x8b, 0x92, 0x50, 0x18, 0x0c, 0xe9, 0x40, 0x29, 0x4a, 0xc4, 0x24, 0x0a, 0x42, 0xd1, 0x2a, 0x3c,
	0x2e, 0x1c, 0x55, 0x9e, 0x91, 0x8e, 0xb9, 0xb1, 0xf3, 0x26, 0x11, 0x57, 0x12, 0x43, 0xe7, 0x34,
	0xa4, 0x05, 0x3b, 0x7d, 0x36, 0x62, 0xa1, 0x87, 0xad, 0x8d, 0xc7, 0x85, 0xa3, 0x4d, 0x6a, 0x8e,
	0xe4, 0x6b, 0xa8, 0x0f, 0x71, 0xe6, 0xfa, 0x18, 0x7b, 0x3c, 0x98, 0x88, 0x88, 0xb7, 0x36, 0x95,
	0xbc, 0xc3, 0x4c, 0xde, 0x05, 0xce, 0xce, 0xe6, 0x68, 0x5a, 0x1b, 0xda, 0x47, 0xf2, 0x00, 0xca,
	0x7d, 0x26, 0xbc, 0x1b, 0x77, 0x88, 0xb3, 0x56, 0xf1, 0x71, 0xe1, 0xa8, 0x4a, 0x4b, 0x0a, 0x70,
	0x81, 0x33, 0x79, 0xed, 0x04, 0x43, 0x3f, 0x08, 0xdf, 0xb6, 0xb6, 0x1e, 0x17, 0x8e, 0x4a, 0xd4,
	0x1c, 0x9d, 0x3f, 0x17, 0xa0, 0x75, 0x1a, 0x85, 0x21, 0x7a, 0x02, 0xfd, 0x1e, 0x67, 0x3e, 0xf2,
	0x78, 0xfe, 0xba, 0x97, 0xb0, 0x13, 0x0b, 0x8e, 0x6c, 0x1c, 0xb7, 0x0a, 0x8f, 0x37, 0x8f, 0x2a,
	0xcf, 0x8e, 0x33, 0x65, 0xd6, 0x31, 0x75, 0xae, 0x35, 0xc7, 0xf3, 0x50, 0xf0, 0x19, 0x35, 0xfc,
	0xed, 0x2b, 0xa8, 0xda, 0x08, 0xd2, 0x80, 0x4d, 0xa9, 0xa8, 0xb4, 0x59, 0x99, 0xca, 0x4f, 0xf2,
	0x19, 0x6c, 0xdd, 0xb2, 0x51, 0xa2, 0x0d, 0x53, 0x79, 0xb6, 0x9f, 0x5d, 0x75, 0x95, 0xf4, 0x2f,
	0x70, 0xf6, 0x6d, 0x10, 0x0b, 0xaa, 0x49, 0x7e, 0xbe, 0xf1, 0xb3, 0x82, 0xf3, 0x05, 0x40, 0x86,
	0x20, 0x0e, 0xd4, 0x38, 0xbb, 0x93, 0x8f, 0x77, 0xfb, 0x33, 0x81, 0x5a, 0xe1, 0x2a, 0xad, 0x70,
	0x76, 0x77, 0x81, 0xb3, 0xae, 0x04, 0x39, 0x5d, 0x28, 0x19, 0x97, 0x10, 0x02, 0x45, 0x31, 0x0d,
	0x7c, 0xa5, 0x40, 0x95, 0xaa, 0x6f, 0xe2, 0x40, 0x55, 0x3a, 0x2a, 0x11, 0x6e, 0x10, 0xfa, 0x38,
	0x55, 0x8a, 0xd4, 0x68, 0x0e, 0xe6, 0x9c, 0x03, 0xc8, 0x2b, 0x23, 0x8f, 0x49, 0xa3, 0x3f, 0x04,
	0x90, 0x37, 0x0e, 0xd8, 0x38, 0x18, 0xe9, 0xc7, 0x6c, 0xd1, 0xf2, 0x10, 0x67, 0x2f, 0x14, 0x40,
	0xfa, 0x44, 0xa2, 0x33, 0x69, 0x5b, 0xb4, 0x34, 0xc4, 0xd9, 0x4b, 0x25, 0xa9, 0x0f, 0xb5, 0x9c,
	0x43, 0x57, 0x3d, 0xa1, 0xb0, 0xf0, 0x04, 0xf2, 0x63, 0xd8, 0x91, 0xf8, 0x51, 0xe4, 0x2d, 0x9b,
	0x29, 0xd3, 0x8b, 0x6e, 0x0f, 0xd5, 0xb7, 0x73, 0x0c, 0x4d, 0x69, 0x9d, 0x37, 0x5c, 0x7b, 0x48,
	0x85, 0x37, 0x69, 0x43, 0x89, 0x71, 0xef, 0x26, 0xb8, 0x45, 0xfd, 0xfc, 0x12, 0x9d, 0x9f, 0x1d,
	0x1f, 0x88, 0xcd, 0x90, 0xc6, 0xc1, 0xa7, 0x50, 0x64, 0xf1, 0xd0, 0x04, 0x01, 0xe9, 0xa4, 0x99,
	0xd4, 0xb9, 0x46, 0x7e, 0x8b, 0xfc, 0x24, 0x1e, 0x52, 0x85, 0x97, 0x74, 0xfd, 0xc0, 0x8f, 0x5b,
	0x1b, 0x2b, 0xe9, 0xba, 0x81, 0x4f, 0x15, 0xde, 0xf9, 0x1d, 0x1c, 0xa4, 0x89, 0x74, 0x86, 0x82,
	0x05, 0xa3, 0xb9, 0x6a, 0x8f, 0xa0, 0xc2, 0x34, 0xc2, 0x35, 0xd1, 0x51, 0xa5, 0x90, 0x82, 0x64,
	0x20, 0x3f, 0x81, 0x6a, 0x10, 0x7a, 0xa3, 0xc4, 0x47, 0xd7, 0x0f, 0x06, 0x03, 0x65, 0x84, 0x12,
	0xad, 0xa4, 0xb0, 0xb3, 0x60, 0x30, 0x70, 0xfe, 0x51, 0x00, 0xf2, 0xdc, 0x0f, 0xc4, 0x3c, 0x55,
	0xdf, 0x53, 0xf4, 0x03, 0x28, 0xa3, 0x1f, 0x08, 0x5b, 0x6e, 0x49, 0x02, 0xa4, 0x50, 0xb2, 0x6f,
	0x82, 0x53, 0x26, 0x65, 0x31, 0x0d, 0x43, 0x72, 0x04, 0x0d, 0x1e, 0x09, 0x26, 0xd0, 0xcd, 0xa7,
	0xde, 0x16, 0xad, 0x6b, 0x78, 0xd7, 0x24, 0xa0, 0x5d, 0x27, 0xb6, 0xde, 0xa3, 0x4e, 0x3c, 0x80,
	0xf2, 0x88, 0x09, 0x8c, 0x85, 0x2b, 0xa6, 0xad, 0x6d, 0x9d, 0xcd, 0x1a, 0xd0, 0x9b, 0x3a, 0xbf,
	0x80, 0xd6, 0x19, 0x8e, 0x50, 0xa0, 0x31, 0x62, 0x30, 0x18, 0xbc, 0xef, 0x33, 0x9d, 0x0b, 0xd8,
	0x97, 0x1e, 0x4e, 0x59, 0x33, 0x1f, 0x7f, 0x05, 0xa5, 0x94, 0xca, 0xf8, 0xf9, 0x70, 0xee, 0xbf,
	0x13, 0x5d, 0x31, 0x8d, 0x45, 0xe7, 0x84, 0xce, 0x5f, 0x36, 0xe0, 0x20, 0x45, 0x5e, 0x0b, 0x26,
	0x92, 0x4c, 0xdc, 0x11, 0x34, 0xd2, 0x12, 0x93, 0xda, 0x66, 0x9e, 0x6b, 0xf5, 0x14, 0xae, 0x6c,
	0xf3, 0xd2, 0x97, 0x94, 0x5e, 0xc2, 0x39, 0x86, 0x22, 0xa3, 0xdc, 0xd0, 0x94, 0x29, 0xdc, 0x50,
	0x3a, 0x50, 0x1b, 0xb1, 0xd8, 0x22, 0xdb, 0xd4, 0x09, 0x22, 0x81, 0x86, 0xa6, 0x03, 0x7b, 0x1a,
	0x2d, 0x02, 0x6f, 0x88, 0xdc, 0x65, 0x9e, 0x08, 0x6e, 0x51, 0x79, 0xa5, 0x44, 0x9b, 0x0a, 0xd5,
	0x53, 0x98, 0x13, 0x85, 0x20, 0x9f, 0xc2, 0xae, 0x92, 0x29, 0x82, 0x31, 0xfa, 0x8a, 0x49, 0xf9,
	0xa7, 0x48, 0xd5, 0x55, 0x3d, 0x09, 0x95, 0xf4, 0xe4, 0x18, 0xf6, 0x63, 0xf4, 0xa2, 0xd0, 0x8f,
	0x5d, 0x11, 0xb9, 0x21, 0x4e, 0x85, 0x26, 0xde, 0x56, 0xc4, 0xcd, 0x14, 0xd7, 0x8b, 0x2e, 0x71,
	0x2a, 0x14, 0xc3, 0x47, 0x50, 0x4b, 0x1b, 0x8d, 0x1b, 0xcb, 0x50, 0x68, 0xed, 0xa8, 0x52, 0x57,
	0x65, 0x99, 0xb9, 0xd0, 0x39, 0x86, 0x3d, 0xe9, 0x0c, 0xa5, 0x3c, 0x66, 0xc6, 0x53, 0x5d, 0x42,
	0x81, 0xd2, 0x32, 0x66, 0x8e, 0xce, 0xbf, 0x0a, 0x50, 0x7e, 0x81, 0x48, 0x71, 0x12, 0x71, 0x41,
	0x5e, 0x41, 0xcd, 0x38, 0x5b, 0x46, 0xad, 0x71, 0xdc, 0x27, 0x59, 0x68, 0xcd, 0x69, 0x3b, 0x56,
	0xac, 0xa4, 0xb5, 0xb9, 0xca, 0x2c, 0x10, 0xf9, 0x09, 0x1c, 0x66, 0x8d, 0xd1, 0x1d, 0x20, 0xc6,
	0x2e, 0xf3, 0x3c, 0x9e, 0xa0, 0xf6, 0x46, 0x91, 0x1e, 0x64, 0xe8, 0x17, 0x88, 0xf1, 0x89, 0x46,
	0xb6, 0x7f, 0x03, 0xcd, 0x25, 0xd1, 0x2b, 0xaa, 0xfb, 0xe7, 0xf9, 0xea, 0x7e, 0x90, 0xa9, 0x68,
	0x07, 0xb1, 0x55, 0xde, 0xff, 0xb6, 0x01, 0x15, 0x0b, 0xf5, 0xee, 0xfc, 0xfd, 0x11, 0x34, 0x62,
	0xc1, 0xb8, 0xd0, 0x21, 0x97, 0xf5, 0xd8, 0x22, 0xdd, 0x35, 0xf0, 0x6e, 0xda, 0x6b, 0x3f, 0x81,
	0xfa, 0x3c, 0x36, 0x35, 0xa1, 0x4e, 0xeb, 0x9a, 0x89, 0x4c, 0x4d, 0x76, 0x0c, 0xfb, 0x22, 0x12,
	0x6c, 0xe4, 0xe2, 0x14, 0x3d, 0x6d, 0x92, 0x09, 0x0b, 0x7c, 0x15, 0x4c, 0x45, 0xda, 0x54, 0xb8,
	0xe7, 0x53, 0xf4, 0xa4, 0x39, 0xae, 0x58, 0xe0, 0x93, 0x2f, 0xe1, 0x40, 0x33, 0x08, 0x36, 0x34,
	0x46, 0x54, 0x1c, 0x3a, 0xa4, 0x88, 0x42, 0xf6, 0x24, 0x6e, 0x99, 0x65, 0xbc, 0xc0, 0xb2, 0x6d,
	0xb1, 0xbc, 0xce, 0xb1, 0x7c, 0x06, 0xcd, 0x30, 0x19, 0xbb, 0xde, 0x0d, 0x0b, 0x63, 0xd7, 0xe3,
	0xc8, 0x04, 0xfa, 0x2a, 0xba, 0x6a, 0x74, 0x37, 0x4c, 0xc6, 0xa7, 0x12, 0x7e, 0xaa, 0xc1, 0xce,
	0x3f, 0x37, 0xa0, 0xa1, 0x23, 0x2c, 0xcc, 0xc2, 0xeb, 0xb7, 0xb0, 0xdb, 0x67, 0x61, 0x88, 0xbe,
	0xbb, 0x90, 0xf1, 0x9d, 0xcc, 0x2b, 0x8b, 0x4c, 0x9d, 0xae, 0xe2, 0x30, 0x65, 0x43, 0x47, 0x50,
	0xbd, 0x9f, 0x03, 0x92, 0x4b, 0xa8, 0xa6, 0x82, 0xc3, 0xc8, 0x47, 0xd3, 0x07, 0x3e, 0x7f, 0xa7,
	0xd4, 0x4b, 0x49, 0xad, 0x45, 0x56, 0xfa, 0x19, 0xa4, 0xdd, 0x83, 0xbd, 0x15, 0xd7, 0xae, 0x88,
	0xae, 0xff, 0xcf, 0x47, 0x57, 0x33, 0xbb, 0xb1, 0xcb, 0xc2, 0x97, 0xe1, 0x20, 0xb2, 0x22, 0xab,
	0xfd, 0x1d, 0x34, 0x16, 0xaf, 0xfd, 0x81, 0x22, 0x9d, 0x5f, 0xc1, 0x4e, 0x0a, 0x25, 0xf7, 0x61,
	0xfb, 0x06, 0x83, 0xb7, 0x37, 0x7a, 0x1e, 0xac, 0xd1, 0xf4, 0x24, 0xbb, 0xae, 0x9f, 0x70, 0x26,
	0x33, 0x28, 0x1d, 0x2c, 0xe6, 0x67, 0xe7, 0x02, 0x1a, 0x14, 0xc7, 0xd1, 0x2d, 0x76, 0x59, 0x98,
	0x75, 0xe9, 0x9d, 0xd4, 0x3b, 0x3a, 0xd6, 0xcf, 0xef, 0x51, 0x03, 0x20, 0xfb, 0x50, 0x94, 0x06,
	0xd6, 0x65, 0xf2, 0xfc, 0x1e, 0x55, 0xa7, 0xee, 0x16, 0x6c, 0xf6, 0x59, 0x28, 0xfb, 0xdf, 0x07,
	0x27, 0x52, 0xd7, 0xd7, 0xaa, 0x66, 0xf8, 0xaa, 0x97, 0x5f, 0x87, 0x6c, 0x12, 0xdf, 0x44, 0x82,
	0x7c, 0x0c, 0x9b, 0x2c, 0x1e, 0xce, 0x67, 0xd5, 0xe5, 0x4e, 0x2e, 0xd1, 0x92, 0xaa, 0x9f, 0x96,
	0xe1, 0xd5, 0x7d, 0x5c, 0xa2, 0x65, 0x89, 0x1b, 0xcb, 0x3b, 0x64, 0x22, 0x71, 0x59, 0xe2, 0x36,
	0xf5, 0xc0, 0x64, 0x80, 0x94, 0x09, 0x24, 0x4f, 0x41, 0xc7, 0xb0, 0x1b, 0x33, 0x11, 0xbb, 0xde,
	0x08, 0x19, 0x47, 0x93, 0x42, 0x0d, 0x85, 0xb9, 0x66, 0x22, 0x3e, 0xd5, 0x70, 0x29, 0x32, 0x09,
	0x03, 0x11, 0xbb, 0x63, 0xad, 0xbc, 0xca, 0x9c, 0x1a, 0xad, 0x2a, 0x60, 0xfa, 0x20, 0xe7, 0x4f,
	0x1b, 0xd0, 0x56, 0x2f, 0x54, 0x75, 0xd3, 0x3c, 0xcd, 0xae, 0x9e, 0xb7, 0xc8, 0x63, 0x69, 0x68,
	0xed, 0x02, 0x73, 0x24, 0x1f, 0x40, 0x69, 0xa1, 0xc5, 0xe8, 0xc2, 0xaa, 0x7b, 0xcb, 0x84, 0xe3,
	0xed, 0x52, 0x6f, 0x91, 0x40, 0xab, 0xb7, 0x28, 0xfd, 0xe5, 0x7b, 0x27, 0x3c, 0xf0, 0x50, 0xbf,
	0xba, 0xa8, 0x2e, 0x69, 0x1a, 0xd4, 0x95, 0xc4, 0xa8, 0xa7, 0xbf, 0x82, 0x7a, 0xfa, 0x0c, 0x37,
	0x52, 0x03, 0x55, 0x6b, 0x4b, 0x25, 0xc4, 0x47, 0x56, 0xf1, 0x5b, 0xe7, 0x28, 0x5a, 0x1b, 0x5b,
	0xd0, 0x98, 0x7c, 0x08, 0x95, 0xb4, 0xaf, 0x4d, 0xa5, 0x76, 0xba, 0x99, 0xe8, 0x89, 0xbf, 0x37,
	0x7d, 0xe9, 0x67, 0x4f, 0x9b, 0xcf, 0x0b, 0x3b, 0x29, 0xd2, 0xf9, 0x3d, 0xb4, 0x74, 0x74, 0x51,
	0x8c, 0x91, 0xdf, 0xaa, 0x90, 0xcb, 0xc6, 0x05, 0x10, 0x6a, 0x7e, 0xcf, 0x8a, 0xea, 0xf9, 0x3d,
	0x5a, 0xd6, 0x30, 0x59, 0x55, 0xf7, 0xa1, 0x38, 0x8a, 0x99, 0xc8, 0x42, 0x4d, 0x9e, 0xba, 0x35,
	0xa8, 0xf0, 0x4c, 0x98, 0xf3, 0xd7, 0x02, 0xb4, 0x5e, 0x24, 0xaa, 0x76, 0x9e, 0x46, 0xe1, 0x60,
	0x14, 0x78, 0xd6, 0x60, 0xf1, 0x06, 0xca, 0x9e, 0x01, 0xa6, 0x75, 0xe6, 0x4b, 0xab, 0x41, 0xad,
	0x61, 0xeb, 0xcc, 0x21, 0xba, 0x2e, 0x64, 0x32, 0xda, 0x3d, 0xa8, 0xe7, 0x91, 0x2b, 0xb2, 0xf7,
	0x69, 0x3e, 0x7b, 0xef, 0xe7, 0xf6, 0x16, 0xc5, 0xba, 0xb8, 0x4e, 0x7c, 0x03, 0x55, 0x1b, 0x45,
	0xbe, 0x58, 0x56, 0x9b, 0x2c, 0x4b, 0xb1, 0xf4, 0x72, 0xde, 0x42, 0xc9, 0x80, 0x65, 0x0c, 0xc6,
	0x49, 0xff, 0x0f, 0xe8, 0x89, 0x54, 0x2b, 0x73, 0x94, 0xf5, 0x81, 0x23, 0x8b, 0xd3, 0x2a, 0x50,
	0xa6, 0xe9, 0x49, 0xb6, 0x2f, 0xae, 0x3a, 0xb5, 0x1a, 0x45, 0x62, 0xc1, 0xc6, 0x13, 0x15, 0x83,
	0x9b, 0x74, 0x57, 0xc3, 0x7b, 0x06, 0xec, 0x1c, 0x03, 0xa1, 0x4c, 0xf6, 0xb3, 0xef, 0x12, 0xe4,
	0x66, 0x6b, 0x95, 0x11, 0x20, 0xcb, 0x80, 0xd5, 0x1d, 0x77, 0xe4, 0x59, 0xce, 0x7c, 0xaf, 0x61,
	0x2f, 0xc7, 0x90, 0x7a, 0x66, 0x3d, 0x87, 0x9c, 0x3f, 0x15, 0x4a, 0x04, 0xc8, 0x4d, 0xb9, 0x92,
	0x80, 0x5e, 0x80, 0xdc, 0xe9, 0xc1, 0xde, 0xeb, 0xc8, 0x0f, 0x06, 0x33, 0x2d, 0xf4, 0xdd, 0x0a,
	0xc8, 0xec, 0x0a, 0xf1, 0xce, 0x5d, 0x14, 0x59, 0x09, 0xf1, 0xee, 0xd2, 0x48, 0xbd, 0x0f, 0xfb,
	0x79, 0xa9, 0xe9, 0xf2, 0x7d, 0x03, 0x87, 0xdd, 0x64, 0x3c, 0x51, 0x49, 0x28, 0xc7, 0x19, 0x26,
	0xd0, 0x1a, 0x76, 0xa5, 0xf9, 0x5d, 0xc1, 0xf8, 0x5b, 0x34, 0x05, 0x17, 0x24, 0xa8, 0xa7, 0x20,
	0xe4, 0x29, 0xec, 0x0d, 0x50, 0xa7, 0xa9, 0xac, 0x3f, 0xee, 0x44, 0x06, 0xfa, 0x5d, 0x7a, 0xfb,
	0xee, 0x40, 0x4b, 0xbb, 0x66, 0xe2, 0x0a, 0xf9, 0xc5, 0x9d, 0x73, 0x06, 0x20, 0xb5, 0xd1, 0xf7,
	0xff, 0xcf, 0xd6, 0xa1, 0x70, 0x28, 0x03, 0x28, 0x93, 0x94, 0xa5, 0xc2, 0x4f, 0xa1, 0xaa, 0xf8,
	0xb8, 0x86, 0xa7, 0x61, 0x65, 0xad, 0x70, 0x19, 0x13, 0xad, 0x84, 0x99, 0x80, 0x67, 0xff, 0xae,
	0x42, 0xd5, 0x0c, 0xe1, 0x92, 0x96, 0x9c, 0x43, 0x2d, 0xf7, 0x43, 0x82, 0x58, 0x11, 0x6e, 0xff,
	0xcb, 0x68, 0x3f, 0xca, 0xe0, 0xab, 0xff, 0x60, 0x5c, 0x42, 0x63, 0x71, 0x95, 0x5f, 0x2b, 0xcc,
	0x79, 0xf7, 0xfa, 0x4f, 0x7e, 0x09, 0xe5, 0xae, 0x99, 0xb2, 0xd7, 0x0a, 0x3a, 0x5c, 0x82, 0xa7,
	0xdc, 0xa7, 0xd0, 0xb8, 0x62, 0x49, 0x8c, 0xdd, 0x6c, 0x50, 0xff, 0xef, 0x85, 0x9c, 0x41, 0x93,
	0x62, 0x9c, 0x8c, 0x7f, 0x98, 0x94, 0x5f, 0x03, 0x64, 0xab, 0x30, 0x79, 0x90, 0x1f, 0x62, 0x72,
	0x1b, 0x75, 0xfb, 0xff, 0x56, 0x23, 0x53, 0x41, 0xaf, 0xa0, 0x9e, 0xdf, 0x76, 0xc9, 0xa3, 0xe5,
	0xe9, 0x37, 0xb7, 0x07, 0xb7, 0xd7, 0xad, 0x5e, 0xe4, 0x05, 0x54, 0xed, 0xed, 0x6d, 0xed, 0xab,
	0x3e, 0xcc, 0x6b, 0xb4, 0xb4, 0xed, 0x9d, 0x41, 0xc5, 0xda, 0x91, 0x89, 0xf5, 0x80, 0xe5, 0xd5,
	0x79, 0xbd, 0x36, 0x57, 0xd0, 0x5c, 0x5a, 0x44, 0x89, 0x15, 0x24, 0xeb, 0xb6, 0xd4, 0xf5, 0x46,
	0x3f, 0x87, 0x5a, 0x6e, 0x9f, 0x7c, 0x9f, 0xb8, 0x5e, 0xbd, 0x80, 0x9e, 0x41, 0xc5, 0x5a, 0xad,
	0xd6, 0xca, 0x79, 0xb8, 0x38, 0x9c, 0xe6, 0x37, 0xb1, 0x1e, 0xd4, 0x72, 0x43, 0x06, 0x79, 0x38,
	0xb7, 0xc5, 0xc2, 0xf0, 0xa1, 0xc5, 0x7d, 0xbc, 0xd0, 0xda, 0x57, 0x4f, 0x28, 0x5f, 0x43, 0xc9,
	0x4c, 0xc2, 0x6b, 0x15, 0x6b, 0xaf, 0x9f, 0x9a, 0xc9, 0x37, 0x50, 0x9e, 0xcf, 0x8b, 0xc4, 0x22,
	0x5c, 0x1c, 0x22, 0xd7, 0xdb, 0xf9, 0x4a, 0xa6, 0xc8, 0xc2, 0x4c, 0x60, 0x7b, 0x6e, 0xdd, 0xc0,
	0xb0, 0x5e, 0xe2, 0x25, 0x34, 0x16, 0x7b, 0xf9, 0xfb, 0xd4, 0x91, 0xb5, 0x63, 0xc3, 0x09, 0xd4,
	0xd5, 0x50, 0xf8, 0x6e, 0x69, 0xdf, 0xa7, 0xd2, 0x62, 0xe7, 0x20, 0x4f, 0xac, 0x39, 0x7e, 0x75,
	0x57, 0xf9, 0x3e, 0x79, 0xbb, 0xaa, 0x81, 0x5a, 0x4d, 0xc2, 0x4a, 0x9c, 0xe5, 0x96, 0x6c, 0x07,
	0xd7, 0xaa, 0xfe, 0x4b, 0xa1, 0xa9, 0x3b, 0x9e, 0xd5, 0x2b, 0x88, 0xc5, 0xb3, 0xa2, 0xc9, 0xda,
	0x89, 0xbd, 0xaa, 0x5b, 0x92, 0x6f, 0x61, 0x77, 0xa1, 0xfb, 0xac, 0xb5, 0xdb, 0x93, 0x7c, 0x84,
	0xad, 0x68, 0x58, 0xfd, 0x6d, 0xf5, 0x83, 0xfc, 0xab, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf3,
	0x32, 0x77, 0xa1, 0x53, 0x17, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuctionAdminClient is the client API for AuctionAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuctionAdminClient interface {
	MasterAccount(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*MasterAccountResponse, error)
	ConnectedTraders(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ConnectedTradersResponse, error)
	BatchTick(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	PauseBatchTicker(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ResumeBatchTicker(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
	AccountDetails(ctx context.Context, in *AccountDetailsRequest, opts ...grpc.CallOption) (*poolrpc.AuctionAccount, error)
	ListAccounts(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	EditAccount(ctx context.Context, in *EditAccountRequest, opts ...grpc.CallOption) (*poolrpc.AuctionAccount, error)
	DeleteAccountDiff(ctx context.Context, in *DeleteAccountDiffRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	AuctionStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AuctionStatusResponse, error)
	ListBatches(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListBatchesResponse, error)
	BatchSnapshot(ctx context.Context, in *poolrpc.BatchSnapshotRequest, opts ...grpc.CallOption) (*AdminBatchSnapshotResponse, error)
	ListBans(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListBansResponse, error)
	RemoveBan(ctx context.Context, in *RemoveBanRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	RemoveReservation(ctx context.Context, in *RemoveReservationRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	FundingConflicts(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*FundingConflictsResponse, error)
	ClearConflicts(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	BumpBatchFeeRate(ctx context.Context, in *BumpBatchFeeRateRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	QueryNodeRating(ctx context.Context, in *RatingQueryRequest, opts ...grpc.CallOption) (*RatingQueryResponse, error)
	ModifyNodeRatings(ctx context.Context, in *ModifyRatingRequest, opts ...grpc.CallOption) (*ModifyRatingResponse, error)
	ListNodeRatings(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListNodeRatingsResponse, error)
}

type auctionAdminClient struct {
	cc *grpc.ClientConn
}

func NewAuctionAdminClient(cc *grpc.ClientConn) AuctionAdminClient {
	return &auctionAdminClient{cc}
}

func (c *auctionAdminClient) MasterAccount(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*MasterAccountResponse, error) {
	out := new(MasterAccountResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/MasterAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) ConnectedTraders(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ConnectedTradersResponse, error) {
	out := new(ConnectedTradersResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/ConnectedTraders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) BatchTick(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/BatchTick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) PauseBatchTicker(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/PauseBatchTicker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) ResumeBatchTicker(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/ResumeBatchTicker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/ListOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) AccountDetails(ctx context.Context, in *AccountDetailsRequest, opts ...grpc.CallOption) (*poolrpc.AuctionAccount, error) {
	out := new(poolrpc.AuctionAccount)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/AccountDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) ListAccounts(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) EditAccount(ctx context.Context, in *EditAccountRequest, opts ...grpc.CallOption) (*poolrpc.AuctionAccount, error) {
	out := new(poolrpc.AuctionAccount)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/EditAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) DeleteAccountDiff(ctx context.Context, in *DeleteAccountDiffRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/DeleteAccountDiff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) AuctionStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*AuctionStatusResponse, error) {
	out := new(AuctionStatusResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/AuctionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) ListBatches(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListBatchesResponse, error) {
	out := new(ListBatchesResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/ListBatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) BatchSnapshot(ctx context.Context, in *poolrpc.BatchSnapshotRequest, opts ...grpc.CallOption) (*AdminBatchSnapshotResponse, error) {
	out := new(AdminBatchSnapshotResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/BatchSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) ListBans(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListBansResponse, error) {
	out := new(ListBansResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/ListBans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) RemoveBan(ctx context.Context, in *RemoveBanRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/RemoveBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) RemoveReservation(ctx context.Context, in *RemoveReservationRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/RemoveReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) FundingConflicts(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*FundingConflictsResponse, error) {
	out := new(FundingConflictsResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/FundingConflicts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) ClearConflicts(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/ClearConflicts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) BumpBatchFeeRate(ctx context.Context, in *BumpBatchFeeRateRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/BumpBatchFeeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) QueryNodeRating(ctx context.Context, in *RatingQueryRequest, opts ...grpc.CallOption) (*RatingQueryResponse, error) {
	out := new(RatingQueryResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/QueryNodeRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) ModifyNodeRatings(ctx context.Context, in *ModifyRatingRequest, opts ...grpc.CallOption) (*ModifyRatingResponse, error) {
	out := new(ModifyRatingResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/ModifyNodeRatings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionAdminClient) ListNodeRatings(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ListNodeRatingsResponse, error) {
	out := new(ListNodeRatingsResponse)
	err := c.cc.Invoke(ctx, "/adminrpc.AuctionAdmin/ListNodeRatings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuctionAdminServer is the server API for AuctionAdmin service.
type AuctionAdminServer interface {
	MasterAccount(context.Context, *EmptyRequest) (*MasterAccountResponse, error)
	ConnectedTraders(context.Context, *EmptyRequest) (*ConnectedTradersResponse, error)
	BatchTick(context.Context, *EmptyRequest) (*EmptyResponse, error)
	PauseBatchTicker(context.Context, *EmptyRequest) (*EmptyResponse, error)
	ResumeBatchTicker(context.Context, *EmptyRequest) (*EmptyResponse, error)
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
	AccountDetails(context.Context, *AccountDetailsRequest) (*poolrpc.AuctionAccount, error)
	ListAccounts(context.Context, *EmptyRequest) (*ListAccountsResponse, error)
	EditAccount(context.Context, *EditAccountRequest) (*poolrpc.AuctionAccount, error)
	DeleteAccountDiff(context.Context, *DeleteAccountDiffRequest) (*EmptyResponse, error)
	AuctionStatus(context.Context, *EmptyRequest) (*AuctionStatusResponse, error)
	ListBatches(context.Context, *EmptyRequest) (*ListBatchesResponse, error)
	BatchSnapshot(context.Context, *poolrpc.BatchSnapshotRequest) (*AdminBatchSnapshotResponse, error)
	ListBans(context.Context, *EmptyRequest) (*ListBansResponse, error)
	RemoveBan(context.Context, *RemoveBanRequest) (*EmptyResponse, error)
	RemoveReservation(context.Context, *RemoveReservationRequest) (*EmptyResponse, error)
	FundingConflicts(context.Context, *EmptyRequest) (*FundingConflictsResponse, error)
	ClearConflicts(context.Context, *EmptyRequest) (*EmptyResponse, error)
	BumpBatchFeeRate(context.Context, *BumpBatchFeeRateRequest) (*EmptyResponse, error)
	QueryNodeRating(context.Context, *RatingQueryRequest) (*RatingQueryResponse, error)
	ModifyNodeRatings(context.Context, *ModifyRatingRequest) (*ModifyRatingResponse, error)
	ListNodeRatings(context.Context, *EmptyRequest) (*ListNodeRatingsResponse, error)
}

// UnimplementedAuctionAdminServer can be embedded to have forward compatible implementations.
type UnimplementedAuctionAdminServer struct {
}

func (*UnimplementedAuctionAdminServer) MasterAccount(ctx context.Context, req *EmptyRequest) (*MasterAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MasterAccount not implemented")
}
func (*UnimplementedAuctionAdminServer) ConnectedTraders(ctx context.Context, req *EmptyRequest) (*ConnectedTradersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectedTraders not implemented")
}
func (*UnimplementedAuctionAdminServer) BatchTick(ctx context.Context, req *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTick not implemented")
}
func (*UnimplementedAuctionAdminServer) PauseBatchTicker(ctx context.Context, req *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseBatchTicker not implemented")
}
func (*UnimplementedAuctionAdminServer) ResumeBatchTicker(ctx context.Context, req *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeBatchTicker not implemented")
}
func (*UnimplementedAuctionAdminServer) ListOrders(ctx context.Context, req *ListOrdersRequest) (*ListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (*UnimplementedAuctionAdminServer) AccountDetails(ctx context.Context, req *AccountDetailsRequest) (*poolrpc.AuctionAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDetails not implemented")
}
func (*UnimplementedAuctionAdminServer) ListAccounts(ctx context.Context, req *EmptyRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (*UnimplementedAuctionAdminServer) EditAccount(ctx context.Context, req *EditAccountRequest) (*poolrpc.AuctionAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAccount not implemented")
}
func (*UnimplementedAuctionAdminServer) DeleteAccountDiff(ctx context.Context, req *DeleteAccountDiffRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountDiff not implemented")
}
func (*UnimplementedAuctionAdminServer) AuctionStatus(ctx context.Context, req *EmptyRequest) (*AuctionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionStatus not implemented")
}
func (*UnimplementedAuctionAdminServer) ListBatches(ctx context.Context, req *EmptyRequest) (*ListBatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBatches not implemented")
}
func (*UnimplementedAuctionAdminServer) BatchSnapshot(ctx context.Context, req *poolrpc.BatchSnapshotRequest) (*AdminBatchSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSnapshot not implemented")
}
func (*UnimplementedAuctionAdminServer) ListBans(ctx context.Context, req *EmptyRequest) (*ListBansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBans not implemented")
}
func (*UnimplementedAuctionAdminServer) RemoveBan(ctx context.Context, req *RemoveBanRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBan not implemented")
}
func (*UnimplementedAuctionAdminServer) RemoveReservation(ctx context.Context, req *RemoveReservationRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveReservation not implemented")
}
func (*UnimplementedAuctionAdminServer) FundingConflicts(ctx context.Context, req *EmptyRequest) (*FundingConflictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundingConflicts not implemented")
}
func (*UnimplementedAuctionAdminServer) ClearConflicts(ctx context.Context, req *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearConflicts not implemented")
}
func (*UnimplementedAuctionAdminServer) BumpBatchFeeRate(ctx context.Context, req *BumpBatchFeeRateRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BumpBatchFeeRate not implemented")
}
func (*UnimplementedAuctionAdminServer) QueryNodeRating(ctx context.Context, req *RatingQueryRequest) (*RatingQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNodeRating not implemented")
}
func (*UnimplementedAuctionAdminServer) ModifyNodeRatings(ctx context.Context, req *ModifyRatingRequest) (*ModifyRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyNodeRatings not implemented")
}
func (*UnimplementedAuctionAdminServer) ListNodeRatings(ctx context.Context, req *EmptyRequest) (*ListNodeRatingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeRatings not implemented")
}

func RegisterAuctionAdminServer(s *grpc.Server, srv AuctionAdminServer) {
	s.RegisterService(&_AuctionAdmin_serviceDesc, srv)
}

func _AuctionAdmin_MasterAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).MasterAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/MasterAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).MasterAccount(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_ConnectedTraders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).ConnectedTraders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/ConnectedTraders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).ConnectedTraders(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_BatchTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).BatchTick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/BatchTick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).BatchTick(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_PauseBatchTicker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).PauseBatchTicker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/PauseBatchTicker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).PauseBatchTicker(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_ResumeBatchTicker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).ResumeBatchTicker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/ResumeBatchTicker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).ResumeBatchTicker(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/ListOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).ListOrders(ctx, req.(*ListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_AccountDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).AccountDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/AccountDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).AccountDetails(ctx, req.(*AccountDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).ListAccounts(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_EditAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).EditAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/EditAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).EditAccount(ctx, req.(*EditAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_DeleteAccountDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).DeleteAccountDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/DeleteAccountDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).DeleteAccountDiff(ctx, req.(*DeleteAccountDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_AuctionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).AuctionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/AuctionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).AuctionStatus(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_ListBatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).ListBatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/ListBatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).ListBatches(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_BatchSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(poolrpc.BatchSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).BatchSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/BatchSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).BatchSnapshot(ctx, req.(*poolrpc.BatchSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_ListBans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).ListBans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/ListBans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).ListBans(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_RemoveBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).RemoveBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/RemoveBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).RemoveBan(ctx, req.(*RemoveBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_RemoveReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).RemoveReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/RemoveReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).RemoveReservation(ctx, req.(*RemoveReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_FundingConflicts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).FundingConflicts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/FundingConflicts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).FundingConflicts(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_ClearConflicts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).ClearConflicts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/ClearConflicts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).ClearConflicts(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_BumpBatchFeeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BumpBatchFeeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).BumpBatchFeeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/BumpBatchFeeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).BumpBatchFeeRate(ctx, req.(*BumpBatchFeeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_QueryNodeRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).QueryNodeRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/QueryNodeRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).QueryNodeRating(ctx, req.(*RatingQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_ModifyNodeRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).ModifyNodeRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/ModifyNodeRatings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).ModifyNodeRatings(ctx, req.(*ModifyRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionAdmin_ListNodeRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionAdminServer).ListNodeRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminrpc.AuctionAdmin/ListNodeRatings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionAdminServer).ListNodeRatings(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuctionAdmin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "adminrpc.AuctionAdmin",
	HandlerType: (*AuctionAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MasterAccount",
			Handler:    _AuctionAdmin_MasterAccount_Handler,
		},
		{
			MethodName: "ConnectedTraders",
			Handler:    _AuctionAdmin_ConnectedTraders_Handler,
		},
		{
			MethodName: "BatchTick",
			Handler:    _AuctionAdmin_BatchTick_Handler,
		},
		{
			MethodName: "PauseBatchTicker",
			Handler:    _AuctionAdmin_PauseBatchTicker_Handler,
		},
		{
			MethodName: "ResumeBatchTicker",
			Handler:    _AuctionAdmin_ResumeBatchTicker_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _AuctionAdmin_ListOrders_Handler,
		},
		{
			MethodName: "AccountDetails",
			Handler:    _AuctionAdmin_AccountDetails_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _AuctionAdmin_ListAccounts_Handler,
		},
		{
			MethodName: "EditAccount",
			Handler:    _AuctionAdmin_EditAccount_Handler,
		},
		{
			MethodName: "DeleteAccountDiff",
			Handler:    _AuctionAdmin_DeleteAccountDiff_Handler,
		},
		{
			MethodName: "AuctionStatus",
			Handler:    _AuctionAdmin_AuctionStatus_Handler,
		},
		{
			MethodName: "ListBatches",
			Handler:    _AuctionAdmin_ListBatches_Handler,
		},
		{
			MethodName: "BatchSnapshot",
			Handler:    _AuctionAdmin_BatchSnapshot_Handler,
		},
		{
			MethodName: "ListBans",
			Handler:    _AuctionAdmin_ListBans_Handler,
		},
		{
			MethodName: "RemoveBan",
			Handler:    _AuctionAdmin_RemoveBan_Handler,
		},
		{
			MethodName: "RemoveReservation",
			Handler:    _AuctionAdmin_RemoveReservation_Handler,
		},
		{
			MethodName: "FundingConflicts",
			Handler:    _AuctionAdmin_FundingConflicts_Handler,
		},
		{
			MethodName: "ClearConflicts",
			Handler:    _AuctionAdmin_ClearConflicts_Handler,
		},
		{
			MethodName: "BumpBatchFeeRate",
			Handler:    _AuctionAdmin_BumpBatchFeeRate_Handler,
		},
		{
			MethodName: "QueryNodeRating",
			Handler:    _AuctionAdmin_QueryNodeRating_Handler,
		},
		{
			MethodName: "ModifyNodeRatings",
			Handler:    _AuctionAdmin_ModifyNodeRatings_Handler,
		},
		{
			MethodName: "ListNodeRatings",
			Handler:    _AuctionAdmin_ListNodeRatings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}
