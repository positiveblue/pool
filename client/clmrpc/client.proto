syntax = "proto3";

import "google/api/annotations.proto";
import "server.proto";

package clmrpc;

service ChannelAuctioneerClient {
    rpc InitAccount (InitAccountRequest) returns (Account) {
        option (google.api.http) = {
            post: "/v1/clm/accounts"
            body: "*"
        };
    };

    rpc ListAccounts (ListAccountsRequest) returns (ListAccountsResponse) {
        option (google.api.http) = {
            get: "/v1/clm/accounts"
        };
    };

    rpc CloseAccount (CloseAccountRequest) returns (CloseAccountResponse) {
        option (google.api.http) = {
            delete: "/v1/clm/accounts/{trader_key}"
        };
    };

    rpc ModifyAccount (ModifyAccountRequest) returns (ModifyAccountResponse) {
        option (google.api.http) = {
            post: "/v1/clm/accounts/{account_sub_key_hex}"
            body: "*"
        };
    };

    rpc SubmitOrder (SubmitOrderRequest) returns (SubmitOrderResponse) {
        option (google.api.http) = {
            post: "/v1/clm/orders"
            body: "*"
        };
    };

    rpc ListOrders (ListOrdersRequest) returns (ListOrdersResponse) {
        option (google.api.http) = {
            get: "/v1/clm/orders"
        };
    }

    rpc CancelOrder (CancelOrderRequest) returns (CancelOrderResponse) {
        option (google.api.http) = {
            delete: "/v1/clm/orders/{order_nonce}"
        };
    };
}

message InitAccountRequest {
    uint32 account_value = 1;
    uint32 account_expiry = 2;
}

message ListAccountsRequest {
}
message ListAccountsResponse {
    repeated Account accounts = 1;
}

message CloseAccountRequest {
    // The trader key associated with the account that will be closed.
    bytes trader_key = 1 [json_name = "trader_key"];

    /*
    The outputs that should be created as a result of closing the account. If
    none are specified, then the funds within the account are sent to an address
    the backing lnd node controls.
    */
    repeated Output outputs = 2 [json_name = "outputs"];
}
message CloseAccountResponse {
    // The hash of the closing transaction.
    bytes close_txid = 1 [json_name = "close_txid"];
}

message ModifyAccountRequest {
    string account_sub_key_hex = 1;
    int64 new_account_balance = 2;
}
message ModifyAccountResponse {
}


enum AccountState {
    // The state of an account when it is pending its confirmation on-chain.
    PENDING_OPEN = 0;

    // The state of an account once it has confirmed on-chain.
    OPEN = 1;

    /*
    The state of an account once its expiration has been reached and its closing
    transaction has confirmed.
    */
    EXPIRED = 2;

    /*
    The state of an account when we're waiting for the closing transaction of
    an account to confirm that required cooperation with the auctioneer.
    */
    PENDING_CLOSED = 3;

    // The state of an account once its closing transaction has confirmed.
    CLOSED = 4;
}

message Account {
    /*
    The identifying component of an account. This is the key used for the trader
    in the 2-of-2 multi-sig construction of an account with an auctioneer.
    */
    bytes trader_key = 1;

    /*
    The current outpoint associated with the account. This will change every
    time the account has been updated.
    */
    OutPoint outpoint = 2;

    // The current value in satoshis of the account.
    uint32 value = 3;

    // The height at which the account will expire.
    uint32 expiration_height = 4;

    // The current state of the account.
    AccountState state = 5;

    // The hash of the account's closing transaction, if any.
    bytes close_txid = 6;
}

message SubmitOrderRequest {
    oneof details {
        Ask ask = 1;
        Bid bid = 2;
    }
}
message SubmitOrderResponse {
    oneof details {
        /**
        Order failed with the given reason.
        */
        InvalidOrder invalid_order = 1;

        /**
        Order was accepted.
        */
        bool accepted = 2;
    }
}

message ListOrdersRequest {
}
message ListOrdersResponse {
    repeated Ask asks = 1;
    repeated Bid bids = 2;
}

message CancelOrderRequest {
    bytes order_nonce = 1;
}
message CancelOrderResponse {
}

message Order {
    /**
    The user's sub key of the account that is used for the order.
    */
    bytes user_sub_key = 1 [json_name = "user_sub_key"];

    /**
    Fixed order rate in parts per million.
    */
    int64 rate_fixed = 2 [json_name = "rate_fixed"];

    /**
    Order amount in satoshis.
    */
    int64 amt = 3 [json_name = "amt"];

    /**
    Preferred fee rate to be used for the channel funding transaction, expressed
    in satoshis per 1000 weight units (sat/kW).
    */
    int64 funding_fee_rate = 4 [json_name = "funding_fee_rate"];

    /**
    Order nonce, acts as unique order identifier.
    */
    bytes order_nonce = 5 [json_name = "order_nonce"];

    /**
    The state the order currently is in.
    */
    string state = 6 [json_name = "state"];

    /**
    The number of order units the amount corresponds to.
    */
    uint32 units = 7 [json_name = "units"];

    /**
    The number of currently unfilled units of this order. This will be equal to
    the total amount of units until the order has reached the state PARTIAL_FILL
    or EXECUTED.
    */
    uint32 units_unfulfilled = 8 [json_name = "units_unfulfilled"];
}

message Bid {
    /**
    The common fields shared between both ask and bid order types.
    */
    Order details = 1 [json_name = "details"];

    /**
    Required minimum number of blocks that a channel opened as a result of this
    bid should be kept open.
    */
    int64 min_duration_blocks = 2 [json_name = "min_duration_blocks"];

    /**
    The version of the order format that is used. Will be increased once new
    features are added.
    */
    uint32 version = 3 [json_name = "version"];
}

message Ask {
    /**
    The common fields shared between both ask and bid order types.
    */
    Order details = 1 [json_name = "details"];

    /**
    The maximum number of blocks the liquidity provider is willing to provide
    the channel funds for.
    */
    int64 max_duration_blocks = 2 [json_name = "max_duration_blocks"];

    /**
    The version of the order format that is used. Will be increased once new
    features are added.
    */
    uint32 version = 3 [json_name = "version"];
}
