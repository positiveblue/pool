// Code generated by MockGen. DO NOT EDIT.
// Source: metrics/interface.go

// Package metrics is a generated GoMock package.
package metrics

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	order "github.com/lightninglabs/pool/order"
	order0 "github.com/lightninglabs/subasta/order"
	matching "github.com/lightninglabs/subasta/venue/matching"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// GenerateBatchMetrics mocks base method.
func (m *MockManager) GenerateBatchMetrics(matchedOrders []*matching.MatchedOrder) (*BatchMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateBatchMetrics", matchedOrders)
	ret0, _ := ret[0].(*BatchMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateBatchMetrics indicates an expected call of GenerateBatchMetrics.
func (mr *MockManagerMockRecorder) GenerateBatchMetrics(matchedOrders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateBatchMetrics", reflect.TypeOf((*MockManager)(nil).GenerateBatchMetrics), matchedOrders)
}

// GenerateOrderMetric mocks base method.
func (m *MockManager) GenerateOrderMetric(serverOrders []*order0.ServerOrder) (*OrderMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateOrderMetric", serverOrders)
	ret0, _ := ret[0].(*OrderMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateOrderMetric indicates an expected call of GenerateOrderMetric.
func (mr *MockManagerMockRecorder) GenerateOrderMetric(serverOrders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateOrderMetric", reflect.TypeOf((*MockManager)(nil).GenerateOrderMetric), serverOrders)
}

// GetBatches mocks base method.
func (m *MockManager) GetBatches() map[order.BatchID]*matching.BatchSnapshot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatches")
	ret0, _ := ret[0].(map[order.BatchID]*matching.BatchSnapshot)
	return ret0
}

// GetBatches indicates an expected call of GetBatches.
func (mr *MockManagerMockRecorder) GetBatches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatches", reflect.TypeOf((*MockManager)(nil).GetBatches))
}

// GetLastUpdated mocks base method.
func (m *MockManager) GetLastUpdated() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastUpdated")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetLastUpdated indicates an expected call of GetLastUpdated.
func (mr *MockManagerMockRecorder) GetLastUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastUpdated", reflect.TypeOf((*MockManager)(nil).GetLastUpdated))
}

// GetOrders mocks base method.
func (m *MockManager) GetOrders() []*order0.ServerOrder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders")
	ret0, _ := ret[0].([]*order0.ServerOrder)
	return ret0
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockManagerMockRecorder) GetOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockManager)(nil).GetOrders))
}

// GetRefreshRate mocks base method.
func (m *MockManager) GetRefreshRate() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshRate")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetRefreshRate indicates an expected call of GetRefreshRate.
func (mr *MockManagerMockRecorder) GetRefreshRate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshRate", reflect.TypeOf((*MockManager)(nil).GetRefreshRate))
}

// GetTimeDurations mocks base method.
func (m *MockManager) GetTimeDurations() []time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeDurations")
	ret0, _ := ret[0].([]time.Duration)
	return ret0
}

// GetTimeDurations indicates an expected call of GetTimeDurations.
func (mr *MockManagerMockRecorder) GetTimeDurations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeDurations", reflect.TypeOf((*MockManager)(nil).GetTimeDurations))
}

// SetBatches mocks base method.
func (m *MockManager) SetBatches(batches map[order.BatchID]*matching.BatchSnapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBatches", batches)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBatches indicates an expected call of SetBatches.
func (mr *MockManagerMockRecorder) SetBatches(batches interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBatches", reflect.TypeOf((*MockManager)(nil).SetBatches), batches)
}

// SetLastUpdated mocks base method.
func (m *MockManager) SetLastUpdated(lastUpdated time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastUpdated", lastUpdated)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastUpdated indicates an expected call of SetLastUpdated.
func (mr *MockManagerMockRecorder) SetLastUpdated(lastUpdated interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastUpdated", reflect.TypeOf((*MockManager)(nil).SetLastUpdated), lastUpdated)
}

// SetOrders mocks base method.
func (m *MockManager) SetOrders(orders []*order0.ServerOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrders", orders)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOrders indicates an expected call of SetOrders.
func (mr *MockManagerMockRecorder) SetOrders(orders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrders", reflect.TypeOf((*MockManager)(nil).SetOrders), orders)
}

// SetRefreshRate mocks base method.
func (m *MockManager) SetRefreshRate(newTimeDuration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRefreshRate", newTimeDuration)
}

// SetRefreshRate indicates an expected call of SetRefreshRate.
func (mr *MockManagerMockRecorder) SetRefreshRate(newTimeDuration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRefreshRate", reflect.TypeOf((*MockManager)(nil).SetRefreshRate), newTimeDuration)
}
