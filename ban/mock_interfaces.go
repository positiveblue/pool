// Code generated by MockGen. DO NOT EDIT.
// Source: ban/interface.go

// Package ban is a generated GoMock package.
package ban

import (
	context "context"
	reflect "reflect"

	v2 "github.com/btcsuite/btcd/btcec/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// BanAccount mocks base method.
func (m *MockStore) BanAccount(ctx context.Context, accountKey *v2.PublicKey, info *Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BanAccount", ctx, accountKey, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// BanAccount indicates an expected call of BanAccount.
func (mr *MockStoreMockRecorder) BanAccount(ctx, accountKey, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BanAccount", reflect.TypeOf((*MockStore)(nil).BanAccount), ctx, accountKey, info)
}

// BanNode mocks base method.
func (m *MockStore) BanNode(ctx context.Context, nodeKey *v2.PublicKey, info *Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BanNode", ctx, nodeKey, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// BanNode indicates an expected call of BanNode.
func (mr *MockStoreMockRecorder) BanNode(ctx, nodeKey, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BanNode", reflect.TypeOf((*MockStore)(nil).BanNode), ctx, nodeKey, info)
}

// GetAccountBan mocks base method.
func (m *MockStore) GetAccountBan(ctx context.Context, accKey *v2.PublicKey) (*Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBan", ctx, accKey)
	ret0, _ := ret[0].(*Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBan indicates an expected call of GetAccountBan.
func (mr *MockStoreMockRecorder) GetAccountBan(ctx, accKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBan", reflect.TypeOf((*MockStore)(nil).GetAccountBan), ctx, accKey)
}

// GetNodeBan mocks base method.
func (m *MockStore) GetNodeBan(ctx context.Context, nodeKey *v2.PublicKey) (*Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeBan", ctx, nodeKey)
	ret0, _ := ret[0].(*Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeBan indicates an expected call of GetNodeBan.
func (mr *MockStoreMockRecorder) GetNodeBan(ctx, nodeKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeBan", reflect.TypeOf((*MockStore)(nil).GetNodeBan), ctx, nodeKey)
}

// ListBannedAccounts mocks base method.
func (m *MockStore) ListBannedAccounts(ctx context.Context) (map[[33]byte]*Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBannedAccounts", ctx)
	ret0, _ := ret[0].(map[[33]byte]*Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBannedAccounts indicates an expected call of ListBannedAccounts.
func (mr *MockStoreMockRecorder) ListBannedAccounts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBannedAccounts", reflect.TypeOf((*MockStore)(nil).ListBannedAccounts), ctx)
}

// ListBannedNodes mocks base method.
func (m *MockStore) ListBannedNodes(ctx context.Context) (map[[33]byte]*Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBannedNodes", ctx)
	ret0, _ := ret[0].(map[[33]byte]*Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBannedNodes indicates an expected call of ListBannedNodes.
func (mr *MockStoreMockRecorder) ListBannedNodes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBannedNodes", reflect.TypeOf((*MockStore)(nil).ListBannedNodes), ctx)
}

// RemoveAccountBan mocks base method.
func (m *MockStore) RemoveAccountBan(ctx context.Context, acctKey *v2.PublicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccountBan", ctx, acctKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAccountBan indicates an expected call of RemoveAccountBan.
func (mr *MockStoreMockRecorder) RemoveAccountBan(ctx, acctKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccountBan", reflect.TypeOf((*MockStore)(nil).RemoveAccountBan), ctx, acctKey)
}

// RemoveNodeBan mocks base method.
func (m *MockStore) RemoveNodeBan(ctx context.Context, nodeKey *v2.PublicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNodeBan", ctx, nodeKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNodeBan indicates an expected call of RemoveNodeBan.
func (mr *MockStoreMockRecorder) RemoveNodeBan(ctx, nodeKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNodeBan", reflect.TypeOf((*MockStore)(nil).RemoveNodeBan), ctx, nodeKey)
}
