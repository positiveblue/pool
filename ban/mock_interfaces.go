// Code generated by MockGen. DO NOT EDIT.
// Source: ban/interface.go

// Package ban is a generated GoMock package.
package ban

import (
	context "context"
	reflect "reflect"

	v2 "github.com/btcsuite/btcd/btcec/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// BanAccount mocks base method.
func (m *MockManager) BanAccount(accKey *v2.PublicKey, currentHeight uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BanAccount", accKey, currentHeight)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BanAccount indicates an expected call of BanAccount.
func (mr *MockManagerMockRecorder) BanAccount(accKey, currentHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BanAccount", reflect.TypeOf((*MockManager)(nil).BanAccount), accKey, currentHeight)
}

// BanNode mocks base method.
func (m *MockManager) BanNode(nodeKey *v2.PublicKey, currentHeight uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BanNode", nodeKey, currentHeight)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BanNode indicates an expected call of BanNode.
func (mr *MockManagerMockRecorder) BanNode(nodeKey, currentHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BanNode", reflect.TypeOf((*MockManager)(nil).BanNode), nodeKey, currentHeight)
}

// CalculateNewInfo mocks base method.
func (m *MockManager) CalculateNewInfo(currentHeight uint32, currentInfo *Info) *Info {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateNewInfo", currentHeight, currentInfo)
	ret0, _ := ret[0].(*Info)
	return ret0
}

// CalculateNewInfo indicates an expected call of CalculateNewInfo.
func (mr *MockManagerMockRecorder) CalculateNewInfo(currentHeight, currentInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateNewInfo", reflect.TypeOf((*MockManager)(nil).CalculateNewInfo), currentHeight, currentInfo)
}

// GetAccountBan mocks base method.
func (m *MockManager) GetAccountBan(accKey *v2.PublicKey, currentHeight uint32) (*Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBan", accKey, currentHeight)
	ret0, _ := ret[0].(*Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBan indicates an expected call of GetAccountBan.
func (mr *MockManagerMockRecorder) GetAccountBan(accKey, currentHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBan", reflect.TypeOf((*MockManager)(nil).GetAccountBan), accKey, currentHeight)
}

// GetNodeBan mocks base method.
func (m *MockManager) GetNodeBan(nodeKey *v2.PublicKey, currentHeight uint32) (*Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeBan", nodeKey, currentHeight)
	ret0, _ := ret[0].(*Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeBan indicates an expected call of GetNodeBan.
func (mr *MockManagerMockRecorder) GetNodeBan(nodeKey, currentHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeBan", reflect.TypeOf((*MockManager)(nil).GetNodeBan), nodeKey, currentHeight)
}

// IsAccountBanned mocks base method.
func (m *MockManager) IsAccountBanned(accKey *v2.PublicKey, currentHeight uint32) (bool, uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAccountBanned", accKey, currentHeight)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsAccountBanned indicates an expected call of IsAccountBanned.
func (mr *MockManagerMockRecorder) IsAccountBanned(accKey, currentHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAccountBanned", reflect.TypeOf((*MockManager)(nil).IsAccountBanned), accKey, currentHeight)
}

// IsNodeBanned mocks base method.
func (m *MockManager) IsNodeBanned(nodeKey *v2.PublicKey, currentHeight uint32) (bool, uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNodeBanned", nodeKey, currentHeight)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IsNodeBanned indicates an expected call of IsNodeBanned.
func (mr *MockManagerMockRecorder) IsNodeBanned(nodeKey, currentHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNodeBanned", reflect.TypeOf((*MockManager)(nil).IsNodeBanned), nodeKey, currentHeight)
}

// IsTraderBanned mocks base method.
func (m *MockManager) IsTraderBanned(acctBytes, nodeBytes [33]byte, currentHeight uint32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTraderBanned", acctBytes, nodeBytes, currentHeight)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTraderBanned indicates an expected call of IsTraderBanned.
func (mr *MockManagerMockRecorder) IsTraderBanned(acctBytes, nodeBytes, currentHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTraderBanned", reflect.TypeOf((*MockManager)(nil).IsTraderBanned), acctBytes, nodeBytes, currentHeight)
}

// ListBannedAccounts mocks base method.
func (m *MockManager) ListBannedAccounts(currentHeight uint32) (map[[33]byte]*Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBannedAccounts", currentHeight)
	ret0, _ := ret[0].(map[[33]byte]*Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBannedAccounts indicates an expected call of ListBannedAccounts.
func (mr *MockManagerMockRecorder) ListBannedAccounts(currentHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBannedAccounts", reflect.TypeOf((*MockManager)(nil).ListBannedAccounts), currentHeight)
}

// ListBannedNodes mocks base method.
func (m *MockManager) ListBannedNodes(currentHeight uint32) (map[[33]byte]*Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBannedNodes", currentHeight)
	ret0, _ := ret[0].(map[[33]byte]*Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBannedNodes indicates an expected call of ListBannedNodes.
func (mr *MockManagerMockRecorder) ListBannedNodes(currentHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBannedNodes", reflect.TypeOf((*MockManager)(nil).ListBannedNodes), currentHeight)
}

// RemoveAccountBan mocks base method.
func (m *MockManager) RemoveAccountBan(acctKey *v2.PublicKey, currentHeight uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccountBan", acctKey, currentHeight)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAccountBan indicates an expected call of RemoveAccountBan.
func (mr *MockManagerMockRecorder) RemoveAccountBan(acctKey, currentHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccountBan", reflect.TypeOf((*MockManager)(nil).RemoveAccountBan), acctKey, currentHeight)
}

// RemoveNodeBan mocks base method.
func (m *MockManager) RemoveNodeBan(nodeKey *v2.PublicKey, currentHeight uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNodeBan", nodeKey, currentHeight)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNodeBan indicates an expected call of RemoveNodeBan.
func (mr *MockManagerMockRecorder) RemoveNodeBan(nodeKey, currentHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNodeBan", reflect.TypeOf((*MockManager)(nil).RemoveNodeBan), nodeKey, currentHeight)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// BanAccount mocks base method.
func (m *MockStore) BanAccount(ctx context.Context, accountKey *v2.PublicKey, info *Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BanAccount", ctx, accountKey, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// BanAccount indicates an expected call of BanAccount.
func (mr *MockStoreMockRecorder) BanAccount(ctx, accountKey, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BanAccount", reflect.TypeOf((*MockStore)(nil).BanAccount), ctx, accountKey, info)
}

// BanNode mocks base method.
func (m *MockStore) BanNode(ctx context.Context, nodeKey *v2.PublicKey, info *Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BanNode", ctx, nodeKey, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// BanNode indicates an expected call of BanNode.
func (mr *MockStoreMockRecorder) BanNode(ctx, nodeKey, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BanNode", reflect.TypeOf((*MockStore)(nil).BanNode), ctx, nodeKey, info)
}

// GetAccountBan mocks base method.
func (m *MockStore) GetAccountBan(ctx context.Context, accKey *v2.PublicKey, currentHeight uint32) (*Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBan", ctx, accKey, currentHeight)
	ret0, _ := ret[0].(*Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBan indicates an expected call of GetAccountBan.
func (mr *MockStoreMockRecorder) GetAccountBan(ctx, accKey, currentHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBan", reflect.TypeOf((*MockStore)(nil).GetAccountBan), ctx, accKey, currentHeight)
}

// GetNodeBan mocks base method.
func (m *MockStore) GetNodeBan(ctx context.Context, nodeKey *v2.PublicKey, currentHeight uint32) (*Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeBan", ctx, nodeKey, currentHeight)
	ret0, _ := ret[0].(*Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeBan indicates an expected call of GetNodeBan.
func (mr *MockStoreMockRecorder) GetNodeBan(ctx, nodeKey, currentHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeBan", reflect.TypeOf((*MockStore)(nil).GetNodeBan), ctx, nodeKey, currentHeight)
}

// ListBannedAccounts mocks base method.
func (m *MockStore) ListBannedAccounts(ctx context.Context, currentHeight uint32) (map[[33]byte]*Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBannedAccounts", ctx, currentHeight)
	ret0, _ := ret[0].(map[[33]byte]*Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBannedAccounts indicates an expected call of ListBannedAccounts.
func (mr *MockStoreMockRecorder) ListBannedAccounts(ctx, currentHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBannedAccounts", reflect.TypeOf((*MockStore)(nil).ListBannedAccounts), ctx, currentHeight)
}

// ListBannedNodes mocks base method.
func (m *MockStore) ListBannedNodes(ctx context.Context, currentHeight uint32) (map[[33]byte]*Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBannedNodes", ctx, currentHeight)
	ret0, _ := ret[0].(map[[33]byte]*Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBannedNodes indicates an expected call of ListBannedNodes.
func (mr *MockStoreMockRecorder) ListBannedNodes(ctx, currentHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBannedNodes", reflect.TypeOf((*MockStore)(nil).ListBannedNodes), ctx, currentHeight)
}

// RemoveAccountBan mocks base method.
func (m *MockStore) RemoveAccountBan(ctx context.Context, acctKey *v2.PublicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccountBan", ctx, acctKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAccountBan indicates an expected call of RemoveAccountBan.
func (mr *MockStoreMockRecorder) RemoveAccountBan(ctx, acctKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccountBan", reflect.TypeOf((*MockStore)(nil).RemoveAccountBan), ctx, acctKey)
}

// RemoveNodeBan mocks base method.
func (m *MockStore) RemoveNodeBan(ctx context.Context, nodeKey *v2.PublicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNodeBan", ctx, nodeKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNodeBan indicates an expected call of RemoveNodeBan.
func (mr *MockStoreMockRecorder) RemoveNodeBan(ctx, nodeKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNodeBan", reflect.TypeOf((*MockStore)(nil).RemoveNodeBan), ctx, nodeKey)
}
